/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the PatchJiraConfigurationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchJiraConfigurationRequest{}

// PatchJiraConfigurationRequest struct for PatchJiraConfigurationRequest
type PatchJiraConfigurationRequest struct {
	Id *int32 `json:"id,omitempty"`
	OrganizationId *int32 `json:"organizationId,omitempty"`
	// Used by the Jira to FOSSA Webhook
	WebhookURL *string `json:"webhookURL,omitempty"`
	// Timestamp when Jira was created
	CreatedAt *string `json:"createdAt,omitempty"`
	// On/Off state of the Jira site enabled in FOSSA
	Enabled *bool `json:"enabled,omitempty"`
	// Display name of your Jira site inside of FOSSA
	Name *string `json:"name,omitempty"`
	// Url of your Jira Site
	BaseUrl NullableString `json:"base_url,omitempty"`
	ResolvedStatuses []string `json:"resolved_statuses,omitempty"`
	// When true, incoming webhooks will ignore/unignore issues linked to the specific tickets in question if the status matches one of the statuses listed in resolved_statuses.
	ResolvedStatusesEnabled *bool `json:"resolvedStatusesEnabled,omitempty"`
	Credentials *PatchJiraConfigurationRequestCredentials `json:"credentials,omitempty"`
	// HTTP headers to pass along when authenticating to the Jira site
	Headers map[string]string `json:"headers,omitempty"`
	// Available issue types to use when exporting tickets
	IssueTypes []string `json:"issueTypes,omitempty"`
	// Available labels to include when exporting tickets. Corresponds to a label in Jira
	Labels []string `json:"labels,omitempty"`
	// Available Jira Projects to export to from FOSSA
	JiraProjectIds []string `json:"jiraProjectIds,omitempty"`
	// a dictionary of custom fields
	CustomFields *map[string]PatchJiraConfigurationRequestCustomFieldsValue `json:"customFields,omitempty"`
	// The Jira Project to default to when exporting licensing issues
	DefaultLicensingProject NullableString `json:"defaultLicensingProject,omitempty"`
	// The Jira Project to default to when exporting security issues
	DefaultSecurityProject NullableString `json:"defaultSecurityProject,omitempty"`
	// toggle to determine if each individual issue is 1:1 with a ticket upon creation
	DefaultUniqueTickets *bool `json:"defaultUniqueTickets,omitempty"`
}

// NewPatchJiraConfigurationRequest instantiates a new PatchJiraConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchJiraConfigurationRequest() *PatchJiraConfigurationRequest {
	this := PatchJiraConfigurationRequest{}
	return &this
}

// NewPatchJiraConfigurationRequestWithDefaults instantiates a new PatchJiraConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchJiraConfigurationRequestWithDefaults() *PatchJiraConfigurationRequest {
	this := PatchJiraConfigurationRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PatchJiraConfigurationRequest) SetId(v int32) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetOrganizationId() int32 {
	if o == nil || IsNil(o.OrganizationId) {
		var ret int32
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetOrganizationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given int32 and assigns it to the OrganizationId field.
func (o *PatchJiraConfigurationRequest) SetOrganizationId(v int32) {
	o.OrganizationId = &v
}

// GetWebhookURL returns the WebhookURL field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetWebhookURL() string {
	if o == nil || IsNil(o.WebhookURL) {
		var ret string
		return ret
	}
	return *o.WebhookURL
}

// GetWebhookURLOk returns a tuple with the WebhookURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetWebhookURLOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookURL) {
		return nil, false
	}
	return o.WebhookURL, true
}

// HasWebhookURL returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasWebhookURL() bool {
	if o != nil && !IsNil(o.WebhookURL) {
		return true
	}

	return false
}

// SetWebhookURL gets a reference to the given string and assigns it to the WebhookURL field.
func (o *PatchJiraConfigurationRequest) SetWebhookURL(v string) {
	o.WebhookURL = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *PatchJiraConfigurationRequest) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PatchJiraConfigurationRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchJiraConfigurationRequest) SetName(v string) {
	o.Name = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchJiraConfigurationRequest) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl.Get()) {
		var ret string
		return ret
	}
	return *o.BaseUrl.Get()
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchJiraConfigurationRequest) GetBaseUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseUrl.Get(), o.BaseUrl.IsSet()
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasBaseUrl() bool {
	if o != nil && o.BaseUrl.IsSet() {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given NullableString and assigns it to the BaseUrl field.
func (o *PatchJiraConfigurationRequest) SetBaseUrl(v string) {
	o.BaseUrl.Set(&v)
}
// SetBaseUrlNil sets the value for BaseUrl to be an explicit nil
func (o *PatchJiraConfigurationRequest) SetBaseUrlNil() {
	o.BaseUrl.Set(nil)
}

// UnsetBaseUrl ensures that no value is present for BaseUrl, not even an explicit nil
func (o *PatchJiraConfigurationRequest) UnsetBaseUrl() {
	o.BaseUrl.Unset()
}

// GetResolvedStatuses returns the ResolvedStatuses field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetResolvedStatuses() []string {
	if o == nil || IsNil(o.ResolvedStatuses) {
		var ret []string
		return ret
	}
	return o.ResolvedStatuses
}

// GetResolvedStatusesOk returns a tuple with the ResolvedStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetResolvedStatusesOk() ([]string, bool) {
	if o == nil || IsNil(o.ResolvedStatuses) {
		return nil, false
	}
	return o.ResolvedStatuses, true
}

// HasResolvedStatuses returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasResolvedStatuses() bool {
	if o != nil && !IsNil(o.ResolvedStatuses) {
		return true
	}

	return false
}

// SetResolvedStatuses gets a reference to the given []string and assigns it to the ResolvedStatuses field.
func (o *PatchJiraConfigurationRequest) SetResolvedStatuses(v []string) {
	o.ResolvedStatuses = v
}

// GetResolvedStatusesEnabled returns the ResolvedStatusesEnabled field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetResolvedStatusesEnabled() bool {
	if o == nil || IsNil(o.ResolvedStatusesEnabled) {
		var ret bool
		return ret
	}
	return *o.ResolvedStatusesEnabled
}

// GetResolvedStatusesEnabledOk returns a tuple with the ResolvedStatusesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetResolvedStatusesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ResolvedStatusesEnabled) {
		return nil, false
	}
	return o.ResolvedStatusesEnabled, true
}

// HasResolvedStatusesEnabled returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasResolvedStatusesEnabled() bool {
	if o != nil && !IsNil(o.ResolvedStatusesEnabled) {
		return true
	}

	return false
}

// SetResolvedStatusesEnabled gets a reference to the given bool and assigns it to the ResolvedStatusesEnabled field.
func (o *PatchJiraConfigurationRequest) SetResolvedStatusesEnabled(v bool) {
	o.ResolvedStatusesEnabled = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetCredentials() PatchJiraConfigurationRequestCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret PatchJiraConfigurationRequestCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetCredentialsOk() (*PatchJiraConfigurationRequestCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given PatchJiraConfigurationRequestCredentials and assigns it to the Credentials field.
func (o *PatchJiraConfigurationRequest) SetCredentials(v PatchJiraConfigurationRequestCredentials) {
	o.Credentials = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetHeadersOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]string{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *PatchJiraConfigurationRequest) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetIssueTypes returns the IssueTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchJiraConfigurationRequest) GetIssueTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IssueTypes
}

// GetIssueTypesOk returns a tuple with the IssueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchJiraConfigurationRequest) GetIssueTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.IssueTypes) {
		return nil, false
	}
	return o.IssueTypes, true
}

// HasIssueTypes returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasIssueTypes() bool {
	if o != nil && !IsNil(o.IssueTypes) {
		return true
	}

	return false
}

// SetIssueTypes gets a reference to the given []string and assigns it to the IssueTypes field.
func (o *PatchJiraConfigurationRequest) SetIssueTypes(v []string) {
	o.IssueTypes = v
}

// GetLabels returns the Labels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchJiraConfigurationRequest) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchJiraConfigurationRequest) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *PatchJiraConfigurationRequest) SetLabels(v []string) {
	o.Labels = v
}

// GetJiraProjectIds returns the JiraProjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchJiraConfigurationRequest) GetJiraProjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.JiraProjectIds
}

// GetJiraProjectIdsOk returns a tuple with the JiraProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchJiraConfigurationRequest) GetJiraProjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.JiraProjectIds) {
		return nil, false
	}
	return o.JiraProjectIds, true
}

// HasJiraProjectIds returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasJiraProjectIds() bool {
	if o != nil && !IsNil(o.JiraProjectIds) {
		return true
	}

	return false
}

// SetJiraProjectIds gets a reference to the given []string and assigns it to the JiraProjectIds field.
func (o *PatchJiraConfigurationRequest) SetJiraProjectIds(v []string) {
	o.JiraProjectIds = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetCustomFields() map[string]PatchJiraConfigurationRequestCustomFieldsValue {
	if o == nil || IsNil(o.CustomFields) {
		var ret map[string]PatchJiraConfigurationRequestCustomFieldsValue
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetCustomFieldsOk() (*map[string]PatchJiraConfigurationRequestCustomFieldsValue, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]PatchJiraConfigurationRequestCustomFieldsValue and assigns it to the CustomFields field.
func (o *PatchJiraConfigurationRequest) SetCustomFields(v map[string]PatchJiraConfigurationRequestCustomFieldsValue) {
	o.CustomFields = &v
}

// GetDefaultLicensingProject returns the DefaultLicensingProject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchJiraConfigurationRequest) GetDefaultLicensingProject() string {
	if o == nil || IsNil(o.DefaultLicensingProject.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultLicensingProject.Get()
}

// GetDefaultLicensingProjectOk returns a tuple with the DefaultLicensingProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchJiraConfigurationRequest) GetDefaultLicensingProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultLicensingProject.Get(), o.DefaultLicensingProject.IsSet()
}

// HasDefaultLicensingProject returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasDefaultLicensingProject() bool {
	if o != nil && o.DefaultLicensingProject.IsSet() {
		return true
	}

	return false
}

// SetDefaultLicensingProject gets a reference to the given NullableString and assigns it to the DefaultLicensingProject field.
func (o *PatchJiraConfigurationRequest) SetDefaultLicensingProject(v string) {
	o.DefaultLicensingProject.Set(&v)
}
// SetDefaultLicensingProjectNil sets the value for DefaultLicensingProject to be an explicit nil
func (o *PatchJiraConfigurationRequest) SetDefaultLicensingProjectNil() {
	o.DefaultLicensingProject.Set(nil)
}

// UnsetDefaultLicensingProject ensures that no value is present for DefaultLicensingProject, not even an explicit nil
func (o *PatchJiraConfigurationRequest) UnsetDefaultLicensingProject() {
	o.DefaultLicensingProject.Unset()
}

// GetDefaultSecurityProject returns the DefaultSecurityProject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchJiraConfigurationRequest) GetDefaultSecurityProject() string {
	if o == nil || IsNil(o.DefaultSecurityProject.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultSecurityProject.Get()
}

// GetDefaultSecurityProjectOk returns a tuple with the DefaultSecurityProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchJiraConfigurationRequest) GetDefaultSecurityProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSecurityProject.Get(), o.DefaultSecurityProject.IsSet()
}

// HasDefaultSecurityProject returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasDefaultSecurityProject() bool {
	if o != nil && o.DefaultSecurityProject.IsSet() {
		return true
	}

	return false
}

// SetDefaultSecurityProject gets a reference to the given NullableString and assigns it to the DefaultSecurityProject field.
func (o *PatchJiraConfigurationRequest) SetDefaultSecurityProject(v string) {
	o.DefaultSecurityProject.Set(&v)
}
// SetDefaultSecurityProjectNil sets the value for DefaultSecurityProject to be an explicit nil
func (o *PatchJiraConfigurationRequest) SetDefaultSecurityProjectNil() {
	o.DefaultSecurityProject.Set(nil)
}

// UnsetDefaultSecurityProject ensures that no value is present for DefaultSecurityProject, not even an explicit nil
func (o *PatchJiraConfigurationRequest) UnsetDefaultSecurityProject() {
	o.DefaultSecurityProject.Unset()
}

// GetDefaultUniqueTickets returns the DefaultUniqueTickets field value if set, zero value otherwise.
func (o *PatchJiraConfigurationRequest) GetDefaultUniqueTickets() bool {
	if o == nil || IsNil(o.DefaultUniqueTickets) {
		var ret bool
		return ret
	}
	return *o.DefaultUniqueTickets
}

// GetDefaultUniqueTicketsOk returns a tuple with the DefaultUniqueTickets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchJiraConfigurationRequest) GetDefaultUniqueTicketsOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultUniqueTickets) {
		return nil, false
	}
	return o.DefaultUniqueTickets, true
}

// HasDefaultUniqueTickets returns a boolean if a field has been set.
func (o *PatchJiraConfigurationRequest) HasDefaultUniqueTickets() bool {
	if o != nil && !IsNil(o.DefaultUniqueTickets) {
		return true
	}

	return false
}

// SetDefaultUniqueTickets gets a reference to the given bool and assigns it to the DefaultUniqueTickets field.
func (o *PatchJiraConfigurationRequest) SetDefaultUniqueTickets(v bool) {
	o.DefaultUniqueTickets = &v
}

func (o PatchJiraConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchJiraConfigurationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.WebhookURL) {
		toSerialize["webhookURL"] = o.WebhookURL
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.BaseUrl.IsSet() {
		toSerialize["base_url"] = o.BaseUrl.Get()
	}
	if !IsNil(o.ResolvedStatuses) {
		toSerialize["resolved_statuses"] = o.ResolvedStatuses
	}
	if !IsNil(o.ResolvedStatusesEnabled) {
		toSerialize["resolvedStatusesEnabled"] = o.ResolvedStatusesEnabled
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if o.IssueTypes != nil {
		toSerialize["issueTypes"] = o.IssueTypes
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.JiraProjectIds != nil {
		toSerialize["jiraProjectIds"] = o.JiraProjectIds
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if o.DefaultLicensingProject.IsSet() {
		toSerialize["defaultLicensingProject"] = o.DefaultLicensingProject.Get()
	}
	if o.DefaultSecurityProject.IsSet() {
		toSerialize["defaultSecurityProject"] = o.DefaultSecurityProject.Get()
	}
	if !IsNil(o.DefaultUniqueTickets) {
		toSerialize["defaultUniqueTickets"] = o.DefaultUniqueTickets
	}
	return toSerialize, nil
}

type NullablePatchJiraConfigurationRequest struct {
	value *PatchJiraConfigurationRequest
	isSet bool
}

func (v NullablePatchJiraConfigurationRequest) Get() *PatchJiraConfigurationRequest {
	return v.value
}

func (v *NullablePatchJiraConfigurationRequest) Set(val *PatchJiraConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchJiraConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchJiraConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchJiraConfigurationRequest(val *PatchJiraConfigurationRequest) *NullablePatchJiraConfigurationRequest {
	return &NullablePatchJiraConfigurationRequest{value: val, isSet: true}
}

func (v NullablePatchJiraConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchJiraConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


