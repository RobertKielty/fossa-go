/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the NPMRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NPMRegistry{}

// NPMRegistry struct for NPMRegistry
type NPMRegistry struct {
	// UUID of the NPM registry (For FOSSA internal usage)
	Id *string `json:"_id,omitempty"`
	// Remote URL of the NPM registry
	Url *string `json:"url,omitempty"`
	Auth map[string]interface{} `json:"auth,omitempty"`
	Ca *GetOrganizationBowerSettings200ResponseRegistriesInnerUrl `json:"ca,omitempty"`
	// Used when an existing CA is obfuscated in the response
	HasCa *bool `json:"hasCa,omitempty"`
}

// NewNPMRegistry instantiates a new NPMRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNPMRegistry() *NPMRegistry {
	this := NPMRegistry{}
	return &this
}

// NewNPMRegistryWithDefaults instantiates a new NPMRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNPMRegistryWithDefaults() *NPMRegistry {
	this := NPMRegistry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NPMRegistry) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NPMRegistry) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NPMRegistry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NPMRegistry) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NPMRegistry) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NPMRegistry) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NPMRegistry) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NPMRegistry) SetUrl(v string) {
	o.Url = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *NPMRegistry) GetAuth() map[string]interface{} {
	if o == nil || IsNil(o.Auth) {
		var ret map[string]interface{}
		return ret
	}
	return o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NPMRegistry) GetAuthOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Auth) {
		return map[string]interface{}{}, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *NPMRegistry) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given map[string]interface{} and assigns it to the Auth field.
func (o *NPMRegistry) SetAuth(v map[string]interface{}) {
	o.Auth = v
}

// GetCa returns the Ca field value if set, zero value otherwise.
func (o *NPMRegistry) GetCa() GetOrganizationBowerSettings200ResponseRegistriesInnerUrl {
	if o == nil || IsNil(o.Ca) {
		var ret GetOrganizationBowerSettings200ResponseRegistriesInnerUrl
		return ret
	}
	return *o.Ca
}

// GetCaOk returns a tuple with the Ca field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NPMRegistry) GetCaOk() (*GetOrganizationBowerSettings200ResponseRegistriesInnerUrl, bool) {
	if o == nil || IsNil(o.Ca) {
		return nil, false
	}
	return o.Ca, true
}

// HasCa returns a boolean if a field has been set.
func (o *NPMRegistry) HasCa() bool {
	if o != nil && !IsNil(o.Ca) {
		return true
	}

	return false
}

// SetCa gets a reference to the given GetOrganizationBowerSettings200ResponseRegistriesInnerUrl and assigns it to the Ca field.
func (o *NPMRegistry) SetCa(v GetOrganizationBowerSettings200ResponseRegistriesInnerUrl) {
	o.Ca = &v
}

// GetHasCa returns the HasCa field value if set, zero value otherwise.
func (o *NPMRegistry) GetHasCa() bool {
	if o == nil || IsNil(o.HasCa) {
		var ret bool
		return ret
	}
	return *o.HasCa
}

// GetHasCaOk returns a tuple with the HasCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NPMRegistry) GetHasCaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCa) {
		return nil, false
	}
	return o.HasCa, true
}

// HasHasCa returns a boolean if a field has been set.
func (o *NPMRegistry) HasHasCa() bool {
	if o != nil && !IsNil(o.HasCa) {
		return true
	}

	return false
}

// SetHasCa gets a reference to the given bool and assigns it to the HasCa field.
func (o *NPMRegistry) SetHasCa(v bool) {
	o.HasCa = &v
}

func (o NPMRegistry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NPMRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Ca) {
		toSerialize["ca"] = o.Ca
	}
	if !IsNil(o.HasCa) {
		toSerialize["hasCa"] = o.HasCa
	}
	return toSerialize, nil
}

type NullableNPMRegistry struct {
	value *NPMRegistry
	isSet bool
}

func (v NullableNPMRegistry) Get() *NPMRegistry {
	return v.value
}

func (v *NullableNPMRegistry) Set(val *NPMRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableNPMRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableNPMRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNPMRegistry(val *NPMRegistry) *NullableNPMRegistry {
	return &NullableNPMRegistry{value: val, isSet: true}
}

func (v NullableNPMRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNPMRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


