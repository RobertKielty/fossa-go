/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the UpdateProjectLabelsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectLabelsRequest{}

// UpdateProjectLabelsRequest struct for UpdateProjectLabelsRequest
type UpdateProjectLabelsRequest struct {
	// List of Label IDs that should be associated with this Project
	Labels []int32 `json:"labels,omitempty"`
}

// NewUpdateProjectLabelsRequest instantiates a new UpdateProjectLabelsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectLabelsRequest() *UpdateProjectLabelsRequest {
	this := UpdateProjectLabelsRequest{}
	return &this
}

// NewUpdateProjectLabelsRequestWithDefaults instantiates a new UpdateProjectLabelsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectLabelsRequestWithDefaults() *UpdateProjectLabelsRequest {
	this := UpdateProjectLabelsRequest{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateProjectLabelsRequest) GetLabels() []int32 {
	if o == nil || IsNil(o.Labels) {
		var ret []int32
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectLabelsRequest) GetLabelsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateProjectLabelsRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []int32 and assigns it to the Labels field.
func (o *UpdateProjectLabelsRequest) SetLabels(v []int32) {
	o.Labels = v
}

func (o UpdateProjectLabelsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectLabelsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableUpdateProjectLabelsRequest struct {
	value *UpdateProjectLabelsRequest
	isSet bool
}

func (v NullableUpdateProjectLabelsRequest) Get() *UpdateProjectLabelsRequest {
	return v.value
}

func (v *NullableUpdateProjectLabelsRequest) Set(val *UpdateProjectLabelsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectLabelsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectLabelsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectLabelsRequest(val *UpdateProjectLabelsRequest) *NullableUpdateProjectLabelsRequest {
	return &NullableUpdateProjectLabelsRequest{value: val, isSet: true}
}

func (v NullableUpdateProjectLabelsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectLabelsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


