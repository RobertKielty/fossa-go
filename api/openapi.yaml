openapi: 3.1.0
info:
  contact:
    email: support@fossa.com
    name: FOSSA
    url: fossa.com
  description: OpenAPI Specification for public FOSSA APIs
  title: FOSSA API
  version: 4.28.61
externalDocs:
  description: product documentation and product guides
  url: https://docs.fossa.com
servers:
- description: FOSSA's production api server (for cloud only)
  url: https://app.fossa.com/api
tags:
- description: Issues with a given project or package
  name: Issues
- description: "Saved issue filters, including sort and group options"
  name: Issue Filters
- description: APIs supporting the Issue Overview dashboard
  name: Issue Overview
- description: Projects within your organization
  name: Projects
- description: Revisions in a project
  name: Revisions
- description: Dependencies of a given project or release group
  name: Dependencies
- description: Related to the FOSSA CLI tool
  name: CLI
- description: Related to labels for your organization's projects
  name: Organization Labels
- description: Related to project-level labels
  name: Project Labels
- description: Related to package-level labels
  name: Package Labels
- description: APIs for viewing details about the packages used across your organization
  name: Package Observability
- description: Release groups within your organization
  name: Release Groups
- description: APIs related to Software Bill of Materials (SBOM) functionality
  name: SBOM
- description: APIs supporting vulnerabilities
  name: Vulnerabilities
- description: APIs supporting organization settings
  name: Organization Settings
- description: APIs supporting Jira integration configuration
  name: Jira Integration Settings
- description: APIs supporting builds for a given project or revision
  name: Builds
- description: APIs to manage your organization's Portal
  name: Portal
- description: APIs to manage audit logs
  name: Audit Logs
- description: APIs for managing your organization
  name: Organization Limits
- description: APIs to upload components
  name: Components
- description: APIs to manage Users
  name: Users
- description: APIs to manage Teams
  name: Teams
- description: APIs to manage Roles
  name: Roles
- description: Manage GitHub App integration
  name: GitHub App
paths:
  /services/github-app/installation-url:
    get:
      description: Redirects to the GitHub App installation page.
      operationId: getGitHubAppInstallationUrl
      responses:
        "302":
          description: Redirects to the GitHub App installation page.
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - GitHub App
      x-internal: true
  /v2/issues/categories:
    get:
      description: Get the number of active issues by category
      operationId: getIssuesByCategory
      parameters:
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssuesByCategory_200_response"
          description: Number of active issues for each issue category
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    licensing: 0
                    quality: 0
                    vulnerability: 0
              schema:
                $ref: "#/components/schemas/getIssuesByCategory_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/types:
    get:
      description: Get the number of active issues by type
      operationId: getIssuesByType
      parameters:
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssuesByType_200_response"
          description: Number of active issues for each issue type
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    policy_conflict: 0
                    policy_flag: 0
                    unlicensed_dependency: 0
                    outdated_dependency: 0
                    vulnerability: 0
              schema:
                $ref: "#/components/schemas/getIssuesByType_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/statuses:
    get:
      description: "Get a count of issues by status, matching the provided filters"
      operationId: getIssueStatuses
      parameters:
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      - description: The revision ID to compare issues with. Only availabe for Project
          Scope.
        explode: true
        in: query
        name: "scope[compareTo][revision]"
        required: false
        schema:
          type: string
        style: form
      - description: |
          The status of issues to fetch when comparing issues. - New issues are present in the current revision but not in the comparison revision. - Remediated issues are present in the comparison revision but not in the current revision. - Unchanged issues are present in both revisions. Only available for Project Scope.
        explode: true
        in: query
        name: "scope[compareTo][changeStatus]"
        required: false
        schema:
          enum:
          - new
          - remediated
          - unchanged
          type: string
        style: form
      - description: Filter by specific issue IDs
        explode: true
        in: query
        name: "ids[]"
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter by specific revision IDs
        explode: true
        in: query
        name: "filter[revisionIds][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by package name or CVE (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[search]"
        required: false
        schema:
          type: string
        style: form
      - description: Filter by issue depth
        explode: true
        in: query
        name: "filter[depths][]"
        required: false
        schema:
          items:
            enum:
            - direct
            - deep
            type: string
          type: array
        style: form
      - description: Filter by ticketed status.  Only available to premium users.
        explode: true
        in: query
        name: "filter[ticketed][]"
        required: false
        schema:
          items:
            enum:
            - jira
            - custom
            - has_ticket
            - no_ticket
            type: string
          type: array
        style: form
      - description: Filter by container layer
        explode: true
        in: query
        name: "filter[containerLayers][]"
        required: false
        schema:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        style: form
      - description: |
          Filter by licensing issue type (when category is "licensing") or quality issue type (when category is "quality")
        explode: true
        in: query
        name: "filter[type][]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueStatuses_filter_type____parameter"
        style: form
      - description: Filter by specific package managers
        explode: true
        in: query
        name: "filter[packageManagers][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific project labels
        explode: true
        in: query
        name: "filter[projectLabels][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by license identification (when category is "licensing")
        explode: true
        in: query
        name: "filter[identification][]"
        required: false
        schema:
          items:
            enum:
            - declared
            - discovered
            type: string
          type: array
        style: form
      - description: Filter by vuln severity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[severity][]"
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Include only issues found on after a given date.  Only available
          to premium users
        explode: true
        in: query
        name: "filter[foundAfter]"
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Filter by vuln fixability (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[hasFix][]"
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter by vuln upgrade distance (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[upgradeDistance][]"
        required: false
        schema:
          items:
            enum:
            - none
            - major
            - minor
            - patch
            - unknown
            type: string
          type: array
        style: form
      - description: Filter by vuln exploit maturity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[exploitMaturity][]"
        required: false
        schema:
          items:
            enum:
            - has_known_exploit
            - no_known_exploit
            type: string
          type: array
        style: form
      - description: |
          Filter by vuln ignore reason (when category is "vulnerability") This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports
        explode: true
        in: query
        name: "filter[ignoreReason][]"
        required: false
        schema:
          items:
            description: |
              Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
            enum:
            - Fixed
            - Under_investigation
            - Vulnerable_code_not_present
            - Vulnerable_code_cannot_be_controlled
            - Component_not_present
            - Vulnerable_code_not_in_execute_path
            - Inline_mitigations_already_exist
            - incorrect_data_found
            - other
            type: string
          type: array
        style: form
      - description: Filter by issues affected by a set of license ID's (when category
          is "licensing")
        explode: true
        in: query
        name: "filter[licenses][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssueStatuses_200_response"
          description: Number of matching issues and revisions
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    issues:
                      active: 0
                      ignored: 0
                    revision:
                      active: 0
                      ignored: 0
              schema:
                $ref: "#/components/schemas/getIssueStatuses_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/compare/summaries:
    get:
      description: Retrieve the counts for the different change statuses when in Issue
        Comparison mode. Only available for Project Scope.
      operationId: getIssueDiffComparisonSummaries
      parameters:
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Scope of issues to view
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - project
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The revision ID to compare issues with. Only availabe for Project
          Scope.
        explode: true
        in: query
        name: "scope[compareTo][revision]"
        required: false
        schema:
          type: string
        style: form
      - description: |
          The status of issues to fetch when comparing issues. - New issues are present in the current revision but not in the comparison revision. - Remediated issues are present in the comparison revision but not in the current revision. - Unchanged issues are present in both revisions. Only available for Project Scope.
        explode: true
        in: query
        name: "scope[compareTo][changeStatus]"
        required: false
        schema:
          enum:
          - new
          - remediated
          - unchanged
          type: string
        style: form
      - description: Filter by specific issue IDs
        explode: true
        in: query
        name: "ids[]"
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter by specific revision IDs
        explode: true
        in: query
        name: "filter[revisionIds][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by package name or CVE (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[search]"
        required: false
        schema:
          type: string
        style: form
      - description: Filter by issue depth
        explode: true
        in: query
        name: "filter[depths][]"
        required: false
        schema:
          items:
            enum:
            - direct
            - deep
            type: string
          type: array
        style: form
      - description: Filter by ticketed status.  Only available to premium users.
        explode: true
        in: query
        name: "filter[ticketed][]"
        required: false
        schema:
          items:
            enum:
            - jira
            - custom
            - has_ticket
            - no_ticket
            type: string
          type: array
        style: form
      - description: Filter by container layer
        explode: true
        in: query
        name: "filter[containerLayers][]"
        required: false
        schema:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        style: form
      - description: |
          Filter by licensing issue type (when category is "licensing") or quality issue type (when category is "quality")
        explode: true
        in: query
        name: "filter[type][]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueStatuses_filter_type____parameter"
        style: form
      - description: Filter by specific package managers
        explode: true
        in: query
        name: "filter[packageManagers][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific CWE identifiers
        explode: true
        in: query
        name: "filter[cwes][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific project labels
        explode: true
        in: query
        name: "filter[projectLabels][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by license identification (when category is "licensing")
        explode: true
        in: query
        name: "filter[identification][]"
        required: false
        schema:
          items:
            enum:
            - declared
            - discovered
            type: string
          type: array
        style: form
      - description: Filter by vuln severity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[severity][]"
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Include only issues found on after a given date.  Only available
          to premium users
        explode: true
        in: query
        name: "filter[foundAfter]"
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Filter by vuln fixability (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[hasFix][]"
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter by vuln upgrade distance (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[upgradeDistance][]"
        required: false
        schema:
          items:
            enum:
            - none
            - major
            - minor
            - patch
            - unknown
            type: string
          type: array
        style: form
      - description: Filter by vuln exploit maturity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[exploitMaturity][]"
        required: false
        schema:
          items:
            enum:
            - has_known_exploit
            - no_known_exploit
            type: string
          type: array
        style: form
      - description: |
          Filter by vuln ignore reason (when category is "vulnerability") This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports
        explode: true
        in: query
        name: "filter[ignoreReason][]"
        required: false
        schema:
          items:
            description: |
              Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
            enum:
            - Fixed
            - Under_investigation
            - Vulnerable_code_not_present
            - Vulnerable_code_cannot_be_controlled
            - Component_not_present
            - Vulnerable_code_not_in_execute_path
            - Inline_mitigations_already_exist
            - incorrect_data_found
            - other
            type: string
          type: array
        style: form
      - description: Filter by epss 'score' or 'percentile'. All fields are required.  Only
          available to premium users.
        examples:
          filterByScore:
            summary: Filter to issues with a score between 0.1 and 0.25 (inclusive)
            value:
              type: score
              min: 0.01
              max: 0.25
          filterByPercentile:
            summary: Filter to issues above the 85th percentile (inclusive)
            value:
              type: percentile
              min: 0.85
              max: 1
        explode: true
        in: query
        name: "filter[epss]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueDiffComparisonSummaries_filter_epss__parameter"
        style: deepObject
      - description: Filter issues by their binary dependency confidence level(s)
        explode: true
        in: query
        name: "filter[confidence][]"
        required: false
        schema:
          items:
            enum:
            - High
            - Medium
            - Low
            - Unknown
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                summaries:
                  value:
                    issues:
                      new: 10
                      remediated: 5
                      unchanged: 3
                    revisions:
                      new: 10
                      remediated: 5
                      unchanged: 3
              schema:
                $ref: "#/components/schemas/getIssueDiffComparisonSummaries_200_response"
          description: "Vulnerability, licensing, or quality issues response"
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "406":
          content:
            application/json:
              examples:
                Invalid Accept:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2015
                    message: "Invalid accept:"
                    name: NotAcceptableError
                    httpStatusCode: 406
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Acceptable
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/license-list:
    get:
      description: "Get a sorted list of license ID's, matching the provided filters"
      operationId: getLicenseList
      parameters:
      - description: Issue category (must be licensing)
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getLicenseList_200_response"
          description: List of licenses
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    data: []
              schema:
                $ref: "#/components/schemas/getLicenseList_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/package-managers:
    get:
      description: Get the set of unique package managers associated with current
        issues
      operationId: getIssuePackageManagers
      parameters:
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Issue status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - ignored
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssuePackageManagers_200_response"
          description: Unique package managers associated with current issues
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    packageManagers: []
              schema:
                $ref: "#/components/schemas/getIssuePackageManagers_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/cwes:
    get:
      description: Get the set of unique CWEs associated with current issues
      operationId: getIssueCWEs
      parameters:
      - description: Issue status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - ignored
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      - description: The revision ID to compare issues with. Only availabe for Project
          Scope.
        explode: true
        in: query
        name: "scope[compareTo][revision]"
        required: false
        schema:
          type: string
        style: form
      - description: |
          The status of issues to fetch when comparing issues. - New issues are present in the current revision but not in the comparison revision. - Remediated issues are present in the comparison revision but not in the current revision. - Unchanged issues are present in both revisions. Only available for Project Scope.
        explode: true
        in: query
        name: "scope[compareTo][changeStatus]"
        required: false
        schema:
          enum:
          - new
          - remediated
          - unchanged
          type: string
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: "teamId[]"
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssueCWEs_200_response"
          description: Unique CWEs associated with current issues
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    packageManagers: []
              schema:
                $ref: "#/components/schemas/getIssuePackageManagers_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/{issueId}:
    get:
      description: Retrieve a single issue
      operationId: getIssue
      parameters:
      - description: Issue ID
        explode: false
        in: path
        name: issueId
        required: true
        schema:
          type: integer
        style: simple
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                vulnIssue:
                  value:
                    id: 27
                    createdAt: 2023-01-19T22:38:02.961Z
                    source:
                      id: npm+lodash$4.2.0
                      name: lodash
                      url: https://www.npmjs.com/package/lodash
                      version: 4.2.0
                      packageManager: npm
                      isCorrected: true
                    depths:
                      direct: 3
                      deep: 0
                    statuses:
                      active: 2
                      ignored: 1
                    projects:
                    - id: custom+1/TEST
                      status: active
                      depth: 1
                      title: TEST
                      scannedAt: 2023-07-12T01:22:12.669+00:00
                      analyzedAt: 2023-07-12T01:12:36.003+00:00
                      url: http://example.com/projectlink
                      firstFoundAt: 2023-07-12T01:12:36.003+00:00
                    type: vulnerability
                    vulnId: CVE-2018-16487_npm+lodash
                    title: General Vulnerability
                    cve: CVE-2018-16487
                    cvss: 9.8
                    cvssVector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                    severity: critical
                    details: "A prototype pollution vulnerability was found in lodash\
                      \ <4.17.11 where the functions merge, mergeWith, and defaultsDeep\
                      \ can be tricked into adding or modifying properties of Object.prototype."
                    remediation:
                      partialFix: 1.15.4
                      completeFix: 1.16.0
                      partialFixDistance: PATCH
                      completeFixDistance: MAJOR
                    metrics:
                    - name: Attack Vector
                      value: Network
                    cveStatus: COMPLETED
                    cwes:
                    - CWE-254
                    published: 2018-09-04T00:00:00.000Z
                    affectedVersionRanges:
                    - <4.17.11
                    patchedVersionRanges:
                    - 4.17.11
                    references:
                    - https://nvd.nist.gov/vuln/detail/CVE-2018-16487
                    epss:
                      score: 0.1234
                      percentile: 0.42
                    exploitability: MATURE
                vulnIssueWithUnableToCalculateVersions:
                  value:
                    id: 27
                    createdAt: 2023-01-19T22:38:02.961Z
                    source:
                      id: npm+lodash$4.2.0
                      name: lodash
                      url: https://www.npmjs.com/package/lodash
                      version: 4.2.0
                      packageManager: npm
                      isCorrected: false
                    depths:
                      direct: 3
                      deep: 0
                    containerLayers:
                      base: 1
                      other: 1
                    statuses:
                      active: 2
                      ignored: 1
                    projects:
                    - id: custom+1/TEST
                      status: active
                      depth: 1
                      title: TEST
                      scannedAt: 2023-07-12T01:22:12.669+00:00
                      analyzedAt: 2023-07-12T01:12:36.003+00:00
                      url: http://example.com/projectlink
                      firstFoundAt: 2023-07-12T01:12:36.003+00:00
                    type: vulnerability
                    vulnId: CVE-2018-16487_npm+lodash
                    title: General Vulnerability
                    cve: CVE-2018-16487
                    cvss: 9.8
                    cvssVector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                    severity: critical
                    details: "A prototype pollution vulnerability was found in lodash\
                      \ <4.17.11 where the functions merge, mergeWith, and defaultsDeep\
                      \ can be tricked into adding or modifying properties of Object.prototype."
                    remediation:
                      partialFix: UNABLE_TO_CALCULATE
                      completeFix: UNABLE_TO_CALCULATE
                    metrics:
                    - name: Attack Vector
                      value: Network
                    cveStatus: COMPLETED
                    cwes:
                    - CWE-254
                    published: 2018-09-04T00:00:00.000Z
                    affectedVersionRanges:
                    - <4.17.11
                    patchedVersionRanges:
                    - 4.17.11
                    references:
                    - https://nvd.nist.gov/vuln/detail/CVE-2018-16487
                    epss:
                      score: 0.1234
                      percentile: 0.42
                    exploitability: MATURE
                vulnIssueWithNoSafeVersions:
                  value:
                    id: 27
                    createdAt: 2023-01-19T22:38:02.961Z
                    source:
                      id: npm+lodash$4.2.0
                      name: lodash
                      url: https://www.npmjs.com/package/lodash
                      version: 4.2.0
                      packageManager: npm
                      isCorrected: false
                    depths:
                      direct: 3
                      deep: 0
                    containerLayers:
                      base: 1
                      other: 1
                    statuses:
                      active: 2
                      ignored: 1
                    projects:
                    - id: custom+1/TEST
                      status: active
                      depth: 1
                      title: TEST
                      scannedAt: 2023-07-12T01:22:12.669+00:00
                      analyzedAt: 2023-07-12T01:12:36.003+00:00
                      url: http://example.com/projectlink
                      firstFoundAt: 2023-07-12T01:12:36.003+00:00
                    type: vulnerability
                    vulnId: CVE-2018-16487_npm+lodash
                    title: General Vulnerability
                    cve: CVE-2018-16487
                    cvss: 9.8
                    cvssVector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                    severity: critical
                    details: "A prototype pollution vulnerability was found in lodash\
                      \ <4.17.11 where the functions merge, mergeWith, and defaultsDeep\
                      \ can be tricked into adding or modifying properties of Object.prototype."
                    remediation:
                      partialFix: NO_SAFE_VERSION
                      completeFix: NO_SAFE_VERSION
                    metrics:
                    - name: Attack Vector
                      value: Network
                    cveStatus: COMPLETED
                    cwes:
                    - CWE-254
                    published: 2018-09-04T00:00:00.000Z
                    affectedVersionRanges:
                    - <4.17.11
                    patchedVersionRanges:
                    - 4.17.11
                    references:
                    - https://nvd.nist.gov/vuln/detail/CVE-2018-16487
                    epss:
                      score: 0.1234
                      percentile: 0.42
                    exploitability: MATURE
                licensingIssue:
                  value:
                    id: 144
                    createdAt: 2023-07-13T19:22:16.546Z
                    source:
                      id: npm+lodash$4.2.0
                      name: lodash
                      url: https://www.npmjs.com/package/lodash
                      version: 4.2.0
                      packageManager: npm
                      isCorrected: true
                    depths:
                      direct: 3
                      deep: 0
                    containerLayers:
                      base: 1
                      other: 1
                    statuses:
                      active: 2
                      ignored: 1
                    projects:
                    - id: custom+1/TEST
                      status: active
                      depth: 1
                      title: TEST
                      scannedAt: 2023-07-12T01:22:12.669+00:00
                      analyzedAt: 2023-07-12T01:12:36.003+00:00
                      url: http://example.com/projectlink
                      firstFoundAt: 2023-07-12T01:12:36.003+00:00
                    type: policy_flag
                    license: unknown
                qualityIssue:
                  value:
                    id: 196
                    createdAt: 2023-07-13T19:22:16.546Z
                    source:
                      id: npm+lodash$4.2.0
                      name: lodash
                      url: https://www.npmjs.com/package/lodash
                      version: 4.2.0
                      packageManager: npm
                    depths:
                      direct: 3
                      deep: 0
                    containerLayers:
                      base: 1
                      other: 1
                    statuses:
                      active: 2
                      ignored: 1
                    projects:
                    - id: custom+1/TEST
                      status: active
                      depth: 1
                      title: TEST
                      scannedAt: 2023-07-12T01:22:12.669+00:00
                      analyzedAt: 2023-07-12T01:12:36.003+00:00
                      url: http://example.com/projectlink
                      firstFoundAt: 2023-07-12T01:12:36.003+00:00
                    type: blacklisted_dependency
                    qualityRule:
                      ruleId: 6538966
                      type: blacklisted_dependency
                      notes: Major difference of 3 or more
                      dependencyOutdatedType: FALLBACK
                      dependencyOutdatedVersionPart: PATCH
                      dependencyOutdatedVersionDiff: "20"
                      dependencyFilterName: react
                      dependencyFilterVersionType: ALL
                      dependencyFilterStartVersion: 4.17.12
                      dependencyFilterEndVersion: 4.0.0
                      enabled: true
                      packageProjectLocator: npm+react
                      createdAt: 2023-05-31T18:19:08.967Z
                      updatedAt: 2023-05-31T18:19:08.967Z
                    latestVersion: npm+lodash$4.17.21
              schema:
                $ref: "#/components/schemas/getIssue_200_response"
          description: "Vulnerability, licensing, or quality issue response"
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                No Issue Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Issue not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/{issueId}/disputes:
    post:
      description: Creates an issue dispute. For now it only supports licensing issues.
      operationId: createIssueDispute
      parameters:
      - description: ID of the issue that is being disputed.
        explode: false
        in: path
        name: issueId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createIssueDispute_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createIssueDispute_200_response"
          description: The created dispute.
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/{issueId}/affected-projects:
    get:
      description: Retrieves a list of affected projects for a given issue.
      operationId: getIssueAffectedProjects
      parameters:
      - description: Issue ID
        explode: false
        in: path
        name: issueId
        required: true
        schema:
          type: integer
        style: simple
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                affectedProject:
                  value:
                  - id: custom+1/TEST
                    revisionId: custom+1/TEST$123
                    title: TEST
                    status: active
                    branch: master
                    jiraTicketId: TEST-123
                    jiraTicketURL: https://test.atlassian.net/browse/TEST-123
                    type: jira
              schema:
                items:
                  $ref: "#/components/schemas/getIssueAffectedProjects_200_response_inner"
                type: array
          description: Affected project list
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues:
    get:
      description: Retrieve multiple issues
      operationId: getIssues
      parameters:
      - description: Retrieves issues as a CSV
        explode: true
        in: query
        name: csv
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Include origin paths for the direct dependency responsible for
          including the revision(s) affected by this issue
        explode: true
        in: query
        name: includeDirectDependencyOriginPaths
        required: false
        schema:
          type: boolean
        style: form
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Issue status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - ignored
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      - description: The revision ID to compare issues with. Only availabe for Project
          Scope.
        explode: true
        in: query
        name: "scope[compareTo][revision]"
        required: false
        schema:
          type: string
        style: form
      - description: |
          The status of issues to fetch when comparing issues. - New issues are present in the current revision but not in the comparison revision. - Remediated issues are present in the comparison revision but not in the current revision. - Unchanged issues are present in both revisions. Only available for Project Scope.
        explode: true
        in: query
        name: "scope[compareTo][changeStatus]"
        required: false
        schema:
          enum:
          - new
          - remediated
          - unchanged
          type: string
        style: form
      - description: Filter by specific issue IDs
        explode: true
        in: query
        name: "ids[]"
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter by specific revision IDs
        explode: true
        in: query
        name: "filter[revisionIds][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by package name or CVE (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[search]"
        required: false
        schema:
          type: string
        style: form
      - description: Filter by issue depth
        explode: true
        in: query
        name: "filter[depths][]"
        required: false
        schema:
          items:
            enum:
            - direct
            - deep
            type: string
          type: array
        style: form
      - description: Filter by ticketed status.  Only available to premium users.
        explode: true
        in: query
        name: "filter[ticketed][]"
        required: false
        schema:
          items:
            enum:
            - jira
            - custom
            - has_ticket
            - no_ticket
            type: string
          type: array
        style: form
      - description: Filter by container layer
        explode: true
        in: query
        name: "filter[containerLayers][]"
        required: false
        schema:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        style: form
      - description: |
          Filter by licensing issue type (when category is "licensing") or quality issue type (when category is "quality")
        explode: true
        in: query
        name: "filter[type][]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueStatuses_filter_type____parameter"
        style: form
      - description: Filter by specific package managers
        explode: true
        in: query
        name: "filter[packageManagers][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific CWE identifiers
        explode: true
        in: query
        name: "filter[cwes][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific project labels
        explode: true
        in: query
        name: "filter[projectLabels][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by license identification (when category is "licensing")
        explode: true
        in: query
        name: "filter[identification][]"
        required: false
        schema:
          items:
            enum:
            - declared
            - discovered
            type: string
          type: array
        style: form
      - description: Filter by vuln severity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[severity][]"
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Include only issues found on after a given date.  Only available
          to premium users
        explode: true
        in: query
        name: "filter[foundAfter]"
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Filter by vuln fixability (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[hasFix][]"
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter by vuln upgrade distance (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[upgradeDistance][]"
        required: false
        schema:
          items:
            enum:
            - none
            - major
            - minor
            - patch
            - unknown
            type: string
          type: array
        style: form
      - description: Filter by vuln exploit maturity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[exploitMaturity][]"
        required: false
        schema:
          items:
            enum:
            - has_known_exploit
            - no_known_exploit
            type: string
          type: array
        style: form
      - description: |
          Filter by vuln ignore reason (when category is "vulnerability") This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports
        explode: true
        in: query
        name: "filter[ignoreReason][]"
        required: false
        schema:
          items:
            description: |
              Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
            enum:
            - Fixed
            - Under_investigation
            - Vulnerable_code_not_present
            - Vulnerable_code_cannot_be_controlled
            - Component_not_present
            - Vulnerable_code_not_in_execute_path
            - Inline_mitigations_already_exist
            - incorrect_data_found
            - other
            type: string
          type: array
        style: form
      - description: Filter by epss 'score' or 'percentile'. All fields are required.  Only
          available to premium users.
        examples:
          filterByScore:
            summary: Filter to issues with a score between 0.1 and 0.25 (inclusive)
            value:
              type: score
              min: 0.01
              max: 0.25
          filterByPercentile:
            summary: Filter to issues above the 85th percentile (inclusive)
            value:
              type: percentile
              min: 0.85
              max: 1
        explode: true
        in: query
        name: "filter[epss]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueDiffComparisonSummaries_filter_epss__parameter"
        style: deepObject
      - description: Filter issues by their binary dependency confidence level(s)
        explode: true
        in: query
        name: "filter[confidence][]"
        required: false
        schema:
          items:
            enum:
            - High
            - Medium
            - Low
            - Unknown
            type: string
          type: array
        style: form
      - description: |
          Sort by package name, when the issue was created, or severity (when category is "vulnerability")
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - package_asc
          - package_desc
          - created_at_asc
          - created_at_desc
          - severity_asc
          - severity_desc
          - epss_asc
          - epss_desc
          type: string
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 20
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                vulnIssues:
                  value:
                    issues:
                    - id: 27
                      createdAt: 2023-01-19T22:38:02.961Z
                      source:
                        id: npm+lodash$4.2.0
                        name: lodash
                        url: https://www.npmjs.com/package/lodash
                        version: 4.2.0
                        packageManager: npm
                        isCorrected: false
                      depths:
                        direct: 3
                        deep: 0
                      containerLayers:
                        base: 1
                        other: 1
                      statuses:
                        active: 2
                        ignored: 1
                      projects:
                      - id: custom+1/TEST
                        status: active
                        depth: 1
                        title: TEST
                        scannedAt: 2023-07-12T01:22:12.669+00:00
                        analyzedAt: 2023-07-12T01:12:36.003+00:00
                        url: http://example.com/projectlink
                        firstFoundAt: 2023-07-12T01:12:36.003+00:00
                      type: vulnerability
                      vulnId: CVE-2018-16487_npm+lodash
                      title: General Vulnerability
                      cve: CVE-2018-16487
                      cvss: 9.8
                      cvssVector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                      severity: critical
                      details: "A prototype pollution vulnerability was found in lodash\
                        \ <4.17.11 where the functions merge, mergeWith, and defaultsDeep\
                        \ can be tricked into adding or modifying properties of Object.prototype."
                      remediation:
                        partialFix: 1.15.4
                        completeFix: 1.16.0
                        partialFixDistance: PATCH
                        completeFixDistance: MAJOR
                      metrics:
                      - name: Attack Vector
                        value: Network
                      cveStatus: COMPLETED
                      cwes:
                      - CWE-254
                      published: 2018-09-04T00:00:00.000Z
                      affectedVersionRanges:
                      - <4.17.11
                      patchedVersionRanges:
                      - 4.17.11
                      references:
                      - https://nvd.nist.gov/vuln/detail/CVE-2018-16487
                      epss:
                        score: 0.1234
                        percentile: 0.42
                      exploitability: MATURE
                vulnIssuesWithUnableToCalculateVersions:
                  value:
                    issues:
                    - id: 27
                      createdAt: 2023-01-19T22:38:02.961Z
                      source:
                        id: npm+lodash$4.2.0
                        name: lodash
                        url: https://www.npmjs.com/package/lodash
                        version: 4.2.0
                        packageManager: npm
                        isCorrected: false
                      depths:
                        direct: 3
                        deep: 0
                      containerLayers:
                        base: 1
                        other: 1
                      statuses:
                        active: 2
                        ignored: 1
                      projects:
                      - id: custom+1/TEST
                        status: active
                        depth: 1
                        title: TEST
                        scannedAt: 2023-07-12T01:22:12.669+00:00
                        analyzedAt: 2023-07-12T01:12:36.003+00:00
                        url: http://example.com/projectlink
                        firstFoundAt: 2023-07-12T01:12:36.003+00:00
                      type: vulnerability
                      vulnId: CVE-2018-16487_npm+lodash
                      title: General Vulnerability
                      cve: CVE-2018-16487
                      cvss: 9.8
                      cvssVector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                      severity: critical
                      details: "A prototype pollution vulnerability was found in lodash\
                        \ <4.17.11 where the functions merge, mergeWith, and defaultsDeep\
                        \ can be tricked into adding or modifying properties of Object.prototype."
                      remediation:
                        partialFix: UNABLE_TO_CALCULATE
                        completeFix: UNABLE_TO_CALCULATE
                      metrics:
                      - name: Attack Vector
                        value: Network
                      cveStatus: COMPLETED
                      cwes:
                      - CWE-254
                      published: 2018-09-04T00:00:00.000Z
                      affectedVersionRanges:
                      - <4.17.11
                      patchedVersionRanges:
                      - 4.17.11
                      references:
                      - https://nvd.nist.gov/vuln/detail/CVE-2018-16487
                      epss:
                        score: 0.1234
                        percentile: 0.42
                      exploitability: MATURE
                vulnIssuesWithNoSafeVersions:
                  value:
                    issues:
                    - id: 27
                      createdAt: 2023-01-19T22:38:02.961Z
                      source:
                        id: npm+lodash$4.2.0
                        name: lodash
                        url: https://www.npmjs.com/package/lodash
                        version: 4.2.0
                        packageManager: npm
                        isCorrected: false
                      depths:
                        direct: 3
                        deep: 0
                      containerLayers:
                        base: 1
                        other: 1
                      statuses:
                        active: 2
                        ignored: 1
                      projects:
                      - id: custom+1/TEST
                        status: active
                        depth: 1
                        title: TEST
                        scannedAt: 2023-07-12T01:22:12.669+00:00
                        analyzedAt: 2023-07-12T01:12:36.003+00:00
                        url: http://example.com/projectlink
                        firstFoundAt: 2023-07-12T01:12:36.003+00:00
                      type: vulnerability
                      vulnId: CVE-2018-16487_npm+lodash
                      title: General Vulnerability
                      cve: CVE-2018-16487
                      cvss: 9.8
                      cvssVector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
                      severity: critical
                      details: "A prototype pollution vulnerability was found in lodash\
                        \ <4.17.11 where the functions merge, mergeWith, and defaultsDeep\
                        \ can be tricked into adding or modifying properties of Object.prototype."
                      remediation:
                        partialFix: NO_SAFE_VERSION
                        completeFix: NO_SAFE_VERSION
                      metrics:
                      - name: Attack Vector
                        value: Network
                      cveStatus: COMPLETED
                      cwes:
                      - CWE-254
                      published: 2018-09-04T00:00:00.000Z
                      affectedVersionRanges:
                      - <4.17.11
                      patchedVersionRanges:
                      - 4.17.11
                      references:
                      - https://nvd.nist.gov/vuln/detail/CVE-2018-16487
                      epss:
                        score: 0.1234
                        percentile: 0.42
                      exploitability: MATURE
                licensingIssues:
                  value:
                    issues:
                    - id: 144
                      createdAt: 2023-07-13T19:22:16.546Z
                      source:
                        id: npm+lodash$4.2.0
                        name: lodash
                        url: https://www.npmjs.com/package/lodash
                        version: 4.2.0
                        packageManager: npm
                      depths:
                        direct: 3
                        deep: 0
                      containerLayers:
                        base: 1
                        other: 1
                      statuses:
                        active: 2
                        ignored: 1
                      projects:
                      - id: custom+1/TEST
                        status: active
                        depth: 1
                        title: TEST
                        scannedAt: 2023-07-12T01:22:12.669+00:00
                        analyzedAt: 2023-07-12T01:12:36.003+00:00
                        url: http://example.com/projectlink
                        firstFoundAt: 2023-07-12T01:12:36.003+00:00
                      type: policy_flag
                      license: unknown
                qualityIssues:
                  value:
                    issues:
                    - id: 196
                      createdAt: 2023-07-13T19:22:16.546Z
                      source:
                        id: npm+lodash$4.2.0
                        name: lodash
                        url: https://www.npmjs.com/package/lodash
                        version: 4.2.0
                        packageManager: npm
                      depths:
                        direct: 3
                        deep: 0
                      containerLayers:
                        base: 1
                        other: 1
                      statuses:
                        active: 2
                        ignored: 1
                      projects:
                      - id: custom+1/TEST
                        status: active
                        depth: 1
                        title: TEST
                        scannedAt: 2023-07-12T01:22:12.669+00:00
                        analyzedAt: 2023-07-12T01:12:36.003+00:00
                        url: http://example.com/projectlink
                        firstFoundAt: 2023-07-12T01:12:36.003+00:00
                      type: blacklisted_dependency
                      qualityRule:
                        ruleId: 6538966
                        type: blacklisted_dependency
                        notes: Major difference of 3 or more
                        dependencyOutdatedType: FALLBACK
                        dependencyOutdatedVersionPart: PATCH
                        dependencyOutdatedVersionDiff: "20"
                        dependencyFilterName: react
                        dependencyFilterVersionType: ALL
                        dependencyFilterStartVersion: 4.17.12
                        dependencyFilterEndVersion: 4.0.0
                        enabled: true
                        packageProjectLocator: npm+react
                        createdAt: 2023-05-31T18:19:08.967Z
                        updatedAt: 2023-05-31T18:19:08.967Z
              schema:
                $ref: "#/components/schemas/getIssues_200_response"
          description: "Vulnerability, licensing, or quality issues response"
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    issues: []
              schema:
                $ref: "#/components/schemas/getIssues_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "406":
          content:
            application/json:
              examples:
                Invalid Accept:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2015
                    message: "Invalid accept:"
                    name: NotAcceptableError
                    httpStatusCode: 406
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Acceptable
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
    put:
      description: Apply actions to the current selection of issues or set of applied
        filters.  Note that Issue Exports are only allowed for premium users.
      operationId: updateIssues
      parameters:
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Issue status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - ignored
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      - description: The revision ID to compare issues with. Only availabe for Project
          Scope.
        explode: true
        in: query
        name: "scope[compareTo][revision]"
        required: false
        schema:
          type: string
        style: form
      - description: |
          The status of issues to fetch when comparing issues. - New issues are present in the current revision but not in the comparison revision. - Remediated issues are present in the comparison revision but not in the current revision. - Unchanged issues are present in both revisions. Only available for Project Scope.
        explode: true
        in: query
        name: "scope[compareTo][changeStatus]"
        required: false
        schema:
          enum:
          - new
          - remediated
          - unchanged
          type: string
        style: form
      - description: Filter by specific issue IDs
        explode: true
        in: query
        name: "ids[]"
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter by specific revision IDs
        explode: true
        in: query
        name: "filter[revisionIds][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by package name or CVE (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[search]"
        required: false
        schema:
          type: string
        style: form
      - description: Filter by issue depth
        explode: true
        in: query
        name: "filter[depths][]"
        required: false
        schema:
          items:
            enum:
            - direct
            - deep
            type: string
          type: array
        style: form
      - description: Filter by ticketed status.  Only available to premium users.
        explode: true
        in: query
        name: "filter[ticketed][]"
        required: false
        schema:
          items:
            enum:
            - jira
            - custom
            - has_ticket
            - no_ticket
            type: string
          type: array
        style: form
      - description: Filter by container layer
        explode: true
        in: query
        name: "filter[containerLayers][]"
        required: false
        schema:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        style: form
      - description: |
          Filter by licensing issue type (when category is "licensing") or quality issue type (when category is "quality")
        explode: true
        in: query
        name: "filter[type][]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueStatuses_filter_type____parameter"
        style: form
      - description: Filter by specific package managers
        explode: true
        in: query
        name: "filter[packageManagers][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific project labels
        explode: true
        in: query
        name: "filter[projectLabels][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by license identification (when category is "licensing")
        explode: true
        in: query
        name: "filter[identification][]"
        required: false
        schema:
          items:
            enum:
            - declared
            - discovered
            type: string
          type: array
        style: form
      - description: Filter by vuln severity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[severity][]"
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Include only issues found on after a given date.  Only available
          to premium users
        explode: true
        in: query
        name: "filter[foundAfter]"
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Filter by vuln fixability (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[hasFix][]"
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter by vuln upgrade distance (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[upgradeDistance][]"
        required: false
        schema:
          items:
            enum:
            - none
            - major
            - minor
            - patch
            - unknown
            type: string
          type: array
        style: form
      - description: Filter by vuln exploit maturity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[exploitMaturity][]"
        required: false
        schema:
          items:
            enum:
            - has_known_exploit
            - no_known_exploit
            type: string
          type: array
        style: form
      - description: |
          Filter by vuln ignore reason (when category is "vulnerability") This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports
        explode: true
        in: query
        name: "filter[ignoreReason][]"
        required: false
        schema:
          items:
            description: |
              Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
            enum:
            - Fixed
            - Under_investigation
            - Vulnerable_code_not_present
            - Vulnerable_code_cannot_be_controlled
            - Component_not_present
            - Vulnerable_code_not_in_execute_path
            - Inline_mitigations_already_exist
            - incorrect_data_found
            - other
            type: string
          type: array
        style: form
      - description: Filter by issues affected by a set of license ID's (when category
          is "licensing")
        explode: true
        in: query
        name: "filter[licenses][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter issues by their binary dependency confidence level(s)
        explode: true
        in: query
        name: "filter[confidence][]"
        required: false
        schema:
          items:
            enum:
            - High
            - Medium
            - Low
            - Unknown
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateIssues_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateIssues_200_response"
          description: Count of affected issues
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
                User has no email:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "user: X does not have a valid email: Y"
                    name: BadRequestError
                    httpStatusCode: 400
                User doesn't have permission for this issue:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: attempting to modify projects without permission
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
                Organization is not premium:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User not permissioned for feature. Feature requires "premium"
                      subscription access level.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/revisions:
    get:
      description: Retrieve issue metadata that is grouped by revision
      operationId: getIssuesByRevision
      parameters:
      - description: Issue category
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Issue status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - active
          - ignored
          type: string
        style: form
      - description: Scope of issues to view / update
        explode: true
        in: query
        name: "scope[type]"
        required: true
        schema:
          enum:
          - global
          - project
          - releaseGroup
          type: string
        style: form
      - description: "Project or release group ID (required when scope[type] is \"\
          project\" or \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[id]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revision]"
        required: false
        schema:
          type: string
        style: form
      - description: "Revision scan ID (when scope[type] is \"project\")"
        explode: true
        in: query
        name: "scope[revisionScanId]"
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "Release group ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[release]"
        required: false
        schema:
          type: string
        style: form
      - description: "Release scan ID (when scope[type] is \"releaseGroup\")"
        explode: true
        in: query
        name: "scope[releaseScanId]"
        required: false
        schema:
          type: string
        style: form
      - description: The revision ID to compare issues with. Only availabe for Project
          Scope.
        explode: true
        in: query
        name: "scope[compareTo][revision]"
        required: false
        schema:
          type: string
        style: form
      - description: |
          The status of issues to fetch when comparing issues. - New issues are present in the current revision but not in the comparison revision. - Remediated issues are present in the comparison revision but not in the current revision. - Unchanged issues are present in both revisions. Only available for Project Scope.
        explode: true
        in: query
        name: "scope[compareTo][changeStatus]"
        required: false
        schema:
          enum:
          - new
          - remediated
          - unchanged
          type: string
        style: form
      - description: Filter by specific issue IDs
        explode: true
        in: query
        name: "ids[]"
        required: false
        schema:
          items:
            type: integer
          type: array
        style: form
      - description: Filter by specific revision IDs
        explode: true
        in: query
        name: "filter[revisionIds][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by package name or CVE (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[search]"
        required: false
        schema:
          type: string
        style: form
      - description: Filter by issue depth
        explode: true
        in: query
        name: "filter[depths][]"
        required: false
        schema:
          items:
            enum:
            - direct
            - deep
            type: string
          type: array
        style: form
      - description: Filter by ticketed status.  Only available to premium users.
        explode: true
        in: query
        name: "filter[ticketed][]"
        required: false
        schema:
          items:
            enum:
            - jira
            - custom
            - has_ticket
            - no_ticket
            type: string
          type: array
        style: form
      - description: Filter by container layer
        explode: true
        in: query
        name: "filter[containerLayers][]"
        required: false
        schema:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        style: form
      - description: |
          Filter by licensing issue type (when category is "licensing") or quality issue type (when category is "quality")
        explode: true
        in: query
        name: "filter[type][]"
        required: false
        schema:
          $ref: "#/components/schemas/getIssueStatuses_filter_type____parameter"
        style: form
      - description: Filter by specific package managers
        explode: true
        in: query
        name: "filter[packageManagers][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by specific project labels
        explode: true
        in: query
        name: "filter[projectLabels][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by license identification (when category is "licensing")
        explode: true
        in: query
        name: "filter[identification][]"
        required: false
        schema:
          items:
            enum:
            - declared
            - discovered
            type: string
          type: array
        style: form
      - description: Filter by vuln severity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[severity][]"
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Include only issues found on after a given date.  Only available
          to premium users
        explode: true
        in: query
        name: "filter[foundAfter]"
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Filter by vuln fixability (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[hasFix][]"
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter by vuln upgrade distance (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[upgradeDistance][]"
        required: false
        schema:
          items:
            enum:
            - none
            - major
            - minor
            - patch
            - unknown
            type: string
          type: array
        style: form
      - description: Filter by vuln exploit maturity (when category is "vulnerability")
        explode: true
        in: query
        name: "filter[exploitMaturity][]"
        required: false
        schema:
          items:
            enum:
            - has_known_exploit
            - no_known_exploit
            type: string
          type: array
        style: form
      - description: |
          Filter by vuln ignore reason (when category is "vulnerability") This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports
        explode: true
        in: query
        name: "filter[ignoreReason][]"
        required: false
        schema:
          items:
            description: |
              Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
            enum:
            - Fixed
            - Under_investigation
            - Vulnerable_code_not_present
            - Vulnerable_code_cannot_be_controlled
            - Component_not_present
            - Vulnerable_code_not_in_execute_path
            - Inline_mitigations_already_exist
            - incorrect_data_found
            - other
            type: string
          type: array
        style: form
      - description: Filter by issues affected by a set of license ID's (when category
          is "licensing")
        explode: true
        in: query
        name: "filter[licenses][]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: |
          Sort by package name, when the issue was created, or total number of issues
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - package_asc
          - package_desc
          - created_at_asc
          - created_at_desc
          - issue_count_asc
          - issue_count_desc
          - epss_asc
          - epss_desc
          type: string
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 20
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssuesByRevision_200_response"
          description: Issue revisions response
        "202":
          content:
            application/json:
              examples:
                analyzing:
                  value:
                    message: analysis in-progress
                    revisions: []
              schema:
                $ref: "#/components/schemas/getIssuesByRevision_202_response"
          description: Empty results with a message indicating the scoped project's
            build status
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No team Access:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: You are not permitted to view this team.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/csv/global:
    get:
      description: Download the global issues report (CSV) or submit for background
        processing
      operationId: getGlobalIssuesCSV
      parameters:
      - description: "When provided, we will submit the report for background processing\
          \ and deliver via email when ready. Otherwise the report will be streamed\
          \ via API"
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: default behavior for this endpoint is to stream a CSV
                  report as a zip file
                format: binary
                type: string
            application/json:
              schema:
                $ref: "#/components/schemas/getGlobalIssuesCSV_200_response"
          description: CSV report (as a zip file) or background task metadata
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/exceptions:
    delete:
      description: Delete issue ignore rules.
      operationId: deleteIssueExceptions
      requestBody:
        content:
          application/json:
            examples:
              Remove All:
                value:
                  kind: all
                  filters:
                    policyId: null
                    projectId: custom+1/project
                    releaseGroupId: null
              Remove by ID List:
                value:
                  kind: idList
                  value:
                  - 1
                  - 2
            schema:
              $ref: "#/components/schemas/deleteIssueExceptions_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateIssues_200_response"
          description: Count of deleted issue ignore rules
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
                No exceptions found for deletion:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: No exceptions found for the provided IDs.
                    name: BadRequestError
                    httpStatusCode: 400
                Improper user permissions:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: No project ID provided for project and release groups
                      level exception.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Issues
    get:
      description: List issue ignore rules.
      operationId: getIssueExceptions
      parameters:
      - description: Exception category
        explode: true
        in: query
        name: "filters[category]"
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: Exception project ID
        explode: true
        in: query
        name: "filters[projectId]"
        required: false
        schema:
          type: string
        style: form
      - description: Exception release group ID
        explode: true
        in: query
        name: "filters[releaseGroupId]"
        required: false
        schema:
          type: integer
        style: form
      - description: "Search term (search by created by, revision, note, or package)"
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: "Sort by field (id, package, created by, and ignore scope)"
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - id
          - package
          - created_by
          - scope
          type: string
        style: form
      - description: Sort order
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 20
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssueExceptions_200_response"
          description: List of issue ignore rules
        "400":
          content:
            application/json:
              examples:
                Bad Request Parameter/Body:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error at root.X: ..."
                    name: BadRequestError
                    httpStatusCode: 400
                Non Licensing Policy ID Filtering:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Cannot filter by Policy ID for Security exceptions
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Issues
  /v2/issues/exceptions/{id}:
    delete:
      description: Delete an issue ignore rule.
      operationId: deleteIssueException
      parameters:
      - description: ID of the issue exception to be deleted
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: integer
          description: Number of issues that were ignored by this exception
        "400":
          content:
            application/json:
              examples:
                Non-numeric id:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Exception ID must be a number.
                    name: BadRequestError
                    httpStatusCode: 400
                No policy ID provided for policy exception:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: No policy ID provided for policy level exception.
                    name: BadRequestError
                    httpStatusCode: 400
                No project ID provided for project exception:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: No project ID provided for project level exception.
                    name: BadRequestError
                    httpStatusCode: 400
                No Release Group ID provided for Release Group exception:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: No release group ID provided for release group level
                      exception.
                    name: BadRequestError
                    httpStatusCode: 400
                No Project ID provided for Project + Release Group exception:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: No project ID provided for project and release groups
                      level exception.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Exception does not belong to Organization:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: Exception does not belong to organization.
                    name: ForbiddenError
                    httpStatusCode: 403
                User does not have permission to edit policies:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to edit policies.
                    name: ForbiddenError
                    httpStatusCode: 403
                User does not have permission to resolve issues in project:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: "User does not have permission to resolve Licensing issues\
                      \ for project: X"
                    name: ForbiddenError
                    httpStatusCode: 403
                User does not have permission to resolve issues in release group:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to resolve Licensing issues
                      for all release groups
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Issues
  /issue-filters:
    get:
      description: |
        This endpoint returns a list of saved filters for the organization. The filters are categorized into licensing, vulnerability, and quality -- only the requested category of filters will be returned.
      operationId: listSavedFilters
      parameters:
      - description: The category of the issue filters.
        explode: true
        in: query
        name: category
        required: true
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/listSavedFilters_200_response_inner"
                type: array
          description: A list of saved filters
        "403":
          description: Authentication failed or not a premium account.
      summary: List out saved filters
      tags:
      - Issue Filters
    post:
      description: |
        This endpoint allows you to create a saved filter for your organization.
      operationId: createSavedFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createSavedFilter_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listSavedFilters_200_response_inner"
          description: Saved filter created successfully
        "403":
          description: Authentication failed or not a premium account.
      summary: Create a saved filter for your organization
      tags:
      - Issue Filters
  /issue-filters/{filterId}:
    delete:
      description: |
        Delete a saved filter by ID. The filter must be owned by the user's organization.
      operationId: deleteSavedFilter
      parameters:
      - description: The ID of the saved filter.
        explode: false
        in: path
        name: filterId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Saved filter deleted successfully
        "400":
          description: Invalid or missing ID.
        "403":
          description: Authentication failed or not a premium account.
      summary: Delete a saved filter by ID
      tags:
      - Issue Filters
    get:
      description: |
        Get a saved filter by ID. The filter must be owned by the user's organization.
      operationId: getSavedFilterById
      parameters:
      - description: The ID of the saved filter.
        explode: false
        in: path
        name: filterId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listSavedFilters_200_response_inner"
          description: A saved filter object
        "400":
          description: Invalid or missing ID.
        "403":
          description: Authentication failed or not a premium account.
      summary: Get a saved filter by ID
      tags:
      - Issue Filters
    put:
      description: |
        Update a saved filter for your organization. The filter must be owned by the user's organization.
      operationId: updateSavedFilter
      parameters:
      - description: The ID of the saved filter.
        explode: false
        in: path
        name: filterId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateSavedFilter_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listSavedFilters_200_response_inner"
          description: Saved filter updated successfully
        "400":
          description: Invalid or missing ID.
        "403":
          description: Authentication failed or not a premium account.
      summary: Update a saved filter for your organization
      tags:
      - Issue Filters
  /issue_counts:
    get:
      description: Fetch the daily issue counts based on provided filters.
      operationId: getIssueCounts
      parameters:
      - description: The start date to pull Issue Overview data for. Defaults to 30
          days before the end date.
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The start date to pull Issue Overview data for. Defaults to the
          current date and time.
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The project labels to filter Issue Overview data to.
        explode: true
        in: query
        name: "labels[]"
        required: false
        schema:
          items:
            minimum: 0
            type: integer
          type: array
        style: form
      - description: "The issue category to filter Issue Overview data to. If no category\
          \ is chosen, it will fetch data for all issue categories."
        explode: true
        in: query
        name: category
        required: false
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: The specific project ID to filter Issue Overview data to.
        explode: true
        in: query
        name: projectId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: teamId
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Success:
                  value:
                    counts:
                      date: 2023-12-19T20:09:12.583Z
                      active: 10
                      ignored: 241
                      remediated: 51
                    totalProjects: 9
                    licensing:
                      type:
                        policy_conflict: 59
                        policy_flag: 210
                        unlicensed_dependency: 2
                      status:
                        active: 271
                        ignored: 4
                        remediated: 0
                    vulnerability:
                      type:
                        critical: 11
                        high: 52
                        medium: 4
                        low: 99
                        unknown: 42
                      status:
                        active: 208
                        ignored: 2
                        remediated: 5
                    quality:
                      type:
                        outdated_dependency: 40
                        blacklisted_dependency: 19
                        risk_abandonware: 16
                        risk_empty-package: 1
                        risk_native-code: 6
                      status:
                        active: 82
                        ignored: 25
                        remediated: 6
              schema:
                $ref: "#/components/schemas/getIssueCounts_200_response"
          description: Okay
        "400":
          content:
            application/json:
              examples:
                User Not Associated With Org:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: User is not associated with an organization.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Invalid Permissions:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2005
                    message: User does not have permission to see every project and
                      every issue category.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Issue Overview
  /issue_counts/export:
    post:
      description: Exports the issues from the current set of Issue Overview data.
      operationId: exportIssueOverviewCsv
      parameters:
      - description: The start date to pull Issue Overview data for. Defaults to 30
          days before the end date.
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The start date to pull Issue Overview data for. Defaults to the
          current date and time.
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The project labels to filter Issue Overview data to.
        explode: true
        in: query
        name: "labels[]"
        required: false
        schema:
          items:
            minimum: 0
            type: integer
          type: array
        style: form
      - description: "The issue category to filter Issue Overview data to. If no category\
          \ is chosen, it will fetch data for all issue categories."
        explode: true
        in: query
        name: category
        required: false
        schema:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        style: form
      - description: The specific project ID to filter Issue Overview data to.
        explode: true
        in: query
        name: projectId
        required: false
        schema:
          type: string
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: teamId
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/exportIssueOverviewCsv_200_response"
          description: Okay
        "400":
          content:
            application/json:
              examples:
                User Not Associated With Org:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: User is not associated with an organization.
                    name: BadRequestError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Invalid Permissions:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2005
                    message: User does not have permission to see every project and
                      every issue category.
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Issue Overview
  /cli/organization:
    get:
      description: |
        Retrieves organizations capability and preferences for CLI. This is used by CLI to infer default preference and capability of an organization.
        For example, 'supportsIssueDiffs' of True indicates to the CLI, that this organization, and this endpoint can support issue diffing.
      operationId: getOrganizationCLI
      responses:
        "200":
          content:
            application/json:
              examples:
                organizationPreferences:
                  value:
                    organizationId: 123
                    usesSAML: true
                    supportsCliLicenseScanning: true
                    supportsAnalyzedRevisionsQuery: true
                    supportsDependenciesCachePolling: true
                    supportsIssueDiffs: true
                    defaultVendoredDependencyScanType: CLILicenseScan
                    supportsNativeContainerScans: true
                    requireFullFileUploads: true
                    supportsPathDependency: true
                    supportsFirstPartyScans: true
                    defaultToFirstPartyScans: false
                    customLicenseScanConfigs:
                    - name: Proprietary License
                      matchCriteria: "[Pp]roprietary [Ll]icense"
              schema:
                $ref: "#/components/schemas/getOrganizationCLI_200_response"
          description: Organizations capability and preferences for CLI
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
      security:
      - ApiToken: []
      tags:
      - CLI
  /organizations/labels:
    get:
      description: Retrieves the Labels associated with the Organization.
      operationId: getOrganizationLabels
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getOrganizationLabels_200_response"
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
      security:
      - ApiToken: []
      tags:
      - Organization Labels
    post:
      description: Creates a new Label associated with the Organization.  Restricted
        to premium users.
      operationId: createOrganizationLabel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createOrganizationLabel_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createOrganizationLabel_201_response"
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Conflict
      security:
      - ApiToken: []
      tags:
      - Organization Labels
  /organizations/labels/{id}:
    delete:
      description: Delete a specific Label by its ID.  Restricted to premium users.
      operationId: deleteOrganizationLabel
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: No content
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
      security:
      - ApiToken: []
      tags:
      - Organization Labels
    get:
      description: Retrieves a specific Label by its ID.
      operationId: getOrganizationLabel
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getOrganizationLabels_200_response_labels_inner"
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
      security:
      - ApiToken: []
      tags:
      - Organization Labels
  /organizations/{id}/limits/{resource}:
    get:
      description: Fetch the organization's limit for subscription limited resource
        and its current usage.
      operationId: getOrganizationLimits
      parameters:
      - description: The organization ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: number
        style: simple
      - explode: false
        in: path
        name: resource
        required: true
        schema:
          enum:
          - contributors
          - release-groups
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Contributor limit for an organization:
                  value:
                    usage: 10
                    max: 100
                    unlimited: false
              schema:
                $ref: "#/components/schemas/getOrganizationLimits_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                Organization contract data is missing:
                  value:
                    uuid: 12345678-1234-1234-1234-123456789012
                    code: 400
                    message: Organization contract not found.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request error. Sent when an enterprise organization is
            missing an contract data.
        "403":
          content:
            application/json:
              examples:
                Requesting for another org:
                  value:
                    uuid: 12345678-1234-1234-1234-123456789012
                    code: 403
                    message: User does not have access for this Organization resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Organization Limits
  /projects/{locator}/labels:
    get:
      description: Retrieves the Labels associated with a specific Project.
      operationId: getProjectLabels
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/getProjectLabels_200_response_inner"
                type: array
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
      security:
      - ApiToken: []
      tags:
      - Project Labels
  /projects/{locator}/last-published:
    get:
      description: Retrieves the timestamp of the last time the project received an
        update.
      operationId: getProjectLastPublished
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example: 2023-09-22T10:30:00Z
              schema:
                description: The ISO timestamp of the last time an update was published
                  for the project.
                type: string
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
      security:
      - ApiToken: []
      tags:
      - Projects
  /projects/{locator}:
    put:
      description: Update information about a specific Project.
      operationId: updateProjectLabels
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateProjectLabels_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateProjectLabels_200_response"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Conflict
      security:
      - ApiToken: []
      tags:
      - Project Labels
  /projects/{locator}/revisions:
    get:
      description: List Revisions for the branches and tags of a given project.
      operationId: getProjectRevisions
      parameters:
      - description: the url-encoded locator of the project - matched by substring
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: the number of revisions to skip for pagination (used with "count"
          query parameter)
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: number
        style: form
      - description: the number of revisions to return (maximum of 1000)
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: number
        style: form
      - description: "If true, we will only return Revisions that have been successfully\
          \ analyzed by FOSSA (resolved)"
        explode: true
        in: query
        name: resolved
        required: false
        schema:
          type: boolean
        style: form
      - description: the list of branches or tags being requested
        explode: true
        in: query
        name: "refs[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Specify whether the list should be tags OR branches
        explode: true
        in: query
        name: refs_type
        required: false
        schema:
          enum:
          - branch
          - tag
          type: string
        style: form
      - description: Filter the revisions by source
        explode: true
        in: query
        name: source
        required: false
        schema:
          enum:
          - github
          - gitlab
          - bitbucket
          - azure
          - cli
          - archive
          - container
          - sbom
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Branches:
                  value:
                    branch:
                      main:
                      - locator: git+github.com/test1/test2$1.2.3
                        loc:
                          fetcher: git
                          package: github.com/test1/test2
                          revision: 1.2.3
                        resolved: true
                        projectId: git+github.com/test1/test2
                        source_type: rubygem
                        error: ""
                        message: commit message 1
                        revision_timestamp: 2018-03-06T23:42:29.000Z
                        latestRevisionScanId: 1
                        latestHubbleAnalysisId: 1
                        createdAt: 2022-01-28T03:22:28.183Z
                        updatedAt: 2023-12-05T00:19:44.400Z
                      - locator: git+github.com/test1/test2$4.5.6
                        loc:
                          fetcher: git
                          package: github.com/test1/test2
                          revision: 4.5.6
                        resolved: true
                        projectId: git+github.com/test1/test2
                        source_type: rubygem
                        error: ""
                        message: commit message 2
                        revision_timestamp: 2019-03-06T23:42:29.000Z
                        latestRevisionScanId: 2
                        latestHubbleAnalysisId: 2
                        createdAt: 2022-01-28T03:22:28.183Z
                        updatedAt: 2023-12-05T00:19:44.400Z
                      develop:
                      - locator: git+github.com/test1/test2$7.8.9
                        loc:
                          fetcher: git
                          package: github.com/test1/test2
                          revision: 7.8.9
                        resolved: true
                        projectId: git+github.com/test1/test2
                        source_type: rubygem
                        error: ""
                        message: commit message 3
                        revision_timestamp: 2022-03-06T23:42:29.000Z
                        latestRevisionScanId: 3
                        latestHubbleAnalysisId: 3
                        createdAt: 2022-01-28T03:22:28.183Z
                        updatedAt: 2023-12-05T00:19:44.400Z
              schema:
                $ref: "#/components/schemas/getProjectRevisions_200_response"
          description: A map of branches and tags of the Project to a sorted list
            of Revisions belonging to the corresponding tag/branch
        "400":
          content:
            application/json:
              examples:
                Non array refs query parameter:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: refs must be an array
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                No Revisions found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "No Revision data found for the provided Project: X and\
                      \ request parameters"
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Projects
  /projects/{locator}/generate_attribution_slug:
    delete:
      description: Delete a slug used in the URL for the live attribution report for
        this project
      operationId: deleteProjectGenerateAttributionSlug
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: No content
        "400":
          content:
            application/json:
              examples:
                Bad request:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Bad request.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                Invalid Permissions:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2005
                    message: User does not have permission to edit this project.
                    name: ForbiddenError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              examples:
                Project Not Found:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2004
                    message: Project could not be found or you do not have access
                      to it.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
      security:
      - ApiToken: []
      tags:
      - Projects
      - Issues
    put:
      description: Generate (or regenerate) a slug used in the URL for the live attribution
        report for this project
      operationId: generateProjectGenerateAttributionSlug
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Success:
                  value: 00000-1111-2222-333333333333
              schema:
                type: string
          description: OK
        "400":
          content:
            application/json:
              examples:
                Bad request:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Bad request.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                Invalid Permissions:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2005
                    message: User does not have permission to edit this project.
                    name: ForbiddenError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Unauthenticated Request
        "404":
          content:
            application/json:
              examples:
                Project Not Found:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2004
                    message: Project could not be found or you do not have access
                      to it.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
      security:
      - ApiToken: []
      tags:
      - Projects
  /projects/{locator}/export-issues:
    get:
      description: |
        This endpoint returns a list of all issues for a project. The issues are exported in a JSON (or CSV) format.
      operationId: getProjectExportIssues
      parameters:
      - description: the url-encoded locator of the project
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: "report format to return (JSON or CSV). If not provided, JSON\
          \ will be returned."
        explode: true
        in: query
        name: format
        required: false
        schema: {}
        style: form
      - description: "The revisionId of the project to get issues for. If not provided,\
          \ the latest revision will be used."
        explode: true
        in: query
        name: revisionId
        required: false
        schema:
          type: string
        style: form
      - description: "The status of the issues to return. If not provided, all active\
          \ issues will be returned."
        explode: true
        in: query
        name: status
        required: false
        schema: {}
        style: form
      - description: "the branch or tag to get issues for. If not provided, the default\
          \ branch will be used."
        explode: true
        in: query
        name: ref
        required: false
        schema:
          type: string
        style: form
      - description: Specify whether the ref is a branch or tag.
        explode: true
        in: query
        name: ref_type
        required: false
        schema:
          enum:
          - branch
          - tag
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                JSON:
                  value:
                    Package License Issues:
                    - Dependency: commonjs-findpkgs
                      Revision: 0.0.7
                      Flagged by Policy: ""
                      Issue Type: unlicensed dependency
                      License: ""
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: ""
                      Dependency Depths: "1"
                    - Dependency: ansi-wl-pprint
                      Revision: 0.6.9
                      Flagged by Policy: Standard Bundle Distribution
                      Issue Type: disallowed project
                      License: BSD 2-Clause "Simplified" License
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: Permissive license which is perfectly safe to use provided
                        proper attribution is given and retained.
                      Dependency Depths: "2"
                    Vulnerability Issues:
                    - Name: Uncontrolled Resource Consumption
                      Dependency: uglify-js
                      Revision: 2.4.24
                      CVE: CVE-2015-8858
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      CVSS: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
                      CVSS Score: "7.5"
                      CVSS Severity: High
                      Details: The uglify-js package before 2.6.0 for Node.js allows
                        attackers to cause a denial of service (CPU consumption) via
                        crafted input in a parse call aka a "regular expression denial
                        of service (ReDoS)."
                      Remediation Advice: 2.6.0
                      Dependency Depths: "2"
                      Reference: https://github.com/advisories/GHSA-c9f4-xj24-8jqx
                      CWE: CWE-399
                    - Name: Uncontrolled Resource Consumption
                      Dependency: uglify-js
                      Revision: 2.4.25
                      CVE: CVE-2015-8869
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      CVSS: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
                      CVSS Score: "7.5"
                      CVSS Severity: High
                      Details: The uglify-js package before 2.6.0 for Node.js allows
                        attackers to cause a denial of service (CPU consumption) via
                        crafted input in a parse call aka a "regular expression denial
                        of service (ReDoS)."
                      Remediation Advice: 2.6.0
                      Dependency Depths: "2"
                      Reference: https://github.com/advisories/GHSA-c9f4-xj24-8jqx
                      CWE: CWE-399
                    Quality Issues:
                    - Dependency: eslint
                      Revision: 7.32.0
                      Issue Type: outdated dependency
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: Major difference of 3 or more
                      Dependency Depths: "2"
                    - Dependency: eslint
                      Revision: 7.32.1
                      Issue Type: outdated dependency
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: Major difference of 3 or more
                      Dependency Depths: "2"
              schema:
                $ref: "#/components/schemas/getProjectExportIssues_200_response"
            text/csv:
              schema:
                type: string
          description: A report of all issues for the project. Either in JSON or CSV
            format.
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                No Revisions found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Could not find project abcd
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "428":
          content:
            application/json:
              examples:
                Invalid revisionId provided:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 1025
                    message: Invalid revision specified
                    name: NotFoundError
                    httpStatusCode: 428
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Projects
      - Issues
  /projects/{locator}/export-issues/json:
    get:
      description: |
        This endpoint returns a list of all issues for a project. The issues are exported in a JSON format.
      operationId: getProjectJSONExportIssues
      parameters:
      - description: the url-encoded locator of the project
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: "The revisionId of the project to get issues for. If not provided,\
          \ the latest revision will be used."
        explode: true
        in: query
        name: revisionId
        required: false
        schema:
          type: string
        style: form
      - description: "The status of the issues to return. If not provided, all active\
          \ issues will be returned."
        explode: true
        in: query
        name: status
        required: false
        schema: {}
        style: form
      - description: "the branch or tag to get issues for. If not provided, the default\
          \ branch will be used."
        explode: true
        in: query
        name: ref
        required: false
        schema:
          type: string
        style: form
      - description: Specify whether the ref is a branch or tag.
        explode: true
        in: query
        name: ref_type
        required: false
        schema:
          enum:
          - branch
          - tag
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                JSON:
                  value:
                    Package License Issues:
                    - Dependency: commonjs-findpkgs
                      Revision: 0.0.7
                      Flagged by Policy: ""
                      Issue Type: unlicensed dependency
                      License: ""
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: ""
                      Dependency Depths: "1"
                    - Dependency: ansi-wl-pprint
                      Revision: 0.6.9
                      Flagged by Policy: Standard Bundle Distribution
                      Issue Type: disallowed project
                      License: BSD 2-Clause "Simplified" License
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: Permissive license which is perfectly safe to use provided
                        proper attribution is given and retained.
                      Dependency Depths: "2"
                    Vulnerability Issues:
                    - Name: Uncontrolled Resource Consumption
                      Dependency: uglify-js
                      Revision: 2.4.24
                      CVE: CVE-2015-8858
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      CVSS: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
                      CVSS Score: "7.5"
                      CVSS Severity: High
                      Details: The uglify-js package before 2.6.0 for Node.js allows
                        attackers to cause a denial of service (CPU consumption) via
                        crafted input in a parse call aka a "regular expression denial
                        of service (ReDoS)."
                      Remediation Advice: 2.6.0
                      Dependency Depths: "2"
                      References:
                      - https://github.com/advisories/GHSA-c9f4-xj24-8jqx
                      - https://github.com/advisories/GHSA-c9f4-xj24-8jqz
                      CWES:
                      - CWE-399
                      - CWE-400
                    - Name: Uncontrolled Resource Consumption
                      Dependency: uglify-js
                      Revision: 2.4.25
                      CVE: CVE-2015-8869
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      CVSS: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
                      CVSS Score: "7.5"
                      CVSS Severity: High
                      Details: The uglify-js package before 2.6.0 for Node.js allows
                        attackers to cause a denial of service (CPU consumption) via
                        crafted input in a parse call aka a "regular expression denial
                        of service (ReDoS)."
                      Remediation Advice: 2.6.0
                      Dependency Depths: "2"
                      References:
                      - https://github.com/advisories/GHSA-c9f4-xj24-8jqx
                      - https://github.com/advisories/GHSA-c9f4-xj24-8jqz
                      CWES:
                      - CWE-399
                      - CWE-400
                    Quality Issues:
                    - Dependency: eslint
                      Revision: 7.32.0
                      Issue Type: outdated dependency
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: Major difference of 3 or more
                      Dependency Depths: "2"
                    - Dependency: eslint
                      Revision: 7.32.1
                      Issue Type: outdated dependency
                      Affected Project: My project
                      FOSSA URL: https://app.fossa.com/projects/myproject
                      Details: Major difference of 3 or more
                      Dependency Depths: "2"
              schema:
                $ref: "#/components/schemas/getProjectJSONExportIssues_200_response"
          description: A report of all issues for the project.
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                No Revisions found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Could not find project abcd
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "428":
          content:
            application/json:
              examples:
                Invalid revisionId provided:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 1025
                    message: Invalid revision specified
                    name: NotFoundError
                    httpStatusCode: 428
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Projects
      - Issues
  /projects/{locator}/export-issues/csv:
    get:
      description: |
        This endpoint returns a CSV file of all issues for the project.
      operationId: getProjectCSVExportIssues
      parameters:
      - description: the url-encoded locator of the project
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: "The revisionId of the project to get issues for. If not provided,\
          \ the latest revision will be used."
        explode: true
        in: query
        name: revisionId
        required: false
        schema:
          type: string
        style: form
      - description: "The status of the issues to return. If not provided, all active\
          \ issues will be returned."
        explode: true
        in: query
        name: status
        required: false
        schema: {}
        style: form
      - description: "the branch or tag to get issues for. If not provided, the default\
          \ branch will be used."
        explode: true
        in: query
        name: ref
        required: false
        schema:
          type: string
        style: form
      - description: Specify whether the ref is a branch or tag.
        explode: true
        in: query
        name: ref_type
        required: false
        schema:
          enum:
          - branch
          - tag
          type: string
        style: form
      responses:
        "200":
          content:
            text/csv:
              schema:
                type: string
          description: A report of all issues for the project.
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                No Revisions found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Could not find project abcd
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "428":
          content:
            application/json:
              examples:
                Invalid revisionId provided:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 1025
                    message: Invalid revision specified
                    name: NotFoundError
                    httpStatusCode: 428
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Projects
      - Issues
  /roles:
    get:
      description: Get all roles for users in an organization
      operationId: getAllRoles
      responses:
        "200":
          content:
            application/json:
              examples:
                roles:
                  value:
                  - id: 1
                    organizationId: 1
                    isCustom: false
                    scope: organization
                    name: Org Admin
                    description: "Organization administrator, can do everything"
                    createdAt: 2020-01-01T00:00:00Z
                    updatedAt: 2020-01-01T00:00:00Z
                    permissions:
                    - resourceType: project_any
                      action: view
                    - resourceType: project_any
                      action: edit
              schema:
                items:
                  $ref: "#/components/schemas/getAllRoles_200_response_inner"
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Roles
  /teams:
    get:
      description: Get all teams in your organization
      operationId: getAllTeams
      responses:
        "200":
          content:
            application/json:
              examples:
                teams:
                  value:
                  - id: 1
                    organizationId: 1
                    name: Engineering
                    defaultRoleId: 1
                    autoAddUsers: false
                    description: The engineering team
                    createdAt: 2020-01-01T00:00:00Z
                    updatedAt: 2020-01-01T00:00:00Z
                    teamUsers:
                    - userId: 1
                      roleId: 2
                    - userId: 2
                      roleId: 2
                    teamReleaseGroupsCount: 0
                    teamProjectsCount: 0
                  - id: 2
                    organizationId: 1
                    defaultRoleId: 2
                    autoAddUsers: false
                    name: Security
                    description: The security team
                    createdAt: 2020-01-01T00:00:00Z
                    updatedAt: 2020-01-01T00:00:00Z
                    teamUsers:
                    - userId: 1
                      roleId: 2
                    - userId: 2
                      roleId: 2
                    teamReleaseGroupsCount: 0
                    teamProjectsCount: 0
              schema:
                items:
                  $ref: "#/components/schemas/getAllTeams_200_response_inner"
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /v2/teams/{id}:
    get:
      description: Get metadata about a team by ID
      operationId: getTeamByIdV2
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                team:
                  value:
                    id: 1
                    organizationId: 1
                    name: Engineering
                    defaultRoleId: 1
                    autoAddUsers: false
                    createdAt: 2020-01-01T00:00:00Z
                    updatedAt: 2020-01-01T00:00:00Z
                    teamType: team
                    teamMembersCount: 3
                    teamReleaseGroupsCount: 0
                    teamProjectsCount: 0
              schema:
                $ref: "#/components/schemas/getTeamByIdV2_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidTeamId:
                  value:
                    message: Invalid team ID specified in request.
                    code: 2003
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                NotFound:
                  value:
                    message: Team not found.
                    code: 2004
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /teams/{id}/members:
    get:
      description: Get a paginated list of members for a team
      operationId: getTeamMembers
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: "Page number (1-indexed, defaults to 1)"
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "Number of items per page (defaults to 10, max 50)"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Search term to filter team members by username or email
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                teamMembers:
                  value:
                    results:
                    - userId: 1
                      roleId: 1
                      username: admin_user
                      email: admin@example.com
                    - userId: 2
                      roleId: 2
                      username: team_member
                      email: member@example.com
                    pageSize: 10
                    page: 1
                    totalCount: 2
              schema:
                $ref: "#/components/schemas/getTeamMembers_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidTeamId:
                  value:
                    message: Invalid team ID specified in request.
                    code: 2003
                InvalidPage:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.page but found \"not-a-number\""
                    code: 2003
                InvalidPageSize:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.pageSize but found \"not-a-number\""
                    code: 2003
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: You do not have permission to view this team.
                    code: 2005
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                NotFound:
                  value:
                    message: Team not found.
                    code: 2004
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /teams/{id}/members/addable:
    get:
      description: Get a paginated list of users that are not in the team and can
        be added.
      operationId: getAddableTeamUsers
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: "Page number (1-indexed, defaults to 1)"
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "Number of items per page (defaults to 10, max 50)"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Search term to filter users by username
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                addableUsers:
                  value:
                    results:
                    - userId: 1
                      username: admin_user
                      email: admin@example.com
                    - userId: 2
                      username: non_team_member
                      email: non_team_member@example.com
                    pageSize: 10
                    page: 1
                    totalCount: 2
              schema:
                $ref: "#/components/schemas/getAddableTeamUsers_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidTeamId:
                  value:
                    message: Invalid team ID specified in request.
                    code: 2003
                InvalidPage:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.page but found \"not-a-number\""
                    code: 2003
                InvalidPageSize:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.pageSize but found \"not-a-number\""
                    code: 2003
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                ForbiddenTeam:
                  value:
                    message: You do not have permission to view this team.
                    code: 2005
                ForbiddenEdit:
                  value:
                    message: You do not have permission to edit this team.
                    code: 2005
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                NotFound:
                  value:
                    message: Team not found.
                    code: 2004
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /teams/{id}/projects:
    get:
      description: Get a paginated list of projects for a team
      operationId: getTeamProjects
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: "Page number (1-indexed, defaults to 1)"
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "Number of items per page (defaults to 10, max 50)"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Search term to filter projects by title
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Sort order for the projects by title
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                teamProjects:
                  value:
                    results:
                    - title: Project 1
                      locator: custom+1/project1
                    - title: Project 2
                      locator: custom+2/project2
                    pageSize: 10
                    page: 1
                    totalCount: 2
              schema:
                $ref: "#/components/schemas/getTeamProjects_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidTeamId:
                  value:
                    message: Invalid team ID specified in request.
                    code: 2003
                InvalidPage:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.page but found \"not-a-number\""
                    code: 2003
                InvalidPageSize:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.pageSize but found \"not-a-number\""
                    code: 2003
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: You do not have permission to view this team.
                    code: 2005
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                NotFound:
                  value:
                    message: Team not found.
                    code: 2004
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /teams/{id}/release-groups:
    get:
      description: Get a paginated list of Release Groups for a team
      operationId: getTeamReleaseGroups
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: "Page number (1-indexed, defaults to 1)"
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "Number of items per page (defaults to 10, max 50)"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Search term to filter Release Groups by title
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Sort order for the Release Groups by title
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                teamReleaseGroups:
                  value:
                    results:
                    - title: Release Group 1
                      id: 1
                    - title: Release Group 2
                      id: 2
                    pageSize: 10
                    page: 1
                    totalCount: 2
              schema:
                $ref: "#/components/schemas/getTeamReleaseGroups_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidTeamId:
                  value:
                    message: Invalid team ID specified in request.
                    code: 2003
                InvalidPage:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.page but found \"not-a-number\""
                    code: 2003
                InvalidPageSize:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.pageSize but found \"not-a-number\""
                    code: 2003
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: You do not have permission to view this team.
                    code: 2005
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                NotFound:
                  value:
                    message: Team not found.
                    code: 2004
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /teams/{id}/addable-projects-and-release-groups:
    get:
      description: Get a paginated list of projects and Release Groups that are not
        in the team and can be added.
      operationId: getAddableTeamProjectsAndReleaseGroups
      parameters:
      - description: ID of the team
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: "Page number (1-indexed, defaults to 1)"
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: "Number of items per page (defaults to 10, max 50)"
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: Search term to filter projects and Release Groups by title
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                addableProjectsAndReleaseGroups:
                  value:
                    results:
                    - id: "1"
                      title: Project 1
                      type: project
                    - id: "2"
                      title: Release Group 1
                      type: release_group
                    pageSize: 10
                    page: 1
                    totalCount: 2
              schema:
                $ref: "#/components/schemas/getAddableTeamProjectsAndReleaseGroups_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidTeamId:
                  value:
                    message: Invalid team ID specified in request.
                    code: 2003
                InvalidPage:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.page but found \"not-a-number\""
                    code: 2003
                InvalidPageSize:
                  value:
                    message: "Parse error: expected undefined | positive number at\
                      \ root.pageSize but found \"not-a-number\""
                    code: 2003
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                ForbiddenTeam:
                  value:
                    message: You do not have permission to view this team.
                    code: 2005
                ForbiddenEdit:
                  value:
                    message: You do not have permission to add projects or release
                      groups to this team.
                    code: 2005
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                NotFound:
                  value:
                    message: Team not found.
                    code: 2004
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Teams
  /v2/projects:
    delete:
      description: Delete projects from an organization.
      operationId: deleteProjects
      parameters:
      - description: Filter by project name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by project type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - container
          - archive
          - provided
          - autobuild
          - sbom
          type: string
        style: form
      - description: Filter by project being public or private.
        explode: true
        in: query
        name: isPublic
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by project labels.
        explode: true
        in: query
        name: "labels[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: "teamId[]"
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by last revision analyzed within N days.
        explode: true
        in: query
        name: lastRevisionWithin
        required: false
        schema:
          type: integer
        style: form
      - description: |
          The list of locators for the projects to delete. If "all" is provided, then all projects that meet the provided filters will be deleted.
        explode: true
        in: query
        name: locators
        required: false
        schema:
          $ref: "#/components/schemas/deleteProjects_locators_parameter"
        style: form
      responses:
        "200":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
    get:
      description: Fetch the list of projects based on provided filters.
      operationId: getProjects
      parameters:
      - description: The category to order the results by and sort direction.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - title_asc
          - title_desc
          - issues-total_asc
          - issues-total_desc
          - latest-scan_asc
          - latest-scan_desc
          - last-analyzed_asc
          - last-analyzed_desc
          - issues-licensing_asc
          - issues-licensing_desc
          - issues-security_asc
          - issues-security_desc
          - issues-quality_asc
          - issues-quality_desc
          type: string
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 20
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Filter by project name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by project type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - container
          - archive
          - provided
          - autobuild
          - sbom
          type: string
        style: form
      - description: Filter by project being public or private.
        explode: true
        in: query
        name: isPublic
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by project labels.
        explode: true
        in: query
        name: "labels[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: "teamId[]"
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by last revision analyzed within N days.
        explode: true
        in: query
        name: lastRevisionWithin
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by project locators (exact match).
        explode: true
        in: query
        name: "locators[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Include shared projects.
        explode: true
        in: query
        name: includeSharedProjects
        required: false
        schema:
          type: boolean
        style: form
      - description: Only show projects that have been shared with other organizations.
        explode: true
        in: query
        name: onlyIncludeSharedProjects
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by a project's URL.
        explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    projects:
                    - id: custom+123/test-project-2025
                      url: https://test.com/test-project-2025
                      title: test-project-2025
                      branch: develop
                      version: test-version-01
                      type: provided
                      public: false
                      scanned: 2025-05-22T17:41:36.644Z
                      lastAnalyzed: 2025-05-22T17:41:05.213Z
                      issues:
                        total: 10
                        licensing: 5
                        security: 3
                        quality: 2
                      labels: []
                      teams: []
                      originOrganizationName: null
                      latestRevision:
                        locator: custom+123/test-project-2025$test-version-01
                        message: "May 20th 2025, 5:16 pm +00:00"
                      latestBuildStatus: succeeded
              schema:
                $ref: "#/components/schemas/getProjects_200_response"
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
  /v2/projects/summary:
    get:
      description: Summary information about the number of projects and release groups.
      operationId: getProjectsSummary
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getProjectsSummary_200_response"
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
  /v2/projects/labels:
    put:
      description: Apply a label to one to many projects.
      operationId: updateProjectsLabels
      parameters:
      - description: The ID of the label you want to apply to projects.
        explode: true
        in: query
        name: labelId
        required: true
        schema:
          type: number
        style: form
      - description: |
          The list of locators for the projects to update. If "all" is provided, then all projects that meet the provided filters will have the label applied.
        explode: true
        in: query
        name: locators
        required: true
        schema:
          $ref: "#/components/schemas/deleteProjects_locators_parameter"
        style: form
      - description: Filter by project name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by project type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - container
          - archive
          - provided
          - autobuild
          - sbom
          type: string
        style: form
      - description: Filter by project being public or private.
        explode: true
        in: query
        name: isPublic
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by project labels.
        explode: true
        in: query
        name: "labels[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: "teamId[]"
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by last revision analyzed within N days.
        explode: true
        in: query
        name: lastRevisionWithin
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                description: |
                  An object detailing failures when applying the label. The keys are locators of projects that failed. The values are error messages. If it is empty, everything succeeded.
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
  /v2/projects/policy:
    put:
      description: Update the policy for one to many projects.
      operationId: updateProjectsPolicies
      parameters:
      - description: The ID of the policy you want to apply to projects.
        explode: true
        in: query
        name: policyId
        required: true
        schema:
          type: number
        style: form
      - description: |
          The list of locators for the projects to update. If "all" is provided, then all projects that meet the provided filters will have the policy applied.
        explode: true
        in: query
        name: locators
        required: true
        schema:
          $ref: "#/components/schemas/deleteProjects_locators_parameter"
        style: form
      - description: Filter by project name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by project type.
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - container
          - archive
          - provided
          - autobuild
          - sbom
          type: string
        style: form
      - description: Filter by project being public or private.
        explode: true
        in: query
        name: isPublic
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter by project labels.
        explode: true
        in: query
        name: "labels[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned projects.
        explode: true
        in: query
        name: "teamId[]"
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by last revision analyzed within N days.
        explode: true
        in: query
        name: lastRevisionWithin
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties: {}
                description: |
                  An object detailing failures when applying the label. The keys are locators of projects that failed. The values are error messages. If it is empty, everything succeeded.
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
  /v2/projects/{locator}/release-groups:
    get:
      description: Returns all of the release groups that this project is a part of.
      operationId: listReleaseGroupsForProject
      parameters:
      - description: the url-encoded locator of the project
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/listReleaseGroupsForProject_200_response_inner"
                type: array
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Project not found
      security:
      - ApiToken: []
      tags:
      - Projects
  /v2/release-groups:
    delete:
      description: Delete release groups from an organization.
      operationId: deleteReleaseGroups
      parameters:
      - description: Filter by release group name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned release groups.
        explode: true
        in: query
        name: teamId
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      - description: |
          The list of ids for the release groups to delete. If "all" is provided, then all release groups that meet the provided filters will be deleted.
        explode: true
        in: query
        name: ids
        required: false
        schema:
          $ref: "#/components/schemas/deleteReleaseGroups_ids_parameter"
        style: form
      responses:
        "200":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
    get:
      description: Fetch the list of release groups based on provided filters.
      operationId: getReleaseGroups
      parameters:
      - description: The category to order the results by and sort direction.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - title_asc
          - title_desc
          - issues-total_asc
          - issues-total_desc
          - latest-scan_asc
          - latest-scan_desc
          type: string
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 20
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: Filter by release group name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned release groups.
        explode: true
        in: query
        name: teamId
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by last revision analyzed within N days.
        explode: true
        in: query
        name: lastRevisionWithin
        required: false
        schema:
          type: integer
        style: form
      - description: Filter by whether the release group is public on the portal.
        explode: true
        in: query
        name: isPublic
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getReleaseGroups_200_response"
          description: Okay
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
  /v2/release-groups/policy:
    put:
      description: Update a policy for one to many release groups.
      operationId: updateReleaseGroupsPolicies
      parameters:
      - description: The ID of the policy you want to apply to projects.
        explode: true
        in: query
        name: policyId
        required: true
        schema:
          type: number
        style: form
      - description: |
          The list of IDs for the release groups to update. If "all" is provided, then all release groups that meet the provided filters will have the label applied.
        explode: true
        in: query
        name: ids
        required: true
        schema:
          $ref: "#/components/schemas/updateReleaseGroupsPolicies_ids_parameter"
        style: form
      - description: Filter by release group name.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter by one or more team IDs. Providing "null" will return
          all unassigned release groups.
        explode: true
        in: query
        name: teamId
        required: false
        schema:
          items:
            $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
          type: array
        style: form
      - description: Filter by last policy scan within N days.
        explode: true
        in: query
        name: latestScan
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Projects
  /packages/package-managers:
    get:
      description: "Fetch the list of packages managers used by your organization.\
        \ If none are used/can't be found, the full list of package managers is returned."
      operationId: getPackagesPackageManagers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Package Observability
  /packages/package-locators:
    get:
      description: Fetch the list of packages locators used by your organization.
      operationId: getPackagesPackageLocators
      parameters:
      - description: "Filter locators to those partially matching the specified locator.\
          \  For example, \"foo\" will match \"foo\", \"foobar\", and \"bazfoobar\"\
          ."
        explode: true
        in: query
        name: packageLocator
        required: false
        schema:
          type: string
        style: form
      - description: The number of results to return.
        explode: true
        in: query
        name: count
        required: false
        schema:
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getPackagesPackageLocators_200_response"
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Package Observability
  /packages/package-summary:
    get:
      description: Fetch the total package count and the last cache date for your
        organization.
      operationId: getPackagesPackageSummary
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getPackagesPackageSummary_200_response"
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Package Observability
  /packages/report:
    get:
      description: Request an export of the package index with the applied set of
        filters.  The export will be generated asynchronously and a link to the export
        will be emailed to you.
      operationId: getPackageIndexExport
      parameters:
      - description: "Filter packages to those from the specified fetchers.  For example,\
          \ fetchers[0]=npm&fetchers[1]=apk will match all NPM packages and all APK\
          \ packages."
        explode: true
        in: query
        name: fetchers
        required: false
        schema:
          items:
            enum:
            - apk
            - bower
            - cargo
            - cart
            - comp
            - conda
            - cpan
            - cran
            - deb
            - gem
            - git
            - go
            - hackage
            - hex
            - mvn
            - npm
            - nuget
            - pip
            - pod
            - pub
            - rpm
            - rpm-generic
            - swift
            type: string
          type: array
        style: form
      - description: "Filter results to only packages with the specified name.  Supports\
          \ partial matches.  For example \"foo\" will match \"foo\", \"foobar\",\
          \ and \"foo-bar\"."
        explode: true
        in: query
        name: packageName
        required: false
        schema:
          type: string
        style: form
      - description: Filter results to only include packages which are direct or transitive
          dependencies of your projects.
        explode: true
        in: query
        name: depth
        required: false
        schema:
          items:
            enum:
            - direct
            - transitive
            type: string
          type: array
        style: form
      - description: Filter packages to those belonging to your projects with the
          specified labels.
        explode: true
        in: query
        name: labels
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter packages to only one of your specific projects.  Exact
          match only.
        explode: true
        in: query
        name: projectName
        required: false
        schema:
          type: string
        style: form
      - description: Filter packages to those belonging to your projects from the
          specified set of sources
        explode: true
        in: query
        name: sources
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter results to your projects which are public or private
        explode: true
        in: query
        name: visibility
        required: false
        schema:
          items:
            enum:
            - public
            - private
            type: string
          type: array
        style: form
      - description: Filter packages to include only packages that do or do not have
          packages as dependencies which are blocked by your organization
        explode: true
        in: query
        name: blockType
        required: false
        schema:
          enum:
          - has_blocked_packages
          - no_blocked_packages
          type: string
        style: form
      - description: Filter packages to those with vulnerabilities that have specific
          Common Vulnerabilities and Exposures (CVE) identifiers
        explode: true
        in: query
        name: cve
        required: false
        schema:
          type: string
        style: form
      - description: Filter packages to those with vulnerabilities that have specific
          Common Weakness Enumeration (CWE) identifiers
        explode: true
        in: query
        name: cwes
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter packages to those with specific package locators (exact
          match only)
        explode: true
        in: query
        name: locators
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter packages to those with vulnerabilities that either have
          or do not have a fix available
        explode: true
        in: query
        name: fixTypes
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter packages by severity levels of issues
        explode: true
        in: query
        name: severities
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Filter packages to just those owned by the specified teams.  Specify
          the string "null" to filter packages that are not owned by any team.
        explode: true
        in: query
        name: teamIds
        required: false
        schema:
          items:
            type: number
          type: array
          nullable: true
        style: form
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getPackageIndexExport_201_response"
          description: "The report generation task was created successfully.  This\
            \ does not mean the job completed successfully -- when the job is complete,\
            \ you will receive an email with a link to download the report."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      tags:
      - Package Observability
  /packages:
    get:
      description: Retrieve the number of projects that a dependency is used in and
        how many versions of it are blocked.  This endpoint is paginated.
      operationId: getPackages
      parameters:
      - description: "Filter packages to those from the specified fetchers.  For example,\
          \ fetchers[0]=npm&fetchers[1]=apk will match all NPM packages and all APK\
          \ packages."
        explode: true
        in: query
        name: fetchers
        required: false
        schema:
          items:
            enum:
            - apk
            - bower
            - cargo
            - cart
            - comp
            - conda
            - cpan
            - cran
            - deb
            - gem
            - git
            - go
            - hackage
            - hex
            - mvn
            - npm
            - nuget
            - pip
            - pod
            - pub
            - rpm
            - rpm-generic
            - swift
            type: string
          type: array
        style: form
      - description: "Filter results to only packages with the specified name.  Supports\
          \ partial matches.  For example \"foo\" will match \"foo\", \"foobar\",\
          \ and \"foo-bar\"."
        explode: true
        in: query
        name: packageName
        required: false
        schema:
          type: string
        style: form
      - description: Filter results to only include packages which are direct or transitive
          dependencies of your projects.
        explode: true
        in: query
        name: depth
        required: false
        schema:
          items:
            enum:
            - direct
            - transitive
            type: string
          type: array
        style: form
      - description: Filter packages to those belonging to your projects with the
          specified labels.
        explode: true
        in: query
        name: labels
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter packages to only one of your specific projects.  Exact
          match only.
        explode: true
        in: query
        name: projectName
        required: false
        schema:
          type: string
        style: form
      - description: Filter packages to those belonging to your projects from the
          specified set of sources
        explode: true
        in: query
        name: sources
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter results to your projects which are public or private
        explode: true
        in: query
        name: visibility
        required: false
        schema:
          items:
            enum:
            - public
            - private
            type: string
          type: array
        style: form
      - description: Filter packages to include only packages that do or do not have
          packages as dependencies which are blocked by your organization
        explode: true
        in: query
        name: blockType
        required: false
        schema:
          enum:
          - has_blocked_packages
          - no_blocked_packages
          type: string
        style: form
      - description: Filter packages to those with vulnerabilities that have specific
          Common Vulnerabilities and Exposures (CVE) identifiers
        explode: true
        in: query
        name: cve
        required: false
        schema:
          type: string
        style: form
      - description: Filter packages to those with vulnerabilities that have specific
          Common Weakness Enumeration (CWE) identifiers
        explode: true
        in: query
        name: cwes
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter packages to those with vulnerabilities that either have
          or do not have a fix available
        explode: true
        in: query
        name: fixTypes
        required: false
        schema:
          items:
            enum:
            - has_fix
            - no_fix
            type: string
          type: array
        style: form
      - description: Filter packages by severity levels of issues
        explode: true
        in: query
        name: severities
        required: false
        schema:
          items:
            enum:
            - critical
            - high
            - medium
            - low
            - unknown
            type: string
          type: array
        style: form
      - description: Filter packages to just those owned by the specified teams.  Specify
          the string "null" to filter packages that are not owned by any team.
        explode: true
        in: query
        name: teamIds
        required: false
        schema:
          items:
            type: number
          type: array
          nullable: true
        style: form
      - description: Filter packages by the specified dependency project locators
          without revision / version data.  Locators are unique identifiers for packages
          in the FOSSA system. Exact matches only.
        example: "locators[0]=npm+corejs"
        explode: true
        in: query
        name: locators
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The page number to retrieve
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of results to return per page
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - description: The field to sort by
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - match
          - alphabetical
          - usage
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getPackageIndexExport_201_response"
          description: The list of package dependency locators
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      tags:
      - Package Observability
  /package-labels:
    delete:
      description: Delete one or more Package Labels. Note - This endpoint is not
        available for organizations on the Free plan.
      operationId: deletePackageLabels
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  ids:
                  - 1
                  - 293
            schema:
              $ref: "#/components/schemas/deletePackageLabels_request"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      tags:
      - Package Labels
    get:
      description: Retrieve all of the Package Labels defined for the current organization.
        Note - This endpoint is not available for organizations on the Free plan.
      operationId: getPackageLabels
      responses:
        "200":
          content:
            application/json:
              examples:
                packageLabels:
                  value:
                    packageLabels:
                    - id: 5
                      organizationId: 1
                      name: development
                      createdAt: 2024-12-02T21:31:12.515Z
                      updatedAt: 2024-12-02T21:31:12.515Z
                    - id: 6
                      organizationId: 1
                      name: production
                      createdAt: 2024-12-02T21:59:48.719Z
                      updatedAt: 2024-12-02T21:59:48.719Z
              schema:
                $ref: "#/components/schemas/getPackageLabels_200_response"
          description: OK
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      tags:
      - Package Labels
    post:
      description: Create one or more new Package Labels. Note - This endpoint is
        not available for organizations on the Free plan.
      operationId: createPackageLabel
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  labels:
                  - development
                  - production
            schema:
              $ref: "#/components/schemas/createPackageLabel_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                packageLabels:
                  value:
                    packageLabels:
                    - id: 5
                      organizationId: 1
                      name: development
                      createdAt: 2024-12-02T21:31:12.515Z
                      updatedAt: 2024-12-02T21:31:12.515Z
                    - id: 6
                      organizationId: 1
                      name: production
                      createdAt: 2024-12-02T21:59:48.719Z
                      updatedAt: 2024-12-02T21:59:48.719Z
              schema:
                $ref: "#/components/schemas/getPackageLabels_200_response"
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      tags:
      - Package Labels
  /package-label-assignments:
    delete:
      description: Remove one or more Package Labels from a single package.
      operationId: deletePackageLabelAssignments
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  assignmentLabelIds:
                  - 1
                  - 2
            schema:
              $ref: "#/components/schemas/deletePackageLabelAssignments_request"
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Internal server error
      tags:
      - Package Labels
    get:
      description: Get all Package Labels assigned to a single package.
      operationId: getPackageLabelAssignments
      parameters:
      - example: npm+lodash
        explode: true
        in: query
        name: packageId
        required: false
        schema:
          description: The ID of the package to get labels for.
          type: string
        style: form
      - example: 4.15.0
        explode: true
        in: query
        name: packageVersion
        required: false
        schema:
          description: The version of the package to get labels for or blank for all
            versions.
          type: string
        style: form
      - example: project
        explode: true
        in: query
        name: scope
        required: false
        schema:
          description: The scope of the package label assignment.
          enum:
          - org
          - project
          - revision
          type: string
        style: form
      - example: custom+1/my-cli-project or custom+1/my-cli-project/$revision1
        explode: true
        in: query
        name: scopeId
        required: false
        schema:
          description: The ID of the scope to get labels for.
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                packageLabelAssignments:
                  value:
                    packageLabelAssignments:
                      id: 1
                      createdAt: 2024-12-02T21:31:12.515Z
                      updatedAt: 2024-12-02T21:31:12.515Z
                      organizationId: 1
                      labelId: 5
                      packageId: npm+lodash
                      packageVersion: 4.15.0
                      scope:
                        id: 1
                        name: project
                      scopeId: custom+1/my-cli-project
              schema:
                $ref: "#/components/schemas/getPackageLabelAssignments_200_response"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Internal server error
      tags:
      - Package Labels
    post:
      description: Assign one or more Package Labels to a single package. Note - This
        endpoint is not available for organizations on the Free plan.
      operationId: createPackageLabelAssignments
      requestBody:
        content:
          application/json:
            examples:
              example:
                value:
                  packageId: npm+lodash
                  packageVersion: 4.15.0
                  scope: project
                  scopeId: custom+1/my-cli-project
                  labelIds:
                  - 1
                  - 2
            schema:
              $ref: "#/components/schemas/createPackageLabelAssignments_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                packageLabelAssignments:
                  value:
                    packageLabelAssignments:
                      id: 1
                      createdAt: 2024-12-02T21:31:12.515Z
                      updatedAt: 2024-12-02T21:31:12.515Z
                      organizationId: 1
                      labelId: 5
                      packageId: npm+lodash
                      packageVersion: 4.15.0
                      scope:
                        id: 1
                        name: project
                      scopeId: custom+1/my-cli-project
              schema:
                $ref: "#/components/schemas/getPackageLabelAssignments_200_response"
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Internal server error
      tags:
      - Package Labels
  /project_group:
    post:
      description: Used to create a release group.  Fails if user's organization is
        at or over the release group limit.
      operationId: createReleaseGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createReleaseGroup_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                title: My Release Group
                organizationId: 1
                policyId: 1
                securityPolicyId: 1
                qualityPolicyId: null
                publicOnPortal: true
                customReportText: null
                createdAt: 2024-07-09T21:51:20.671Z
                updatedAt: 2024-07-09T21:51:20.671Z
              schema:
                $ref: "#/components/schemas/createReleaseGroup_200_response"
          description: Created the release group
        "400":
          content:
            application/json:
              examples:
                maximumReleaseGroupsReached':
                  summary: Maximum release groups reached
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Your organization has reached the maximum number of release
                      groups.
                    name: BadRequestError
                    httpStatusCode: 400
                missingRequiredField:
                  summary: Missing required field
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Release group title is required
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: You are not permitted to add a release group to all the selected
                  teams.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: "Release groups are not enabled for your organization, or you\
            \ do not have permission to create them"
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}:
    delete:
      description: Delete a given release group
      operationId: deleteReleaseGroupById
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content: {}
          description: OK
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: You are not permitted to edit this release group.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: Not found
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
    get:
      description: Get a release group by ID
      operationId: getReleaseGroupById
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                title: My Release Group
                organizationId: 1000
                policyId: 1001
                securityPolicyId: 1002
                qualityPolicyId: null
                publicOnPortal: true
                customReportText: null
                createdAt: 2024-07-09T21:51:20.671Z
                updatedAt: 2024-07-09T21:51:20.671Z
                releases:
                - id: 1
                  title: 1.0.0
                  projectGroupId: 1
                  dependency_count: 50
                  license_count: 10
                  unresolved_licensing_issue_count: 2
                  unresolved_security_issue_count: 3
                  unresolved_quality_issue_count: 1
                  publishedOnPortal: cyclonedx_json
                  publishedAt: 2024-07-09T19:14:26Z
                  reportPath: /reports/1.0.0/sbom.cyclonedx.json
                  publishedLicenses:
                  - MIT
                  - Apache-2.0
                projects:
                - projectId: custom+1/github.com/myrepo
                  projectGroupReleaseId: 1
                  branch: main
                  revisionId: rev001
                  createdAt: 2024-07-09T19:14:26Z
                  updatedAt: 2024-07-09T19:14:26Z
                scans:
                - id: 1
                  scanned_at: 2024-07-09T19:14:26Z
                  organizationId: 100
                  projectGroupReleaseId: 200
                  createdAt: 2024-07-09T18:14:26Z
                  updatedAt: 2024-07-09T19:14:26Z
              schema:
                $ref: "#/components/schemas/getReleaseGroupById_200_response"
          description: OK
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: "ProjectGroup (id: 1) not found"
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
    put:
      description: Update a given release group
      operationId: updateReleaseGroupById
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateReleaseGroupById_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                title: Updated Release Group
                organizationId: 1000
                policyId: 1001
                securityPolicyId: 1002
                qualityPolicyId: 1003
                publicOnPortal: true
                customReportText: null
                createdAt: 2024-07-09T21:51:20.671Z
                updatedAt: 2024-07-09T21:51:20.671Z
              schema:
                $ref: "#/components/schemas/createReleaseGroup_200_response"
          description: OK
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: You are not permitted to edit this release group.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: "ProjectGroup (id: 1) not found"
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/all_projects:
    get:
      description: Returns a list of all of the projects in a given release group
        (regardless of release)
      operationId: getAllProjectsInReleaseGroup
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - git+github.com/myorg/myrepo
              - git+gitlab.com/myorg/myrepo2
              - sbom+1/some-sbom-project
              - custom+1/my-cli-project
              - git+github.com/myorg/myrepo3
              - git+github.com/fossas/fossa-cli
              schema:
                items:
                  type: string
                type: array
          description: OK
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: "Release group (id: 1) not found."
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/teams:
    get:
      description: "Returns a list of all of the teams assigned to a given release\
        \ group, and a totalCount"
      operationId: getAllReleaseGroupTeams
      parameters:
      - explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllReleaseGroupTeams_200_response"
          description: OK
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/releases:
    get:
      description: Returns a paginated list of releases for a given release group.
        You must have permission to view this release group.
      operationId: getReleaseGroupReleases
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                releases:
                - id: 1
                  title: 1.0.0
                  projectGroupId: 1
                  dependency_count: 10
                  license_count: 5
                  unresolved_licensing_issue_count: 2
                  unresolved_security_issue_count: 1
                  unresolved_quality_issue_count: 0
                  publishedOnPortal: null
                  publishedAt: null
                  reportPath: null
                  publishedLicenses: null
                - id: 2
                  title: 1.1.0
                  projectGroupId: 1
                  dependency_count: 10
                  license_count: 5
                  unresolved_licensing_issue_count: 2
                  unresolved_security_issue_count: 1
                  unresolved_quality_issue_count: 0
                  publishedOnPortal: null
                  publishedAt: null
                  reportPath: null
                  publishedLicenses: null
                - id: 3
                  title: 1.2.0
                  projectGroupId: 1
                  dependency_count: 10
                  license_count: 5
                  unresolved_licensing_issue_count: 2
                  unresolved_security_issue_count: 1
                  unresolved_quality_issue_count: 0
                  publishedOnPortal: null
                  publishedAt: null
                  reportPath: null
                  publishedLicenses: null
                total: 3
              schema:
                $ref: "#/components/schemas/getReleaseGroupReleases_200_response"
          description: OK
        "400":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2003
                message: Invalid release group ID
                name: BadRequestError
                httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: "Release group (id: 1) not found."
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release:
    get:
      deprecated: true
      description: "This endpoint is deprecated. Please use the paginated /project_group/{groupId}/releases\
        \ endpoint instead."
      operationId: deprecatedGetReleaseGroupReleases
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - id: 1
                  title: My Release Group
                  organizationId: 1000
                  policyId: 1001
                  securityPolicyId: 1002
                  qualityPolicyId: 1003
                  publicOnPortal: true
                  customReportText: null
                  createdAt: 2024-07-09T21:51:20.671Z
                  updatedAt: 2024-07-09T21:51:20.671Z
                  projects: []
                items:
                  $ref: "#/components/schemas/deprecatedGetReleaseGroupReleases_200_response_inner"
                type: array
          description: OK
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: "Release group (id: 1) not found."
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
    post:
      description: Creates a new release for a given release group
      operationId: createReleaseGroupReleases
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createReleaseGroupReleases_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                id: 1
                title: New Release Group
                organizationId: 1000
                policyId: 1001
                securityPolicyId: 1002
                qualityPolicyId: 1003
                publicOnPortal: true
                customReportText: null
                createdAt: 2024-07-09T21:51:20.671Z
                updatedAt: 2024-07-09T21:51:20.671Z
              schema:
                $ref: "#/components/schemas/createReleaseGroup_200_response"
          description: OK
        "400":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2003
                message: Release with title already exists
                name: BadRequest
                httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: You are not permitted to edit this release group.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2004
                message: "ProjectGroup (id: 1) not found"
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{projectGroupReleaseId}:
    delete:
      description: "Delete a specific release within a release group, by ID"
      operationId: deleteReleaseGroupReleaseById
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: OK - No content
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: You are not permitted to edit this release group.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: The requesting user is not allowed to edit this release group
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: "Release Group (id: 1) was not found."
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: The release group could not be found
      security:
      - ApiToken: []
      tags:
      - Release Groups
    get:
      description: "Get a specific release within a release group, by ID"
      operationId: getReleaseGroupReleaseById
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - id: 1
                  title: My Release Group
                  organizationId: 1000
                  policyId: 1001
                  securityPolicyId: 1002
                  qualityPolicyId: 1003
                  publicOnPortal: true
                  customReportText: null
                  createdAt: 2024-07-09T21:51:20.671Z
                  updatedAt: 2024-07-09T21:51:20.671Z
                  projects:
                  - projectId: custom+1/github.com/myorg/myrepo
                    projectGroupReleaseId: 1
                    branch: main
                    revisionId: rev001
                    createdAt: 2024-07-09T19:14:26Z
                    updatedAt: 2024-07-09T19:14:26Z
                    project:
                    - id: "123"
                      title: Some Project
                      description: This is a project in my organization
                      branch: main
                      type: provided
                      public: true
                      scanned: 2024-07-09T19:14:26Z
                      lastAnalyzed: 2024-07-09T19:14:26Z
                      latestRevision:
                        locator: custom+1/github.com/myorg/myrepo$rev001
                        resolve: true
                        projectId: custom+1/github.com/myorg/myrepo
                        source_type: null
                        error: null
                        message: "fix(bug): Fixes some bug"
                        latestRevisionScanId: 123
                        latestHubbleAnalysisId: null
                        revision_timestamp: 2024-07-09T19:14:26Z
                        createdAt: 2024-07-09T19:14:26Z
                        updatedAt: 2024-07-09T19:14:26Z
                        author: fossas
                        link: null
                        url: https://github.com/myorg/myrepo
                      teams:
                      - id: 1
                        organizationId: 1
                        name: Front-end Team
                        defaultRoleId: 2
                        autoAddusers: false
                        uniqueIdentifier: false
                        createdAt: 2024-06-09T19:14:26Z
                        updatedAt: 2024-06-09T19:14:26Z
                      - id: 2
                        organizationId: 1
                        name: Back-end Team
                        defaultRoleId: 3
                        autoAddusers: false
                        uniqueIdentifier: false
                        createdAt: 2024-06-09T19:15:26Z
                        updatedAt: 2024-06-09T19:15:26Z
                items:
                  $ref: "#/components/schemas/getReleaseGroupReleaseById_200_response_inner"
                type: array
          description: OK
        "404":
          content:
            application/json:
              examples:
                Release Group Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release group (id: 1) not found."
                    name: NotFoundError
                    httpStatusCode: 404
                Release Group Release Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release (id: 123) not found."
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
    put:
      description: "Update a specific release within a release group, by ID"
      operationId: updateReleaseGroupReleaseById
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              title: 2.0.0
              projects:
              - projectId: custom+1/org/project
                branch: main
                revisionId: rev001
                projectGroupReleaseId: 123
              projectsToDelete:
              - custom+1/org/deleteable
            schema:
              $ref: "#/components/schemas/updateReleaseGroupReleaseById_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createReleaseGroup_200_response"
          description: The release group could not be found
        "400":
          content:
            application/json:
              examples:
                No title:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Release title is required
                    name: BadRequestError
                    httpStatusCode: 400
                Invalid projects:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Projects must be an array
                    name: BadRequestError
                    httpStatusCode: 400
                No branch on project:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Project branch is required
                    name: BadRequestError
                    httpStatusCode: 400
                No projectId on project:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Project projectId is required
                    name: BadRequestError
                    httpStatusCode: 400
                No revisionId on project:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: Project revisionId is required
                    name: BadRequestError
                    httpStatusCode: 400
                Invalid projectsToDelete:
                  value:
                    uuid: e307c56c-1343-41c8-bd68-a2a1877f2632
                    code: 2003
                    message: The "projectsToDelete" property must be an array.
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad request
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: You are not permitted to edit this release group.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: The requesting user is not allowed to edit this release group
        "404":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: "Release Group (id: 1) was not found."
                name: NotFoundError
                httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: The release group could not be found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{projectGroupReleaseId}/revisions:
    get:
      description: Get the revisions for a given release
      operationId: getReleaseGroupReleaseRevisions
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - loc:
                    fetcher: git
                    package: user/project-12345
                    revision: rev001
                  locator: git+github/user/project-12345$rev001
                  resolved: true
                  projectId: git+github/user/project-12345
                  source_type: CommonJSPackage
                  error: null
                  message: Initial commit
                  revision_timestamp: 2024-03-28T17:34:36.062Z
                  latestRevisionScanId: 123456
                  latestHubbleAnalysisId: 789012
                  createdAt: 2024-03-28T17:34:36.062Z
                  updatedAt: 2024-03-28T17:34:36.062Z
                  author: john.doe
                  link: null
                  url: null
                  licenses:
                  - title: MIT
                    id: 12345
                    licenseId: MIT
                    revisionId: MIT
                    licenseGroupId: 123
                    ignored: false
                    projectCorrectionId: null
                    url: null
                    text: null
                    copyright: null
                    manual: false
                items:
                  $ref: "#/components/schemas/getReleaseGroupReleaseRevisions_200_response_inner"
                type: array
          description: OK
        "404":
          content:
            application/json:
              examples:
                Release Group Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release group (id: 1) not found."
                    name: NotFoundError
                    httpStatusCode: 404
                Release Group Release Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release (id: 123) not found."
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{projectGroupReleaseId}/licenses:
    get:
      description: Get the licenses for a given release
      operationId: getReleaseGroupReleaseLicenses
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: "#/components/schemas/getReleaseGroupReleaseLicenses_200_response_value"
                example:
                  MIT:
                    licenseId: MIT
                    name: MIT License
                    depth: 1
                    matches:
                    - npm+svelte$1.0.0
                    - git+github.com/org/someproject$abcd1234
                    - pip+pandas$9.8.7
                    sources:
                    - git+github.com/myorg/myrepo$rev001
                    - sbom+123/my-sbom-project$1.2.3
                    - custom+123/some-cli-project$12345
            application/x-ndjson:
              schema:
                additionalProperties:
                  $ref: "#/components/schemas/getReleaseGroupReleaseLicenses_200_response_value"
                example:
                  MIT:
                    licenseId: MIT
                    name: MIT License
                    depth: 1
                    matches:
                    - npm+svelte$1.0.0
                    - git+github.com/org/someproject$abcd1234
                    - pip+pandas$9.8.7
                    sources:
                    - git+github.com/myorg/myrepo$rev001
                    - sbom+123/my-sbom-project$1.2.3
                    - custom+123/some-cli-project$12345
          description: "An object where each key is a license ID, and each value is\
            \ an object representing that license"
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: The requesting user is not part of an organization.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: The requesting user is not allowed to view these licenses
        "404":
          content:
            application/json:
              examples:
                Release Group Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This group does not exist.
                    name: NotFoundError
                    httpStatusCode: 404
                Release Group Release Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This release does not exist.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{projectGroupReleaseId}/obligations:
    get:
      description: Get the license obligations for a given release
      operationId: getReleaseGroupReleaseObligations
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: "#/components/schemas/getReleaseGroupReleaseObligations_200_response_value_inner"
                example:
                  Include License:
                  - license: BSD-4-Clause
                    description: Describes whether the original copyright must be
                      retained.
                    revisions:
                      sbom+1/my-sbom-project:
                      - npm+svelte$1.1.1
                      custom+1/my-cli-project:
                      - npm+svelte$1.1.1
          description: "An object where each key is a license ID, and each value is\
            \ an object representing that license"
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2005
                message: The requesting user is not part of an organization.
                name: ForbiddenError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: The requesting user is not allowed to view these license obligations
        "404":
          content:
            application/json:
              examples:
                Release Group Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This group does not exist.
                    name: NotFoundError
                    httpStatusCode: 404
                Release Group Release Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This release does not exist.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{projectGroupReleaseId}/scans:
    get:
      description: Get the release scans for a given release
      operationId: getReleaseGroupReleaseScans
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 123
                scanned_at: 2024-07-02T22:56:38.769Z
                organizationId: 1
                projectGroupReleaseId: 123
                createdAt: 2024-07-02T22:56:38.769Z
                updatedAt: 2024-07-02T22:56:38.769Z
                revisionScans:
                - id: 6001
                - id: 6002
                - id: 6003
              schema:
                $ref: "#/components/schemas/getReleaseGroupReleaseScans_200_response"
          description: OK
        "404":
          content:
            application/json:
              examples:
                Release Group Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release group (id: 123) was not found"
                    name: NotFoundError
                    httpStatusCode: 404
                Release Group Release Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release (id: 123) was not found"
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{projectGroupReleaseId}/summary:
    get:
      description: "Get a summary of release group issue, project and dependency counts"
      operationId: getReleaseGroupReleaseSummary
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                license_count: 5
                dependency_count: 50
                project_count: 10
                unresolved_issue_count: 300
                unresolved_licensing_issue_count: 100
                unresolved_security_issue_count: 100
                unresolved_quality_issue_count: 100
                isSteady: true
              schema:
                $ref: "#/components/schemas/getReleaseGroupReleaseSummary_200_response"
          description: OK
        "404":
          content:
            application/json:
              examples:
                Release Group Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release group (id: 123) was not found"
                    name: NotFoundError
                    httpStatusCode: 404
                Release Group Release Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: "Release (id: 123) was not found"
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not found
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/{groupId}/release/{releaseId}/attribution/{format}:
    post:
      description: Submit a Release Group attribution report for processing.
      operationId: queueReleaseGroupAttributionReport
      parameters:
      - description: The ID of the release group
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: releaseId
        required: true
        schema:
          type: integer
        style: simple
      - explode: false
        in: path
        name: format
        required: true
        schema:
          enum:
          - HTML
          - MD
          - PDF
          - CSV
          - TXT
          - SPDX
          - SPDX_JSON
          - CYCLONEDX_JSON
          - CYCLONEDX_XML
          type: string
        style: simple
      - explode: true
        in: query
        name: includeDeepDependencies
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeDirectDependencies
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeLicenseList
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeLicenseScan
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeProjectLicense
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeCopyrightList
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeFileMatches
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeOpenVulnerabilities
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeClosedVulnerabilities
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeDependencySummary
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: includeLicenseHeaders
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: "dependencyInfoOptions[]"
        required: false
        schema:
          items:
            enum:
            - Project
            - Library
            - Authors
            - Description
            - License
            - CustomTextLicense
            - FullTextLicense
            - OtherLicenses
            - FilePath
            - Source
            - ProjectUrl
            - PackageDownloadUrl
            - DependencyPaths
            - IssueNotes
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/queueReleaseGroupAttributionReport_200_response"
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: BadRequest
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /project_group/attribution/{taskId}:
    get:
      description: Check the status of a Release Group attribution report.
      operationId: getReleaseGroupAttributionReportStatus
      parameters:
      - explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getReleaseGroupAttributionReportStatus_200_response"
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Release Groups
  /revisions/{locator}:
    patch:
      description: Update revision metadata.
      operationId: updateRevision
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateRevision_request"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getProjectRevisions_200_response_branch_value_inner"
          description: OK
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This project revision does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Revisions
  /revisions/{locator}/attribution/email:
    get:
      description: Queue a job to generate and send an email of a revision's attribution
        report
      operationId: getRevisionAttributionEmail
      parameters:
      - description: the url-encoded locator of the revision
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: The public ID
        explode: true
        in: query
        name: access
        required: false
        schema:
          type: string
        style: form
      - description: Whether to preview the report (default is false)
        explode: true
        in: query
        name: preview
        required: false
        schema:
          type: boolean
        style: form
      - description: The format of the report
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - HTML
          - MD
          - PDF
          - CSV
          - TXT
          - SPDX
          - SPDX_JSON
          - CYCLONEDX_JSON
          - CYCLONEDX_XML
          type: string
        style: form
      - description: Whether to include deep dependencies (default is true)
        explode: true
        in: query
        name: includeDeepDependencies
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include direct dependencies (default is true)
        explode: true
        in: query
        name: includeDirectDependencies
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the license list (default is false)
        explode: true
        in: query
        name: includeLicenseList
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the license scan (default is false)
        explode: true
        in: query
        name: includeLicenseScan
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the project license (default is false)
        explode: true
        in: query
        name: includeProjectLicense
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the copyright list (default is false)
        explode: true
        in: query
        name: includeCopyrightList
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the file matches (default is false)
        explode: true
        in: query
        name: includeFileMatches
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the open vulnerabilities (default is false)
        explode: true
        in: query
        name: includeOpenVulnerabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the closed vulnerabilities (default is false)
        explode: true
        in: query
        name: includeClosedVulnerabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the dependency summary (default is false)
        explode: true
        in: query
        name: includeDependencySummary
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the license headers (default is false)
        explode: true
        in: query
        name: includeLicenseHeaders
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the package labels assigned to each dependency
          (default is false).
        explode: true
        in: query
        name: includePackageLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: Exclude dependencies with particular package labels from the
          report
        explode: true
        in: query
        name: excludePackageLabels
        required: false
        schema:
          items:
            description: Set of labels to apply to a project
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Job:
                  value:
                    status: CREATED
                    jobToken: 00000000-0000-0000-0000-000000000000
                    context:
                      userId: "0"
                      locator: archive+1/test$1.2.3
                      reportOptions:
                        email: false
                        includeDeepDependencies: false
                    attempt_number: 1
                    id: 12345
                    task: GenerateRevisionReport
                    maxRetries: 10
                    scheduledStartTime: 2024-04-23T18:09:59.000Z
                    updatedAt: 2024-04-23T18:09:56.272Z
                    createdAt: 2024-04-23T18:09:56.272Z
                    started: null
                    finished: null
                    pod: null
              schema:
                $ref: "#/components/schemas/getRevisionAttributionEmail_200_response"
          description: A JSON representation of the Task in our Database
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                No Revisions found:
                  value: Not Found
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Revisions
  /revisions/{locator}/attribution/json:
    get:
      description: Return a JSON report of a revision's attribution
      operationId: getRevisionAttributionJSON
      parameters:
      - description: the url-encoded locator of the revision
        explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to preview the report (default is false)
        explode: true
        in: query
        name: preview
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include deep dependencies (default is true)
        explode: true
        in: query
        name: includeDeepDependencies
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include hash and version data (default is false)
        explode: true
        in: query
        name: includeHashAndVersionData
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the copyright list (default is false)
        explode: true
        in: query
        name: includeCopyrightList
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the file matches (default is false)
        explode: true
        in: query
        name: includeFileMatches
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the open vulnerabilities (default is false)
        explode: true
        in: query
        name: includeOpenVulnerabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the closed vulnerabilities (default is false)
        explode: true
        in: query
        name: includeClosedVulnerabilities
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the notice files match data (default is false)
        explode: true
        in: query
        name: includeNoticeFiles
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to include the package labels assigned to each dependency
          (default is false)
        explode: true
        in: query
        name: includePackageLabels
        required: false
        schema:
          type: boolean
        style: form
      - description: Exclude dependencies with particular package labels from the
          report
        explode: true
        in: query
        name: excludePackageLabels
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Report:
                  value:
                    project:
                      name: My Project
                      revision: 1.0.0
                    directDependencies:
                    - package: My Package
                      source: My Source
                      version: 1.0.0
                      hash: "1234"
                      authors:
                      - Author 1
                      - Author 2
                      description: My Description
                      licenses:
                      - name: MIT
                        attribution: Attribution...
                      otherLicenses:
                      - name: My Other License
                        attribution: My Other Attribution
                      projectUrl: http://example.com
                      dependencyPaths:
                      - "1"
                      notes:
                      - My Note
                      downloadUrl: http://example.com
                      isGolang: false
                      title: My Title
                      noticeFiles: []
                      packageLabels:
                      - globally applied label
                      - project applied label
                      - revision applied label
                      - my custom label
                    deepDependencies:
                    - package: My Package
                      source: My Source
                      version: 1.0.0
                      hash: "1234"
                      authors:
                      - Author 1
                      - Author 2
                      description: My Description
                      licenses:
                      - name: MIT
                        attribution: Attribution...
                      otherLicenses:
                      - name: My Other License
                        attribution: My Other Attribution
                      projectUrl: http://example.com
                      dependencyPaths:
                      - "1"
                      notes:
                      - My Note
                      downloadUrl: http://example.com
                      isGolang: false
                      title: My Title
                      noticeFiles:
                      - value:
                          id: 1
                          revisionId: archive+1/NoticeFileTester$1.0
                          path: vendored/notice-file-tester/NOTICE.txt
                          contents: |
                            Apache Commons Lang
                            Copyright 2001-2017 The Apache Software Foundation

                            This product includes software developed at
                            The Apache Software Foundation (http://www.apache.org/).

                            This product includes software from the Spring Framework,
                            under the Apache License 2.0 (see: StringUtils.containsWhitespace())
                          copyrights:
                          - 2001-2017 The Apache Software Foundation
                          createdAt: 2024-10-04T15:56:37.579Z
                          updatedAt: 2024-10-04T15:56:37.579Z
                          corrected: false
                          ignored: false
                      packageLabels:
                      - dev-dependency-label
                    licenses:
                      MIT: MIT License
                    copyrightsByLicense:
                      MIT: Copyright 2020
                    noticeFiles:
                    - value:
                        id: 1
                        revisionId: archive+1/NoticeFileTester$1.0
                        path: vendored/notice-file-tester/NOTICE.txt
                        contents: |
                          Apache Commons Lang
                          Copyright 2001-2017 The Apache Software Foundation

                          This product includes software developed at
                          The Apache Software Foundation (http://www.apache.org/).

                          This product includes software from the Spring Framework,
                          under the Apache License 2.0 (see: StringUtils.containsWhitespace())
                        copyrights:
                        - 2001-2017 The Apache Software Foundation
                        createdAt: 2024-10-04T15:56:37.579Z
                        updatedAt: 2024-10-04T15:56:37.579Z
                        corrected: false
                        ignored: false
              schema:
                $ref: "#/components/schemas/getRevisionAttributionJSON_200_response"
          description: A JSON Report of the Revision's attribution
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                No Revisions found:
                  value: Not Found
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Revisions
  /revisions/{locator}/report/remediation-guidance:
    get:
      description: Returns the Remediation Guidance report for a given revision
      operationId: fixPlans
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to preview the report (default is false)
        explode: true
        in: query
        name: preview
        required: false
        schema:
          type: boolean
        style: form
      - description: What format to return the report in (default is PDF)
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - HTML
          - PDF
          - JSON
          type: string
        style: form
      - description: Whether to bundle the report with json file and return as a zip
          (default is false)
        explode: true
        in: query
        name: bundle
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to exclude Quick Wins section (default is false)
        explode: true
        in: query
        name: excludeQuickWins
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to exclude High Priority section (default is false)
        explode: true
        in: query
        name: excludeHighPriority
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to exclude Low Priority section (default is false)
        explode: true
        in: query
        name: excludedLowPriority
        required: false
        schema:
          type: boolean
        style: form
      - description: Whether to exclude Outdated Dependencies section (default is
          false)
        explode: true
        in: query
        name: excludeOutdatedDependencies
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/pdf:
              schema:
                format: binary
                type: string
            application/zip:
              schema:
                format: binary
                type: string
            text/html:
              schema:
                type: string
          description: OK
        "400":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 2003
                message: No locator provided!
                name: BadRequestError
                httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: BadRequest
        "403":
          content:
            application/json:
              example:
                uuid: 00000000-0000-0000-0000-000000000000
                code: 1006
                message: fixPlanReport is not enabled in this organization.
                name: FeatureAccessRestrictedError
                httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      tags:
      - Revisions
  /revisions/{locator}/original-sbom:
    get:
      description: "Fetch the original user-uploaded SBOM for the given locator, whcih\
        \ must be the locator for an SBOM project."
      operationId: originalSbom
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "302":
          content:
            text/plain:
              schema:
                type: string
          description: Found - a redirect to the original SBOM document
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This project revision does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      tags:
      - Revisions
  /revisions/{locator}/sbom-analysis:
    get:
      description: "Fetch the SBOM analysis for the given locator, which must be the\
        \ locator for an SBOM project."
      operationId: sbomAnalysis
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                SbomAnalysis:
                  value:
                    sbomFile:
                      status: success
                      analysis:
                      - status: success
                        description: File is recognized as an SBOM
                      - status: success
                        description: Components can be identified
                      - status: success
                        description: Relationship between components can be mapped
                    requiredFields:
                      status: error
                      analysis:
                      - status: error
                        description: Includes component name
                        value: 1/3 components
                      - status: success
                        description: Includes component version
                        value: 3/3 components
                      - status: unknown
                        description: Includes SBOM author
                        value: unknown
                      - status: success
                        description: Includes creation timestamp
                        value: 2022-11-03T07:10:10.000Z
                      - status: success
                        description: Includes relationship data (SPDX)
                        value: 3/3 components
                      - status: success
                        description: Includes PURL (Package URL)
                        value: 3/3 components
                      - status: success
                        description: Uses minimum version of 2.2 or greater
                        value: SPDX-2.3
                      - status: success
                        description: Includes supplier
                        value: 3/3 components
                    dependencyScan:
                      status: success
                      analysis:
                      - status: success
                        description: All dependencies are identified and analyzed
                        value: 1 unknown / 1 failed
              schema:
                $ref: "#/components/schemas/sbomAnalysis_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                InvalidSBOMProject:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: The revision is not associated with an SBOM
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: BadRequest
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This project revision does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      tags:
      - Revisions
      x-internal: true
  /revisions/{locator}/notice-files:
    get:
      description: Returns all notice files that were found in the distributed source
        code
      operationId: noticeFiles
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                NoticeFile:
                  value:
                    id: 1
                    revisionId: archive+1/NoticeFileTester$1.0
                    path: vendored/notice-file-tester/NOTICE.txt
                    contents: |
                      Apache Commons Lang
                      Copyright 2001-2017 The Apache Software Foundation

                      This product includes software developed at
                      The Apache Software Foundation (http://www.apache.org/).

                      This product includes software from the Spring Framework,
                      under the Apache License 2.0 (see: StringUtils.containsWhitespace())
                    copyrights:
                    - 2001-2017 The Apache Software Foundation
                    createdAt: 2024-10-04T15:56:37.579Z
                    updatedAt: 2024-10-04T15:56:37.579Z
                    corrected: false
                    ignored: false
              schema:
                items:
                  $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner_noticeFiles_inner"
                type: array
          description: OK
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This project revision does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      tags:
      - Revisions
  /builds:
    get:
      description: Retrieves a list of builds.
      operationId: getBuilds
      parameters:
      - description: The revision locator to filter builds to
        explode: true
        in: query
        name: locator
        required: false
        schema:
          type: string
        style: form
      - description: The project locator to filter builds to
        explode: true
        in: query
        name: projectId
        required: false
        schema:
          type: string
        style: form
      - description: The start date to filter builds to
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date to filter builds to
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The number of builds to return
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The sort order(s) to apply to the builds
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - cliVersionId
          - createdAt
          - id
          - locator
          - ownerId
          - taskId
          - updatedAt
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                build:
                  value:
                  - id: 1
                    locator: git+gitproject$1.2.3
                    ownerId: 1
                    error: error
                    warnings:
                    - warning 1
                    - warning 2
                    provided: true
                    createdAt: 2021-01-01T00:00:00Z
                    updatedAt: 2021-01-01T00:00:00Z
                    taskId: 1
                    cliVersionId: 1
                    revision:
                      locator: git+gitproject$1.2.3
                      projectId: git+gitproject
                      message: message
                    task:
                      status: SUCCEEDED
                      started: 2021-01-01T00:00:00Z
                      finished: 2021-01-01T00:00:00Z
                      createdAt: 2021-01-01T00:00:00Z
                      updatedAt: 2021-01-01T00:00:00Z
                      attempt_number: 1
                      maxRetries: 1
                  - id: 2
                    locator: git+gitproject$1.2.3
                    ownerId: 1
                    error: error
                    warnings:
                    - warning 1
                    - warning 2
                    provided: true
                    createdAt: 2021-01-01T00:00:00Z
                    updatedAt: 2021-01-01T00:00:00Z
                    taskId: 2
                    cliVersionId: 1
                    revision:
                      locator: git+gitproject$1.2.3
                      projectId: git+gitproject
                      message: message
                    task:
                      status: SUCCEEDED
                      started: 2021-01-01T00:00:00Z
                      finished: 2021-01-01T00:00:00Z
                      createdAt: 2021-01-01T00:00:00Z
                      updatedAt: 2021-01-01T00:00:00Z
                      attempt_number: 1
                      maxRetries: 1
              schema:
                items:
                  $ref: "#/components/schemas/getBuilds_200_response_inner"
                type: array
          description: Build list
        "400":
          content:
            application/json:
              examples:
                invalid query parameters:
                  value:
                    uuid: 12345678-1234-1234-1234-123456789012
                    code: 400
                    message: '''locator'' or ''projectId'' must be passed in to this
                      endpoint.'
                    name: MalformedPayloadError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Malformed Payload
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Builds
  /counts/builds:
    get:
      description: Retrieves a count of builds.
      operationId: getBuildsCount
      parameters:
      - description: The revision locator to filter builds to
        explode: true
        in: query
        name: locator
        required: false
        schema:
          type: string
        style: form
      - description: The project locator to filter builds to
        explode: true
        in: query
        name: projectId
        required: false
        schema:
          type: string
        style: form
      - description: The start date to filter builds to
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date to filter builds to
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The number of builds to return
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The page number to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The sort order(s) to apply to the builds
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - cliVersionId
          - createdAt
          - id
          - locator
          - ownerId
          - taskId
          - updatedAt
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                build:
                  value: 4
              schema:
                type: number
          description: Build counts
        "400":
          content:
            application/json:
              examples:
                invalid query parameters:
                  value:
                    uuid: 12345678-1234-1234-1234-123456789012
                    code: 400
                    message: '''locator'' or ''projectId'' must be passed in to this
                      endpoint.'
                    name: MalformedPayloadError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Malformed Payload
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Builds
  /users:
    get:
      description: Get all users in a user's organization
      operationId: getAllUsers
      parameters:
      - description: The numbers of users being returned
        explode: true
        in: query
        name: count
        required: false
        schema:
          type: integer
        style: form
      - description: The page number of users being returned
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                user:
                  value:
                  - id: 1
                    username: user1
                    email: email@email.com
                    email_verified: true
                    demo: false
                    super: false
                    joined: 2020-01-01
                    last_visit: 2020-01-01
                    terms_agreed: 2020-01-01
                    full_name: User One
                    phone: 123-456-7890
                    role: User
                    organizationId: 1
                    sso_only: false
                    enabled: true
                    has_set_password: true
                    install_admin: false
                    createdAt: 2020-01-01T00:00:00Z
                    updatedAt: 2020-01-01T00:00:00Z
                    userRole:
                      roleId: 1
                      role:
                        id: 1
                        organizationId: 1
                        isCustom: false
                        scope: organization
                        name: User
                    tokens: []
                    github:
                      name: user1
                      email: null
                      avatar_url: https://avatars.githubusercontent.com/u/3067666?v=4
                    organization:
                      id: 1
                      title: Organization One
                      access_level: premium
              schema:
                items:
                  $ref: "#/components/schemas/getAllUsers_200_response_inner"
                type: array
          description: OK
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Users
  /users/{id}:
    get:
      description: Get user by ID
      operationId: getUser
      parameters:
      - description: The user's unique identifier
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                user:
                  value:
                    id: 1
                    username: user1
                    email: email@email.com
                    email_verified: true
                    demo: false
                    super: false
                    joined: 2020-01-01
                    last_visit: 2020-01-01
                    terms_agreed: 2020-01-01
                    full_name: User One
                    phone: 123-456-7890
                    role: User
                    organizationId: 1
                    sso_only: false
                    enabled: true
                    has_set_password: true
                    install_admin: false
                    createdAt: 2020-01-01T00:00:00Z
                    updatedAt: 2020-01-01T00:00:00Z
                    userRole:
                      roleId: 1
                      role:
                        id: 1
                        organizationId: 1
                        isCustom: false
                        scope: organization
                        name: User
                    tokens: []
                    github:
                      name: user1
                      email: null
                      avatar_url: https://avatars.githubusercontent.com/u/3067666?v=4
                    organization:
                      id: 1
                      title: Organization One
                      access_level: premium
              schema:
                items:
                  properties:
                    id:
                      description: The user's unique identifier
                    username:
                      description: The user's username
                    email:
                      description: The user's email address
                    email_verified:
                      description: Whether the user's email address has been verified
                    demo:
                      description: Whether the user is a demo user
                    super:
                      description: Whether the user is a super user
                    joined:
                      description: The date the user joined the organization
                      format: date-time
                    last_visit:
                      description: The date the user last visited the organization
                      format: date-time
                    terms_agreed:
                      description: The date the user agreed to the organization's
                        terms
                      format: date-time
                    full_name:
                      description: The user's full name
                    phone:
                      description: The user's phone number
                    role:
                      description: The user's role in the organization
                    organizationId:
                      description: The organization the user belongs to
                    sso_only:
                      description: Whether the user is SSO only
                    enabled:
                      description: Whether the user is enabled
                    has_set_password:
                      description: Whether the user has set a password
                    install_admin:
                      description: Whether the user is an install admin
                    createdAt:
                      description: The date the user was created
                      format: date-time
                    updatedAt:
                      description: The date the user was last updated
                      format: date-time
                    userRole:
                      properties:
                        roleId:
                          description: The user's Organization role ID
                        role:
                          properties:
                            id:
                              description: The role's unique identifier
                            organizationId:
                              description: The organization the role belongs to
                            isCustom:
                              description: Whether the role is custom
                            name:
                              description: The role's name
                            scope:
                              description: The role's scope
                    tokens:
                      items:
                        properties:
                          id:
                            description: The token's unique identifier
                          name:
                            description: The token's name
                          isDisabled: {}
                          updatedAt:
                            description: The date the token was last updated
                            format: date-time
                          createdAt:
                            description: The date the token was created
                            format: date-time
                          meta:
                            properties:
                              pushOnly:
                                description: Whether the token is push only
                            defaultPolicyId:
                              type: integer
                              description: The token's default licensing policy ID
                            defaultSecurityPolicyId:
                              type: integer
                              description: The token's default security policy ID
                            defaultQualityPolicyId:
                              type: integer
                              description: The token's default quality policy ID
                    teamUsers:
                      items:
                        properties:
                          roleId:
                            description: The user's role ID
                          team:
                            properties:
                              id:
                                description: The team's unique identifier
                              name:
                                description: The team's name
                    organization:
                      properties:
                        id:
                          description: The organization's unique identifier
                        title:
                          description: The organization's title
                        access_level:
                          description: The organization's access level
                    github:
                      properties:
                        name:
                          description: The user's GitHub username
                        email:
                          description: The user's GitHub email address
                        avatar_url:
                          description: The user's GitHub avatar URL
                    bitbucketCloud:
                      properties:
                        name:
                          description: The user's Bitbucket Cloud username
                        email:
                          description: The user's Bitbucket Cloud email address
                        avatar_url:
                          description: The user's Bitbucket Cloud avatar URL
                type: object
          description: OK
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2005
                    message: User does not have permission to view this resource
                    name: ForbiddenError
                    httpStatusCode: 403
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Users
  /v2/revisions/{locator}/dependencies:
    get:
      description: Get the dependencies for a given project revision
      operationId: getProjectDependencies
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      - description: Filter dependencies by locators (exact match)
        explode: true
        in: query
        name: "locators[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter dependencies by title
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter dependencies by status
        explode: true
        in: query
        name: "status[]"
        required: false
        schema:
          items:
            enum:
            - analyzing
            - analyzed
            - failed
            - unknown
            type: string
          type: array
        style: form
      - description: Filter dependencies by depth
        explode: true
        in: query
        name: "depth[]"
        required: false
        schema:
          items:
            enum:
            - direct
            - transitive
            type: string
          type: array
        style: form
      - description: Filter dependencies by depth (for container projects)
        explode: true
        in: query
        name: "layerDepth[]"
        required: false
        schema:
          items:
            enum:
            - base
            - other
            type: string
          type: array
        style: form
      - description: Filter dependencies by the presence of issues
        explode: true
        in: query
        name: "hasIssues[]"
        required: false
        schema:
          items:
            enum:
            - hasIssues
            - hasLicensingIssues
            - hasQualityIssues
            - hasVulnIssues
            - noIssues
            type: string
          type: array
        style: form
      - description: Filter dependencies by licenses
        explode: true
        in: query
        name: "licenses[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter dependencies by package manager
        explode: true
        in: query
        name: "fetchers[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Includes ignored dependencies
        explode: true
        in: query
        name: showIgnored
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter dependencies by confidence
        explode: true
        in: query
        name: "confidence[]"
        required: false
        schema:
          items:
            enum:
            - High
            - Medium
            - Low
            - Unknown
            type: string
          type: array
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                dependencies:
                  value:
                    count: 2
                    dependencies:
                    - locator: npm+foo$1.2.3
                      title: foo
                      isManual: false
                      isIgnored: false
                      isUnknown: false
                      licenses:
                      - MIT
                      - Apache
                      declaredLicenses:
                      - MIT
                      depth: 1
                      originPaths:
                      - package.json
                      status:
                        error: ""
                        resolved: true
                        unsupported: false
                        analyzing: false
                      issues:
                      - id: 123
                        type: policy_conflict
                        status: active
                        license: Apache
                      rootProjects:
                      - title: myproject
                        revision: custom+123/myproject$1.2.3
                        branch: main
                      cpes:
                      - cpe:2.3:a:foo:foo:1.2.3:*:*:*:*:*:*
                    - locator: git+bar$1.2.3
                      title: bar
                      isManual: false
                      isIgnored: false
                      isUnknown: false
                      licenses:
                      - MIT
                      declaredLicenses:
                      - MIT
                      depth: 2
                      originPaths:
                      - package.json
                      status:
                        error: ""
                        resolved: true
                        unsupported: false
                        analyzing: false
                      issues:
                      - id: 321
                        type: vulnerability
                        status: active
                        cvssScore: 5.4
                      rootProjects:
                      - title: myproject
                        revision: custom+123/myproject$1.2.3
                        branch: main
                      cpes:
                      - cpe:2.3:a:bar:bar:1.2.3:*:*:*:*:*:*
                      version: 1.2.3
              schema:
                $ref: "#/components/schemas/getProjectDependencies_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This project revision does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Dependencies
  /v2/revisions/{locator}/dependencies/package-managers:
    get:
      description: Get the package managers present in the dependencies of a given
        project revision
      operationId: getProjectDependencyPackageManagers
      parameters:
      - explode: false
        in: path
        name: locator
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                packageManagers:
                  value:
                    packageManagers:
                    - npm
                    - mvn
              schema:
                $ref: "#/components/schemas/getIssuePackageManagers_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This project revision does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Dependencies
  /v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies:
    get:
      description: Get the dependencies for a given release group
      operationId: getReleaseGroupDependencies
      parameters:
      - explode: false
        in: path
        name: projectGroupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      - description: Filter dependencies by locators (exact match)
        explode: true
        in: query
        name: "locators[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter dependencies by title
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter dependencies by status
        explode: true
        in: query
        name: "status[]"
        required: false
        schema:
          items:
            enum:
            - analyzing
            - analyzed
            - failed
            - unknown
            type: string
          type: array
        style: form
      - description: Filter dependencies by depth
        explode: true
        in: query
        name: "depth[]"
        required: false
        schema:
          items:
            enum:
            - direct
            - transitive
            type: string
          type: array
        style: form
      - description: Filter dependencies by depth (for container projects)
        explode: true
        in: query
        name: "layerDepth[]"
        required: false
        schema:
          items:
            enum:
            - base
            - other
            type: string
          type: array
        style: form
      - description: Filter dependencies by the presence of issues
        explode: true
        in: query
        name: "hasIssues[]"
        required: false
        schema:
          items:
            enum:
            - hasIssues
            - hasLicensingIssues
            - hasQualityIssues
            - hasVulnIssues
            - noIssues
            type: string
          type: array
        style: form
      - description: Filter dependencies by licenses
        explode: true
        in: query
        name: "licenses[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter dependencies by package manager
        explode: true
        in: query
        name: "fetchers[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Includes ignored dependencies
        explode: true
        in: query
        name: showIgnored
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter release group dependencies by root projects
        explode: true
        in: query
        name: "rootProjects[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The specific page of data to return
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: The number of items to return in each page of results
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 25
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                dependencies:
                  value:
                    count: 2
                    dependencies:
                    - locator: npm+foo$1.2.3
                      title: foo
                      isManual: false
                      isIgnored: false
                      isUnknown: false
                      licenses:
                      - MIT
                      - Apache
                      declaredLicenses:
                      - MIT
                      depth: 1
                      originPaths:
                      - package.json
                      status:
                        error: ""
                        resolved: true
                        unsupported: false
                        analyzing: false
                      issues:
                      - id: 123
                        type: policy_conflict
                        status: active
                        license: Apache
                      rootProjects:
                      - title: myproject
                        revision: custom+123/myproject$1.2.3
                        branch: main
                      cpes:
                      - cpe:2.3:a:foo:foo:1.2.3:*:*:*:*:*:*
                    - locator: git+bar$1.2.3
                      title: bar
                      isManual: false
                      isIgnored: false
                      isUnknown: false
                      licenses:
                      - MIT
                      declaredLicenses:
                      - MIT
                      depth: 2
                      originPaths:
                      - package.json
                      status:
                        error: ""
                        resolved: true
                        unsupported: false
                        analyzing: false
                      issues:
                      - id: 321
                        type: vulnerability
                        status: active
                        cvssScore: 5.4
                      rootProjects:
                      - title: myproject
                        revision: custom+123/myproject$1.2.3
                        branch: main
                      cpes:
                      - cpe:2.3:a:bar:bar:1.2.3:*:*:*:*:*:*
                      version: 1.2.3
              schema:
                $ref: "#/components/schemas/getProjectDependencies_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This release does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Dependencies
  /v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies/package-managers:
    get:
      description: Get the package managers present in the dependencies of a given
        release group
      operationId: getReleaseGroupDependencyPackageManagers
      parameters:
      - explode: false
        in: path
        name: projectGroupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                packageManagers:
                  value:
                    packageManagers:
                    - npm
                    - mvn
              schema:
                $ref: "#/components/schemas/getIssuePackageManagers_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This release does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Dependencies
  /v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/root-projects:
    get:
      description: Get the root projects present in the dependencies of a given release
        group
      operationId: getReleaseGroupDependencyRootProjects
      parameters:
      - explode: false
        in: path
        name: projectGroupId
        required: true
        schema:
          type: integer
        style: simple
      - description: The ID of the release
        explode: false
        in: path
        name: projectGroupReleaseId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                rootProjects:
                  value:
                    rootProjects:
                    - title: myproject
                      revision: custom+123/myproject$1.2.3
                      branch: main
              schema:
                $ref: "#/components/schemas/getReleaseGroupDependencyRootProjects_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: This release does not exist
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Dependencies
  /vulns/{vulnId}/revisions/{revisionId}/remediation-guidance:
    get:
      description: Get remediation guidance for a given vuln id and revision id
      operationId: getRemediationGuidance
      parameters:
      - explode: false
        in: path
        name: vulnId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: revisionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_remediation"
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Vulnerabilities
  /organizations/{id}/settings/general:
    get:
      description: Get general settings for an organization
      operationId: getOrganizationGeneralSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                GeneralOrganizationSettings:
                  value:
                    labels:
                    - label: critical
                      id: 1
                      projectCount: 10
                    title: title
                    email: test@fossa.com
                    defaultRoleId: 1
                    dependencySignatures: "1,2,3"
                    disableNonCustomTeamUserRoles: false
              schema:
                $ref: "#/components/schemas/getOrganizationGeneralSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update general settings for an organization
      operationId: updateOrganizationGeneralSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              EditingGeneralOrganizationSettings:
                value:
                  labels:
                  - critical
                  - low
                  title: title
                  email: test@fossa.com
                  defaultRoleId: 1
                  dependencySignatures: "1,2,3"
                  disableNonCustomTeamUserRoles: false
            schema:
              $ref: "#/components/schemas/updateOrganizationGeneralSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "422":
          content:
            application/json:
              examples:
                Invalid Settings Payload:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Couldn't update organization settings
                    name: InvalidPayloadError
                    httpStatusCode: 422
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unprocessable Entity
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/privacy:
    get:
      description: Get project privacy settings for an organization
      operationId: getOrganizationProjectPrivacySettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                defaultProjectPrivacy: private
              schema:
                $ref: "#/components/schemas/getOrganizationProjectPrivacySettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate project privacy settings for an organization
      operationId: propagateOrganizationProjectPrivacySettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - defaultProjectPrivacy
            schema:
              items:
                enum:
                - defaultProjectPrivacy
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update project privacy settings for an organization
      operationId: updateOrganizationProjectPrivacySettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
              defaultProjectPrivacy: private
            schema:
              $ref: "#/components/schemas/getOrganizationProjectPrivacySettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/github-status-checks:
    get:
      description: Get github status check settings for an organization
      operationId: getOrganizationGithubStatusCheckSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                projectDefaultAutomatedIntegrationhookTimeout: 150
                projectDefaultProvidedIntegrationhookTimeout: 80
                projectDefaultIntegrationhookFailState: ERROR
              schema:
                $ref: "#/components/schemas/getOrganizationGithubStatusCheckSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate github status check settings for an organization
      operationId: propagateOrganizationGithubStatusCheckSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - projectDefaultAutomatedIntegrationhookTimeout
            - projectDefaultProvidedIntegrationhookTimeout
            - projectDefaultIntegrationhookFailState
            schema:
              items:
                enum:
                - projectDefaultAutomatedIntegrationhookTimeout
                - projectDefaultProvidedIntegrationhookTimeout
                - projectDefaultIntegrationhookFailState
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update github status check settings for an organization
      operationId: updateOrganizationGithubStatusCheckSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getOrganizationGithubStatusCheckSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/issues/licensing:
    get:
      description: Get licensing issue settings for an organization
      operationId: getOrganizationLicensingIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                defaultPolicyId: 1
                projectDefaultLicensingIssueScanningEnabled: true
                projectDefaultLicensingStatusCheckEnabled: true
                projectDefaultStatusCheckFilterLicensing: 1
              schema:
                $ref: "#/components/schemas/getOrganizationLicensingIssueSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate licensing issue settings for an organization
      operationId: propagateOrganizationLicensingIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                enum:
                - defaultPolicyId
                - projectDefaultLicensingIssueScanningEnabled
                - projectDefaultLicensingStatusCheckEnabled
                - projectDefaultStatusCheckFilterLicensing
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update licensing issue settings for an organization
      operationId: updateOrganizationLicensingIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getOrganizationLicensingIssueSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "422":
          content:
            application/json:
              examples:
                Invalid Settings Payload:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Couldn't update organization settings
                    name: InvalidPayloadError
                    httpStatusCode: 422
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unprocessable Entity
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/issues/security:
    get:
      description: Get security issue settings for an organization
      operationId: getOrganizationSecurityIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                SecurityIssueSettings:
                  value:
                    defaultSecurityPolicyId: 1
                    projectDefaultSecurityIssueScanningEnabled: true
                    projectDefaultSecurityStatusCheckEnabled: true
                    projectDefaultStatusCheckFilterVulnerability: 4
              schema:
                $ref: "#/components/schemas/getOrganizationSecurityIssueSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate security issue settings for an organization
      operationId: propagateOrganizationSecurityIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - defaultSecurityPolicyId
            - projectDefaultSecurityIssueScanningEnabled
            - projectDefaultSecurityStatusCheckEnabled
            - projectDefaultStatusCheckFilterVulnerability
            schema:
              items:
                enum:
                - defaultSecurityPolicyId
                - projectDefaultSecurityIssueScanningEnabled
                - projectDefaultSecurityStatusCheckEnabled
                - projectDefaultStatusCheckFilterVulnerability
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update security issue settings for an organization
      operationId: updateOrganizationSecurityIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              SecurityIssueSettings:
                value:
                  defaultSecurityPolicyId: 1
                  projectDefaultSecurityIssueScanningEnabled: true
                  projectDefaultSecurityStatusCheckEnabled: true
                  projectDefaultStatusCheckFilterVulnerability: 4
            schema:
              $ref: "#/components/schemas/getOrganizationSecurityIssueSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "422":
          content:
            application/json:
              examples:
                Invalid Settings Payload:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Couldn't update organization settings
                    name: InvalidPayloadError
                    httpStatusCode: 422
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unprocessable Entity
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/issues/quality:
    get:
      description: Get quality issue settings for an organization
      operationId: getOrganizationQualityIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                QualityIssueSettings:
                  value:
                    defaultQualityPolicyId: 1
                    projectDefaultQualityIssueScanningEnabled: true
                    projectDefaultQualityStatusCheckEnabled: true
                    projectDefaultStatusCheckFilterQuality: 1
              schema:
                $ref: "#/components/schemas/getOrganizationQualityIssueSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate quality issue settings for an organization
      operationId: propagateOrganizationQualityIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - defaultQualityPolicyId
            - projectDefaultQualityIssueScanningEnabled
            - projectDefaultQualityStatusCheckEnabled
            - projectDefaultStatusCheckFilterQuality
            schema:
              items:
                enum:
                - defaultQualityPolicyId
                - projectDefaultQualityIssueScanningEnabled
                - projectDefaultQualityStatusCheckEnabled
                - projectDefaultStatusCheckFilterQuality
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update quality issue settings for an organization
      operationId: updateOrganizationQualityIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              QualityIssueSettings:
                value:
                  defaultQualityPolicyId: 1
                  projectDefaultQualityIssueScanningEnabled: true
                  projectDefaultQualityStatusCheckEnabled: true
                  projectDefaultStatusCheckFilterQuality: 1
            schema:
              $ref: "#/components/schemas/getOrganizationQualityIssueSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "422":
          content:
            application/json:
              examples:
                Invalid Settings Payload:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Couldn't update organization settings
                    name: InvalidPayloadError
                    httpStatusCode: 422
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unprocessable Entity
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/issues/container:
    get:
      description: Get container issue settings for an organization
      operationId: getOrganizationContainerIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                ContainerIssueSettings:
                  value:
                    projectDefaultExcludeBaseLayerIssuesLicensing: true
                    projectDefaultExcludeBaseLayerIssuesSecurity: true
                    projectDefaultExcludeBaseLayerIssuesQuality: true
              schema:
                $ref: "#/components/schemas/getOrganizationContainerIssueSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate container issue settings for an organization
      operationId: propagateOrganizationContainerIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - projectDefaultExcludeBaseLayerIssuesLicensing
            - projectDefaultExcludeBaseLayerIssuesSecurity
            - projectDefaultExcludeBaseLayerIssuesQuality
            schema:
              items:
                enum:
                - projectDefaultExcludeBaseLayerIssuesLicensing
                - projectDefaultExcludeBaseLayerIssuesSecurity
                - projectDefaultExcludeBaseLayerIssuesQuality
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update container issue settings for an organization
      operationId: updateOrganizationContainerIssueSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              ContainerIssueSettings:
                value:
                  projectDefaultExcludeBaseLayerIssuesLicensing: true
                  projectDefaultExcludeBaseLayerIssuesSecurity: true
                  projectDefaultExcludeBaseLayerIssuesQuality: true
            schema:
              $ref: "#/components/schemas/getOrganizationContainerIssueSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /api/v1/share-requests:
    get:
      description: Get a list of share requests created by the caller's organization.
        This lists all SBOM revisions that have been shared with other organizations.
      operationId: getShareRequests
      parameters:
      - description: Filter share requests by project locator
        explode: true
        in: query
        name: projectLocator
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                With share requests:
                  value:
                    shareRequests:
                    - originRevisionId: sbom+123/project-name$1.0.0
                      originProjectLocator: sbom+123/project-name
                      projectTitle: SBOM Project
                      sharedOrganizationId: 456
                      sharedAt: 2024-05-15T10:30:00Z
                      receivingOrganizationName: Partner Organization
                No share requests:
                  value:
                    shareRequests: []
                Filtered by project:
                  value:
                    shareRequests:
                    - originRevisionId: sbom+123/project-name$1.0.0
                      originProjectLocator: sbom+123/project-name
                      projectTitle: SBOM Project
                      sharedOrganizationId: 456
                      sharedAt: 2024-05-15T10:30:00Z
                      receivingOrganizationName: Partner Organization
              schema:
                $ref: "#/components/schemas/getShareRequests_200_response"
          description: A list of share requests created by the caller's organization.
        "401":
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    message: Unauthorized
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Feature flag not enabled:
                  value:
                    message: sbomSharing is not enabled in this organization.
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - SBOM
    post:
      description: Create a new share request for an SBOM revision. This endpoint
        queues a job to process the share request and returns a task reference.
      operationId: createShareRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createShareRequest_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createShareRequest_201_response"
          description: The share request was created successfully and a job was queued
            to process it.
        "400":
          content:
            application/json:
              examples:
                Invalid request body:
                  value:
                    message: "Invalid request body: revisionId is required"
                Invalid revision type:
                  value:
                    message: Only revisions from SBOM projects can be shared.
                Invalid team:
                  value:
                    message: You do not have permission to share with this team.
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                Feature flag not enabled:
                  value:
                    message: sbomSharing is not enabled in this organization.
                No permission:
                  value:
                    message: You do not have permission to share this revision.
                Not authorized:
                  value:
                    message: You are not authorized to share with this organization.
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Revision not found:
                  value:
                    message: Revision with ID sbom+999/nonexistent$1.0.0 not found
                      or you don't have permission to access it.
                Shared organization not found:
                  value:
                    message: Shared organization with ID 9999 not found.
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - SBOM
  /api/v1/shared-organizations:
    get:
      description: Get a list of organizations that are linked to the caller's organization
        for SBOM sharing. This endpoint returns both organizations the caller can
        share with and organizations that have shared with the caller.
      operationId: getLinkedOrganizations
      responses:
        "200":
          content:
            application/json:
              examples:
                With linked organizations:
                  value:
                    organizationsToShareWith:
                    - sharedOrganizationId: 123
                      originOrganizationName: My Organization
                      receivingOrganizationName: Partner Company
                    organizationsThatHaveSharedWithMe:
                    - sharedOrganizationId: 456
                      originOrganizationName: Source Company
                      receivingOrganizationName: My Organization
                No linked organizations:
                  value:
                    organizationsToShareWith: []
                    organizationsThatHaveSharedWithMe: []
              schema:
                $ref: "#/components/schemas/getLinkedOrganizations_200_response"
          description: A list of organizations linked to the caller's organization
            for SBOM sharing.
        "401":
          content:
            application/json:
              examples:
                Unauthorized:
                  value:
                    message: Unauthorized
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Feature flag not enabled:
                  value:
                    message: sbomSharing is not enabled in this organization.
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - SBOM
  /organizations/{id}/settings/projects/notifications:
    get:
      description: Get notification settings for an organization
      operationId: getOrganizationNotificationSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                NotificationsSettings:
                  value:
                    notificationDefaultEnabled: true
                    notificationDefaultSlackScan: true
                    notificationDefaultEmailScanUsers:
                    - 1
                    - 2
                    notificationDefaultEmailScanUserType: all
              schema:
                $ref: "#/components/schemas/getOrganizationNotificationSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate notification settings for an organization
      operationId: propagateOrganizationNotificationSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              example:
              - notificationDefaultEmailScanUsers
              - notificationDefaultEmailBuildUsers
              - notificationDefaultSlackScan
              - notificationDefaultSlackBuild
              items:
                enum:
                - notificationDefaultEmailScanUsers
                - notificationDefaultEmailBuildUsers
                - notificationDefaultSlackScan
                - notificationDefaultSlackBuild
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update notification settings for an organization
      operationId: updateOrganizationNotificationSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              NotificationsSettings:
                value:
                  notificationDefaultEnabled: true
                  notificationDefaultSlackScan: true
                  notificationDefaultEmailScanUsers:
                  - 1
                  - 2
                  notificationDefaultEmailScanUserType: all
            schema:
              $ref: "#/components/schemas/getOrganizationNotificationSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/projects/update-hooks:
    get:
      description: Get project update hook settings for an organization
      operationId: getOrganizationUpdateHookSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                ProjectUpdateHooksSettings:
                  value:
                    updateHookDefaultScheduledEnabled: true
                    updateHookDefaultScheduledInterval: week
                    updateHookDefaultScheduledIntervalLength: 77
                    updateHookDefaultScheduledIntervalTime: 2023-09-22T10:30:00Z
              schema:
                $ref: "#/components/schemas/getOrganizationUpdateHookSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    patch:
      description: Propagate project update hook settings for an organization
      operationId: propagateOrganizationUpdateHookSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - updateHookDefaultScheduledEnabled
            - updateHookDefaultScheduledInterval
            - updateHookDefaultScheduledIntervalLength
            - updateHookDefaultScheduledIntervalTime
            schema:
              items:
                enum:
                - updateHookDefaultScheduledEnabled
                - updateHookDefaultScheduledInterval
                - updateHookDefaultScheduledIntervalLength
                - updateHookDefaultScheduledIntervalTime
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update project update hook settings for an organization
      operationId: updateOrganizationUpdateHookSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getOrganizationUpdateHookSettings_200_response"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/authentication:
    get:
      description: Get authentication settings for an organization
      operationId: getOrganizationAuthenticationSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                AuthenticationSettings:
                  value:
                    subdomain: example-test
                    loginSubdomain: http://example-test..io:9578
                    disableInvite: true
                    saml:
                      callbackUrl: http://example-test..io:9578/account/saml/1/callback
                      loginUrl: http://example-test..io:9578/account/saml/1
                      audienceUrl: http://example-test..io:9578/account/saml/1/ae1a20f1-0d1f-4356-a0d3-67c335763906
                      id: 39
                      organizationId: 1
                      entryPoint: "12"
                      cert: "12"
                      audience: ae1a20f1-0d1f-4356-a0d3-67c335763906
                      createdAt: 2024-01-25T00:21:19.744Z
                      updatedAt: 2024-01-25T00:21:19.744Z
                    ldap:
                      passwordIsSet: true
                      id: 3
                      organizationId: 1
                      enabled: false
                      server: ldap.example.com
                      port: 636
                      ssl: true
                      username: ldap_user
                      searchBase: "ou=users,dc=example,dc=com"
                      searchFilter: (objectClass=person)
                      useGroups: false
                      groupBase: groupBase
                      groupFilter: groupFilter2
                      groupNameAttr: groupNameAttr
                      groupDNAttr: groupDNAttr
                      userEmailAttr: email
                      userNameAttr: cn
                      uidAttr: uid
                      allowEmptyEmail: false
                      createdAt: 2024-01-10T18:36:41.911Z
                      updatedAt: 2024-01-12T00:25:33.867Z
                    sso:
                      google: true
                      saml: true
                      ldap: true
              schema:
                $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for an organization
      operationId: updateOrganizationAuthenticationSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              AuthenticationSettings:
                value:
                  disableInvite: false
                  subdomain: test
            schema:
              $ref: "#/components/schemas/updateOrganizationAuthenticationSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "422":
          content:
            application/json:
              examples:
                Invalid Settings Payload:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: Couldn't update organization settings
                    name: InvalidPayloadError
                    httpStatusCode: 422
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unprocessable Entity
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/pod:
    get:
      description: Get authentication settings for Cocoapods
      operationId: getOrganizationCocoapodsSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                List of sources:
                  value:
                  - url: www.specrepo1.com
                    organizationId: 123
                    id: 123
                  - url: www.specrepo2.com
                    organizationId: 123
                    id: 124
              schema:
                items:
                  $ref: "#/components/schemas/getOrganizationCocoapodsSettings_200_response_inner"
                nullable: true
                type: array
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for Cocoapods. Payload accepts a
        list of strings representing spec repo URL's
      operationId: putOrganizationCocoapodsSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            example:
            - www.specrepo1.com/specs
            - www.specrepo2.com/specs
            schema:
              items:
                type: string
              type: array
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/bower:
    get:
      description: Get authentication settings for Bower
      operationId: getOrganizationBowerSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Registries:
                  value:
                    registries:
                    - _id: 00000000-0000-0000-0000-000000000000
                      hasUrl: true
                    - _id: 00000000-0000-0000-0000-000000000001
                      hasUrl: true
                    useArtifactory: false
              schema:
                $ref: "#/components/schemas/getOrganizationBowerSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for Bower
      operationId: putOrganizationBowerSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New Registry:
                value:
                  registries:
                  - _id: 00000000-0000-0000-0000-000000000000
                    url:
                      __type: s
                      value: www.existingPrivateBowerSite.com
                  useArtifactory: true
            schema:
              $ref: "#/components/schemas/putOrganizationBowerSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/gem:
    get:
      description: Get authentication settings for RubyGems
      operationId: getOrganizationRubyGemsSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Source Repositories:
                  value:
                    sources:
                    - _id: 00000000-0000-0000-0000-000000000000
                      url: www.privategems.com/gems
                      username: ruby_user
                      hasPassword: true
              schema:
                $ref: "#/components/schemas/getOrganizationRubyGemsSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for RubyGems
      operationId: putOrganizationRubyGemsSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New Source Repo:
                value:
                  sources:
                  - _id: 00000000-0000-0000-0000-000000000000
                    url: www.privategems.com/gems
                    username: ruby_user
                    password:
                      __type: s
                      value: gemSecretPassword
            schema:
              $ref: "#/components/schemas/putOrganizationRubyGemsSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/mvn:
    get:
      description: Get authentication settings for Maven
      operationId: getOrganizationMavenSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Maven Repositories:
                  value:
                    repositories:
                    - _id: 00000000-0000-0000-0000-000000000000
                      id: Maven Private Server
                      url: www.privatemaven.com/mvn
                    servers:
                    - _id: 00000000-0000-0000-0000-000000000001
                      id: Maven Private Server
                      username: mvn_user
                      hasPassword: true
              schema:
                $ref: "#/components/schemas/getOrganizationMavenSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for Maven
      operationId: putOrganizationMavenSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New Maven Repo:
                value:
                  repositories:
                  - _id: 00000000-0000-0000-0000-000000000000
                    id: Maven Private Server
                    url: www.privatemaven.com/mvn
                  servers:
                  - _id: 00000000-0000-0000-0000-000000000001
                    id: Maven Private Server
                    username: mvn_user
                    password:
                      __type: s
                      value: secretPassword
            schema:
              $ref: "#/components/schemas/putOrganizationMavenSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/nuget:
    get:
      description: Get authentication settings for Nuget
      operationId: getOrganizationNugetSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Nuget Repositories:
                  value:
                    sources:
                    - _id: 00000000-0000-0000-0000-000000000001
                      username: nuget_user
                      url: www.nugetrepo.com/repo
                      hasPassword: true
              schema:
                $ref: "#/components/schemas/getOrganizationNugetSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for Nuget
      operationId: putOrganizationNugetSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New Nuget Repo:
                value:
                  sources:
                  - _id: 00000000-0000-0000-0000-000000000001
                    url: www.nugetrepo.com/repo
                    username: nuget_user
                    password:
                      __type: s
                      value: secretPassword
            schema:
              $ref: "#/components/schemas/putOrganizationNugetSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/pip:
    get:
      description: Get authentication settings for Pip
      operationId: getOrganizationPipSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Pip Repositories:
                  value:
                    repositories:
                    - _id: 00000000-0000-0000-0000-000000000001
                      username: pip_user
                      url: www.piprepo.com/repo
                      hasPassword: true
              schema:
                $ref: "#/components/schemas/getOrganizationPipSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for Pip
      operationId: putOrganizationPipSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New Pip Repo:
                value:
                  repositories:
                  - _id: 00000000-0000-0000-0000-000000000001
                    url: www.piprepo.com/repo
                    username: pip_user
                    password:
                      __type: s
                      value: secretPassword
            schema:
              $ref: "#/components/schemas/putOrganizationPipSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/git:
    get:
      description: Get authentication settings for Git
      operationId: getOrganizationGitSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Git config:
                  value:
                    authOptions:
                    - _id: 00000000-0000-0000-0000-000000000001
                      displayName: token
                      type: oauth_key
                      hasToken: true
                    - _id: 00000000-0000-0000-0000-000000000001
                      displayName: user/pass
                      type: basic
                      username: git_user
                      hasPassword: true
              schema:
                $ref: "#/components/schemas/getOrganizationGitSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for Git
      operationId: putOrganizationGitSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New Git Configs:
                value:
                  authOptions:
                  - _id: 00000000-0000-0000-0000-000000000001
                    displayName: token
                    type: oauth_key
                    value:
                      __type: s
                      value: "123456789"
                  - _id: 00000000-0000-0000-0000-000000000001
                    displayName: user/pass
                    type: basic
                    username: git_user
                    password:
                      __type: s
                      value: password
            schema:
              $ref: "#/components/schemas/putOrganizationGitSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/languages/npm:
    get:
      description: Get authentication settings for NPM
      operationId: getOrganizationNPMSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                NPM config:
                  value:
                    registries:
                    - _id: 00000000-0000-0000-0000-000000000001
                      url: www.npmauth.com/auth1
                      auth:
                        email: foo@bar.com
                        username: npm_user
                        hasPassword: true
                        hasToken: false
                        alwaysAuth: true
                      hasCa: true
                    - _id: 00000000-0000-0000-0000-000000000001
                      url: www.npmauth.com/auth2
                      auth:
                        hasToken: true
                        hasPassword: false
                      hasCa: true
              schema:
                $ref: "#/components/schemas/getOrganizationNPMSettings_200_response"
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update authentication settings for NPM
      operationId: putOrganizationNPMSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              New NPM Configs:
                value:
                  registries:
                  - _id: 00000000-0000-0000-0000-000000000001
                    url: www.npmauth.com/auth1
                    auth:
                      email: foo@bar.com
                      username: npm_user
                      password:
                        __type: s
                        value: password
                    hasCa: true
                  - _id: 00000000-0000-0000-0000-000000000001
                    url: www.npmauth.com/auth2
                    auth:
                      token:
                        __type: s
                        value: "2324234234"
                    hasCa: true
            schema:
              $ref: "#/components/schemas/putOrganizationNPMSettings_request"
      responses:
        "204":
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                No Organization Found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Organization not found.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/integrations/custom-license-scans:
    get:
      description: Get custom license scan settings for an organization
      operationId: getOrganizationCustomLicenseScanSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Custom License Scan Settings:
                  value:
                  - id: 1
                    name: Proprietary License
                    matchCriteria: "[Pp]roprietary [Ll]icense"
              schema:
                items:
                  $ref: "#/components/schemas/getOrganizationCustomLicenseScanSettings_200_response_inner"
                type: array
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Organization Settings
    put:
      description: Update custom license scan settings for an organization
      operationId: putOrganizationCustomLicenseScanSettings
      parameters:
      - description: Organization ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Custom License Scan Settings:
                value:
                - id: 1
                  name: Proprietary License
                  matchCriteria: "[Pp]roprietary [Ll]icense"
                - id: null
                  name: Custom License
                  matchCriteria: "[Cc]ustom [Ll]icense"
            schema:
              items:
                $ref: "#/components/schemas/getOrganizationCustomLicenseScanSettings_200_response_inner"
              type: array
      responses:
        "204":
          content:
            application/json:
              example: ""
          description: No content
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /organizations/{id}/settings/integrations/slack:
    get:
      description: Get Slack webhook settings for an organization
      operationId: getOrganizationSlackSettings
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Slack Settings:
                  value:
                  - channel: "#fossa-licensing-notifications"
                    webhook_url: https://hooks.slack.com/services/ABCD/EFG/HIJK/LMNOP
                  - channel: "#fossa-security-notifications"
                    webhook_url: https://hooks.slack.com/services/QRST/UBWX/YZ12/3456
              schema:
                items:
                  $ref: "#/components/schemas/getOrganizationSlackSettings_200_response_inner"
                type: array
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Organization Settings
  /jira/{id}:
    delete:
      description: Delete configuration settings for a specific Jira Site
      operationId: deleteJiraConfiguration
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                Successful Delete:
                  value:
                    deleted: true
                    id: 1
              schema:
                $ref: "#/components/schemas/deleteJiraConfiguration_200_response"
          description: OK
        "400":
          content:
            application/json:
              examples:
                Failed Delete:
                  value:
                    deleted: false
                    id: 1
              schema:
                $ref: "#/components/schemas/deleteJiraConfiguration_200_response"
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Jira Integration Settings
    patch:
      description: Update config settings for a Jira site.  Requires premium subscription.
      operationId: patchJiraConfiguration
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update Base URL:
                value:
                  base_url: https://my-jira-site.com
              Update Enabled status:
                value:
                  enabled: true
              Update Credentials + Labels:
                value:
                  credentials:
                    basic:
                      username: jira_user
                      password: password123
                  labels:
                  - exported-from-fossa
                  - licensing-issue
              Update Headers and Custom Fields:
                value:
                  headers:
                    x-token-test: "12345"
                  customFields:
                    "12345":
                      fieldId: "12345"
                      displayName: Favorite soda
                      isRequired: false
                      defaultValue: Sprite
              Update Components:
                value:
                  components:
                  - id: "10001"
                    displayName: Component 1
                  - id: "10002"
                    displayName: Component 2
            schema:
              $ref: "#/components/schemas/patchJiraConfiguration_request"
      responses:
        "204":
          description: The resource was updated successfully
        "400":
          content:
            application/json:
              examples:
                Bad Request (Malformed payload):
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error: expected undefined | null | string at root.base_url\
                      \ but found [4,5,6]"
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                Not found:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2004
                    message: Jira with ID 123 not found in org with ID 12345.
                    name: NotFoundError
                    httpStatusCode: 404
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: NotFound
      security:
      - ApiToken: []
      tags:
      - Jira Integration Settings
  /jira:
    get:
      description: Get configuration settings for all Jira Sites in an organization
      operationId: getJiraConfigurations
      responses:
        "200":
          content:
            application/json:
              examples:
                Org with Multiple Jira Sites:
                  value:
                  - credentials:
                      basic:
                        username: jira_user
                        password: ········
                    headers: {}
                    webhookURL: "https://app.fossa.com/hooks/jira/00000000000/${issue.key}"
                    id: 16
                    organizationId: 123
                    name: Team 1 Jira site
                    base_url: www.jira-site1.com
                    enabled: true
                    resolved_statuses:
                    - Done
                    - Resolved
                    - Closed
                    resolvedStatusesEnabled: false
                    customFields: null
                    issueTypes: []
                    labels:
                    - exported-from-fossa
                    - licensing-issue
                    jiraProjectIds:
                    - PROD
                    - STAG
                    defaultLicensingProject: null
                    defaultSecurityProject: null
                    createdAt: 2024-01-08T19:11:01.415Z
                  - credentials:
                      basic:
                        username: jira_user2
                        password: ········
                    headers: {}
                    webhookURL: "https://app.fossa.com/hooks/jira/0000000000000/${issue.key}"
                    id: 24
                    organizationId: 123
                    name: Team 2 Jira site
                    base_url: www.jira-site2.com
                    enabled: false
                    resolved_statuses:
                    - CustomDone
                    resolvedStatusesEnabled: true
                    customFields: null
                    issueTypes: []
                    labels:
                    - exported-from-fossa
                    - security-issue
                    jiraProjectIds:
                    - PROD
                    - TEST
                    defaultLicensingProject: PROD
                    defaultSecurityProject: TEST
                    createdAt: 2024-01-08T19:11:01.415Z
              schema:
                items:
                  $ref: "#/components/schemas/patchJiraConfiguration_request"
                type: array
          description: OK
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
      security:
      - ApiToken: []
      tags:
      - Jira Integration Settings
    post:
      description: Create new configuration settings for a Jira Site.  Requires premium
        subscription.
      operationId: createJiraConfiguration
      requestBody:
        content:
          application/json:
            examples:
              New Jira:
                value:
                  name: New Jira Site
                  enabled: true
                  base_url: https://my-jira-site.com
            schema:
              $ref: "#/components/schemas/patchJiraConfiguration_request"
      responses:
        "201":
          content:
            application/json:
              examples:
                Successful Create:
                  value:
                    credentials:
                      basic:
                        username: jira_user
                        password: ········
                    headers: {}
                    webhookURL: "https://app.fossa.com/hooks/jira/00000000000/${issue.key}"
                    id: 16
                    organizationId: 123
                    name: Team 1 Jira site
                    base_url: www.jira-site1.com
                    enabled: true
                    resolved_statuses:
                    - Done
                    - Resolved
                    - Closed
                    resolvedStatusesEnabled: false
                    customFields: null
                    issueTypes: []
                    labels:
                    - exported-from-fossa
                    - licensing-issue
                    jiraProjectIds:
                    - PROD
                    - STAG
                    defaultLicensingProject: null
                    defaultSecurityProject: null
                    createdAt: 2024-01-08T19:11:01.415Z
              schema:
                $ref: "#/components/schemas/patchJiraConfiguration_request"
          description: OK
        "400":
          content:
            application/json:
              examples:
                Bad Request (Malformed payload):
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2003
                    message: "Parse error: expected undefined | null | string at root.base_url\
                      \ but found [4,5,6]"
                    name: BadRequestError
                    httpStatusCode: 400
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                Bad API Token:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2010
                    message: API token is invalid
                    name: UnauthorizedError
                    httpStatusCode: 401
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                Forbidden:
                  value:
                    message: Forbidden
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: -1
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/generateProjectGenerateAttributionSlug_401_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Jira Integration Settings
  /audit_logs:
    get:
      description: Retrieves a list of audit logs.
      operationId: getAuditLogs
      parameters:
      - description: The number of records to skip
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The number of records to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The field to sort by (defaults to createdAt)
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - id
          - actingUserId
          - actingUserEmail
          - actingUserName
          - actingUserRole
          - organizationId
          - userId
          - teamId
          - buildId
          - dependencyId
          - licenseId
          - policyId
          - projectId
          - ruleId
          - locator
          - revisionLicenseId
          - issueId
          - action
          - topic
          - name
          - old_value
          - new_value
          - description
          - createdAt
          type: string
        style: form
      - description: The direction to sort by (defaults to DESC)
        explode: true
        in: query
        name: sortDir
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: The start date to filter audit logs to
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date to filter audit logs to
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The acting user IDs to filter audit logs to
        explode: true
        in: query
        name: "actingUserIds[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The actions to filter audit logs to
        explode: true
        in: query
        name: "actions[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The topics to filter audit logs to
        explode: true
        in: query
        name: "topics[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The topic actions to filter audit logs to
        explode: true
        in: query
        name: "topicActions[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The id to start after to filter audit logs to
        explode: true
        in: query
        name: startingAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The id to end before to filter audit logs to
        explode: true
        in: query
        name: endingBefore
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                Audit logs:
                  value:
                  - id: 123
                    actingUserId: 123
                    actingUserEmail: user@fossa.com
                    actingUserName: user@fossa.com
                    actingUserRole: project.create
                    organizationId: 123
                    userId: null
                    teamId: null
                    buildId: null
                    dependencyId: null
                    licenseId: null
                    policyId: null
                    projectId: null
                    ruleId: null
                    locator: null
                    revisionLicenseId: null
                    issueId: null
                    action: ADD_PROJECT
                    topic: Project
                    name: null
                    old_value: null
                    new_value: null
                    description: Imported project "github.com/foo/bar" via github
                    createdAt: 2024-05-13T16:42:54.067Z
              schema:
                items:
                  $ref: "#/components/schemas/getAuditLogs_200_response_inner"
                type: array
          description: Audit log list
        "403":
          content:
            application/json:
              examples:
                No permission to view:
                  value: Forbidden
                Org not permissioned:
                  value: User not permissioned for feature. Feature requires premium
                    subscription access level.
              schema:
                type: string
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Audit Logs
  /audit_logs/export:
    post:
      description: Request an export of audit logs. The export will be generated asynchronously
        and a link to download the CSV file will be emailed to you.
      operationId: getAuditLogsExport
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getAuditLogsExport_request"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAuditLogsExport_201_response"
          description: "The export task was created successfully. When the job is\
            \ complete, you will receive an email with a link to download the CSV\
            \ file."
        "400":
          content:
            application/json:
              examples:
                Invalid dates:
                  value:
                    message: startDate and endDate must be valid dates
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No permission:
                  value:
                    message: Forbidden
                Subscription required:
                  value:
                    message: User not permissioned for feature. Feature requires premium
                      subscription access level.
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Audit Logs
  /count/audit_logs:
    get:
      description: Retrieves a count of audit logs.
      operationId: getAuditLogsCount
      parameters:
      - description: The number of records to skip
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The number of records to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: The field to sort by (defaults to createdAt)
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          enum:
          - id
          - actingUserId
          - actingUserEmail
          - actingUserName
          - actingUserRole
          - organizationId
          - userId
          - teamId
          - buildId
          - dependencyId
          - licenseId
          - policyId
          - projectId
          - ruleId
          - locator
          - revisionLicenseId
          - issueId
          - action
          - topic
          - name
          - old_value
          - new_value
          - description
          - createdAt
          type: string
        style: form
      - description: The direction to sort by (defaults to DESC)
        explode: true
        in: query
        name: sortDir
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: The start date to filter audit logs to
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The end date to filter audit logs to
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The acting user IDs to filter audit logs to
        explode: true
        in: query
        name: "actingUserIds[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The actions to filter audit logs to
        explode: true
        in: query
        name: "actions[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The topics to filter audit logs to
        explode: true
        in: query
        name: "topics[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The topic actions to filter audit logs to
        explode: true
        in: query
        name: "topicActions[]"
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: The id to start after to filter audit logs to
        explode: true
        in: query
        name: startingAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: The id to end before to filter audit logs to
        explode: true
        in: query
        name: endingBefore
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                audit_log_count:
                  value: 12
              schema:
                type: integer
          description: Audit log count
        "403":
          content:
            application/json:
              examples:
                No permission to view:
                  value: Forbidden
                Org not permissioned:
                  value: User not permissioned for feature. Feature requires premium
                    subscription access level.
              schema:
                type: string
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                $ref: "#/components/schemas/getGitHubAppInstallationUrl_403_response"
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Audit Logs
  /components/signed_url:
    get:
      description: "Get a signed URL for uploading component files to FOSSA, to expire\
        \ in 5 minutes' time.  Only SBOM imports are supported for non-premium accounts."
      operationId: getSignedUrl
      parameters:
      - description: the package spec
        explode: true
        in: query
        name: packageSpec
        required: true
        schema:
          type: string
        style: form
      - description: The branch or revision of the component project being built.
        explode: true
        in: query
        name: revision
        required: true
        schema:
          type: string
        style: form
      - description: |
          The kind of file to be uploaded to the signed URL. If 'archive', the signed URL is for uplaoding a directory of source code. If 'sbom', the signed URL is for uploading an SBOM file (CycloneDX or SPDX).
        explode: true
        in: query
        name: fileType
        required: false
        schema:
          enum:
          - archive
          - sbom
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                signedUrl:
                  value: http://example.com/api/blob-storage?signature=80070713463e7749b90c2dc24911e275
              schema:
                $ref: "#/components/schemas/getSignedUrl_200_response"
          description: Signed URL
        "400":
          content:
            application/json:
              examples:
                No package spec:
                  value: package spec not defined
                No revision:
                  value: revision not defined
              schema:
                type: string
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                No permission to view:
                  value: Forbidden
                Org not permissioned:
                  value: User not permissioned for feature. Feature requires premium
                    subscription access level.
              schema:
                type: string
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                type: FossaApiError
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Components
  /components/build:
    post:
      description: Upload a component and start asynchronously building it.  Only
        SBOM imports are supported for non-premium accounts.
      operationId: build
      parameters:
      - description: |
          The unresolved spec (i.e. a URL) that can be passed to a fetcher and resolved to a package id. For example:, underscore (npm), https://github.com/fossas/fossa (git), nokogiri (gem),
        explode: true
        in: query
        name: packageSpec
        required: true
        schema:
          type: string
        style: form
      - description: The branch or revision of the component project being built.
        explode: true
        in: query
        name: revision
        required: true
        schema:
          type: string
        style: form
      - description: ""
        explode: true
        in: query
        name: dependency
        required: false
        schema:
          type: boolean
        style: form
      - description: The project description for the archive
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - description: |
          The kind of component file to be built., If 'archive', the signed URL is for uplaoding a directory of source code., If 'sbom', the signed URL is for uploading an SBOM file (CycloneDX or SPDX).,
        explode: true
        in: query
        name: fileType
        required: false
        schema:
          enum:
          - archive
          - sbom
          type: string
        style: form
      - explode: true
        in: query
        name: branch
        required: false
        schema:
          type: string
        style: form
      - description: The corresponding Jira project for this component
        explode: true
        in: query
        name: jiraProjectKey
        required: false
        schema:
          type: string
        style: form
      - description: A link to attach to this revision
        explode: true
        in: query
        name: link
        required: false
        schema:
          type: string
        style: form
      - description: The URL of the project being uploaded
        explode: true
        in: query
        name: projectURL
        required: false
        schema:
          type: string
        style: form
      - description: The name of the policy for this build.
        explode: true
        in: query
        name: policy
        required: false
        schema:
          type: string
        style: form
      - description: The ID of the policy for this build.
        explode: true
        in: query
        name: policyId
        required: false
        schema:
          type: number
        style: form
      - description: The name of the team connected to the project.
        explode: true
        in: query
        name: team
        required: false
        schema:
          type: string
        style: form
      - description: The title of the component.
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: The title of release group to add the project to.
        explode: true
        in: query
        name: releaseGroup
        required: false
        schema:
          type: string
        style: form
      - description: The title of release to add the project to.
        explode: true
        in: query
        name: releaseGroupRelease
        required: false
        schema:
          type: string
        style: form
      - description: |
          Set of labels to apply to a project. If the org or the project have too many labels, then the labels will be applied in order until limits are hit.
        explode: true
        in: query
        name: labels
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/build_request"
      responses:
        "201":
          description: Created
        "403":
          content:
            application/json:
              examples:
                No permission to view:
                  value: Forbidden
                Org not permissioned:
                  value: User not permissioned for feature. Feature requires premium
                    subscription access level.
              schema:
                type: FossaForbiddenError
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                Server Error:
                  value:
                    uuid: 00000000-0000-0000-0000-000000000000
                    code: 2009
                    message: "Sorry, we've encountered an unexpected error. We've\
                      \ recorded it. If you continue to see this, contact support\
                      \ at support@fossa.com and include the unique reference code:\
                      \ 00000000-0000-0000-0000-000000000000"
                    name: InternalServerError
                    httpStatusCode: 500
              schema:
                type: FossaApiError
          description: Server Error
      security:
      - ApiToken: []
      tags:
      - Components
components:
  examples:
    GetBowerConfig:
      value:
        registries:
        - _id: 00000000-0000-0000-0000-000000000000
          hasUrl: true
        - _id: 00000000-0000-0000-0000-000000000001
          hasUrl: true
        useArtifactory: false
    PutBowerConfig:
      value:
        registries:
        - _id: 00000000-0000-0000-0000-000000000000
          url:
            __type: s
            value: www.existingPrivateBowerSite.com
        useArtifactory: true
    GetGemConfig:
      value:
        sources:
        - _id: 00000000-0000-0000-0000-000000000000
          url: www.privategems.com/gems
          username: ruby_user
          hasPassword: true
    PutGemConfig:
      value:
        sources:
        - _id: 00000000-0000-0000-0000-000000000000
          url: www.privategems.com/gems
          username: ruby_user
          password:
            __type: s
            value: gemSecretPassword
    GetMavenConfig:
      value:
        repositories:
        - _id: 00000000-0000-0000-0000-000000000000
          id: Maven Private Server
          url: www.privatemaven.com/mvn
        servers:
        - _id: 00000000-0000-0000-0000-000000000001
          id: Maven Private Server
          username: mvn_user
          hasPassword: true
    PutMavenConfig:
      value:
        repositories:
        - _id: 00000000-0000-0000-0000-000000000000
          id: Maven Private Server
          url: www.privatemaven.com/mvn
        servers:
        - _id: 00000000-0000-0000-0000-000000000001
          id: Maven Private Server
          username: mvn_user
          password:
            __type: s
            value: secretPassword
    GetNugetConfig:
      value:
        sources:
        - _id: 00000000-0000-0000-0000-000000000001
          username: nuget_user
          url: www.nugetrepo.com/repo
          hasPassword: true
    PutNugetConfig:
      value:
        sources:
        - _id: 00000000-0000-0000-0000-000000000001
          url: www.nugetrepo.com/repo
          username: nuget_user
          password:
            __type: s
            value: secretPassword
    GetPipConfig:
      value:
        repositories:
        - _id: 00000000-0000-0000-0000-000000000001
          username: pip_user
          url: www.piprepo.com/repo
          hasPassword: true
    PutPipConfig:
      value:
        repositories:
        - _id: 00000000-0000-0000-0000-000000000001
          url: www.piprepo.com/repo
          username: pip_user
          password:
            __type: s
            value: secretPassword
    GetGitConfig:
      value:
        authOptions:
        - _id: 00000000-0000-0000-0000-000000000001
          displayName: token
          type: oauth_key
          hasToken: true
        - _id: 00000000-0000-0000-0000-000000000001
          displayName: user/pass
          type: basic
          username: git_user
          hasPassword: true
    PutGitConfig:
      value:
        authOptions:
        - _id: 00000000-0000-0000-0000-000000000001
          displayName: token
          type: oauth_key
          value:
            __type: s
            value: "123456789"
        - _id: 00000000-0000-0000-0000-000000000001
          displayName: user/pass
          type: basic
          username: git_user
          password:
            __type: s
            value: password
    GetNPMConfig:
      value:
        registries:
        - _id: 00000000-0000-0000-0000-000000000001
          url: www.npmauth.com/auth1
          auth:
            email: foo@bar.com
            username: npm_user
            hasPassword: true
            hasToken: false
            alwaysAuth: true
          hasCa: true
        - _id: 00000000-0000-0000-0000-000000000001
          url: www.npmauth.com/auth2
          auth:
            hasToken: true
            hasPassword: false
          hasCa: true
    PutNPMConfig:
      value:
        registries:
        - _id: 00000000-0000-0000-0000-000000000001
          url: www.npmauth.com/auth1
          auth:
            email: foo@bar.com
            username: npm_user
            password:
              __type: s
              value: password
          hasCa: true
        - _id: 00000000-0000-0000-0000-000000000001
          url: www.npmauth.com/auth2
          auth:
            token:
              __type: s
              value: "2324234234"
          hasCa: true
    FossaUnauthorizedError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2010
        message: API token is invalid
        name: UnauthorizedError
        httpStatusCode: 401
    FossaServerError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: -1
        message: "Sorry, we've encountered an unexpected error. We've recorded it.\
          \ If you continue to see this, contact support at support@fossa.com and\
          \ include the unique reference code: 00000000-0000-0000-0000-000000000000"
        httpStatusCode: 500
    FossaForbiddenError:
      value:
        message: Forbidden
    OrganizationNotFoundError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: Organization not found.
        name: NotFoundError
        httpStatusCode: 404
    InvalidOrganizationSettingsPayload:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2003
        message: Couldn't update organization settings
        name: InvalidPayloadError
        httpStatusCode: 422
    JiraNotFoundError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: Jira with ID 123 not found in org with ID 12345.
        name: NotFoundError
        httpStatusCode: 404
    JiraUpdateBadRequest:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2003
        message: "Parse error: expected undefined | null | string at root.base_url\
          \ but found [4,5,6]"
        name: BadRequestError
        httpStatusCode: 400
    SingleJiraResponse:
      value:
        credentials:
          basic:
            username: jira_user
            password: ········
        headers: {}
        webhookURL: "https://app.fossa.com/hooks/jira/00000000000/${issue.key}"
        id: 16
        organizationId: 123
        name: Team 1 Jira site
        base_url: www.jira-site1.com
        enabled: true
        resolved_statuses:
        - Done
        - Resolved
        - Closed
        resolvedStatusesEnabled: false
        customFields: null
        issueTypes: []
        labels:
        - exported-from-fossa
        - licensing-issue
        jiraProjectIds:
        - PROD
        - STAG
        defaultLicensingProject: null
        defaultSecurityProject: null
        createdAt: 2024-01-08T19:11:01.415Z
    MultipleJirasResponse:
      value:
      - credentials:
          basic:
            username: jira_user
            password: ········
        headers: {}
        webhookURL: "https://app.fossa.com/hooks/jira/00000000000/${issue.key}"
        id: 16
        organizationId: 123
        name: Team 1 Jira site
        base_url: www.jira-site1.com
        enabled: true
        resolved_statuses:
        - Done
        - Resolved
        - Closed
        resolvedStatusesEnabled: false
        customFields: null
        issueTypes: []
        labels:
        - exported-from-fossa
        - licensing-issue
        jiraProjectIds:
        - PROD
        - STAG
        defaultLicensingProject: null
        defaultSecurityProject: null
        createdAt: 2024-01-08T19:11:01.415Z
      - credentials:
          basic:
            username: jira_user2
            password: ········
        headers: {}
        webhookURL: "https://app.fossa.com/hooks/jira/0000000000000/${issue.key}"
        id: 24
        organizationId: 123
        name: Team 2 Jira site
        base_url: www.jira-site2.com
        enabled: false
        resolved_statuses:
        - CustomDone
        resolvedStatusesEnabled: true
        customFields: null
        issueTypes: []
        labels:
        - exported-from-fossa
        - security-issue
        jiraProjectIds:
        - PROD
        - TEST
        defaultLicensingProject: PROD
        defaultSecurityProject: TEST
        createdAt: 2024-01-08T19:11:01.415Z
    JiraNewSite:
      value:
        name: New Jira Site
        enabled: true
        base_url: https://my-jira-site.com
    JiraUpdateBaseUrl:
      value:
        base_url: https://my-jira-site.com
    JiraUpdateEnabled:
      value:
        enabled: true
    JiraUpdateCredentialsAndLabels:
      value:
        credentials:
          basic:
            username: jira_user
            password: password123
        labels:
        - exported-from-fossa
        - licensing-issue
    JiraUpdateHeadersAndCustomFields:
      value:
        headers:
          x-token-test: "12345"
        customFields:
          "12345":
            fieldId: "12345"
            displayName: Favorite soda
            isRequired: false
            defaultValue: Sprite
    JiraUpdateComponents:
      value:
        components:
        - id: "10001"
          displayName: Component 1
        - id: "10002"
          displayName: Component 2
    DeletedJiraFail:
      value:
        deleted: false
        id: 1
    DeletedJiraSucceed:
      value:
        deleted: true
        id: 1
    OrganizationPreferences:
      value:
        organizationId: 123
        usesSAML: true
        supportsCliLicenseScanning: true
        supportsAnalyzedRevisionsQuery: true
        supportsDependenciesCachePolling: true
        supportsIssueDiffs: true
        defaultVendoredDependencyScanType: CLILicenseScan
        supportsNativeContainerScans: true
        requireFullFileUploads: true
        supportsPathDependency: true
        supportsFirstPartyScans: true
        defaultToFirstPartyScans: false
        customLicenseScanConfigs:
        - name: Proprietary License
          matchCriteria: "[Pp]roprietary [Ll]icense"
    GeneralOrganizationSettings:
      value:
        labels:
        - label: critical
          id: 1
          projectCount: 10
        title: title
        email: test@fossa.com
        defaultRoleId: 1
        dependencySignatures: "1,2,3"
        disableNonCustomTeamUserRoles: false
    EditingGeneralOrganizationSettings:
      value:
        labels:
        - critical
        - low
        title: title
        email: test@fossa.com
        defaultRoleId: 1
        dependencySignatures: "1,2,3"
        disableNonCustomTeamUserRoles: false
    SecurityIssueSettings:
      value:
        defaultSecurityPolicyId: 1
        projectDefaultSecurityIssueScanningEnabled: true
        projectDefaultSecurityStatusCheckEnabled: true
        projectDefaultStatusCheckFilterVulnerability: 4
    QualityIssueSettings:
      value:
        defaultQualityPolicyId: 1
        projectDefaultQualityIssueScanningEnabled: true
        projectDefaultQualityStatusCheckEnabled: true
        projectDefaultStatusCheckFilterQuality: 1
    ContainerIssueSettings:
      value:
        projectDefaultExcludeBaseLayerIssuesLicensing: true
        projectDefaultExcludeBaseLayerIssuesSecurity: true
        projectDefaultExcludeBaseLayerIssuesQuality: true
    NotificationsSettings:
      value:
        notificationDefaultEnabled: true
        notificationDefaultSlackScan: true
        notificationDefaultEmailScanUsers:
        - 1
        - 2
        notificationDefaultEmailScanUserType: all
    ProjectUpdateHooksSettings:
      value:
        updateHookDefaultScheduledEnabled: true
        updateHookDefaultScheduledInterval: week
        updateHookDefaultScheduledIntervalLength: 77
        updateHookDefaultScheduledIntervalTime: 2023-09-22T10:30:00Z
    AuthenticationSettings:
      value:
        subdomain: example-test
        loginSubdomain: http://example-test..io:9578
        disableInvite: true
        saml:
          callbackUrl: http://example-test..io:9578/account/saml/1/callback
          loginUrl: http://example-test..io:9578/account/saml/1
          audienceUrl: http://example-test..io:9578/account/saml/1/ae1a20f1-0d1f-4356-a0d3-67c335763906
          id: 39
          organizationId: 1
          entryPoint: "12"
          cert: "12"
          audience: ae1a20f1-0d1f-4356-a0d3-67c335763906
          createdAt: 2024-01-25T00:21:19.744Z
          updatedAt: 2024-01-25T00:21:19.744Z
        ldap:
          passwordIsSet: true
          id: 3
          organizationId: 1
          enabled: false
          server: ldap.example.com
          port: 636
          ssl: true
          username: ldap_user
          searchBase: "ou=users,dc=example,dc=com"
          searchFilter: (objectClass=person)
          useGroups: false
          groupBase: groupBase
          groupFilter: groupFilter2
          groupNameAttr: groupNameAttr
          groupDNAttr: groupDNAttr
          userEmailAttr: email
          userNameAttr: cn
          uidAttr: uid
          allowEmptyEmail: false
          createdAt: 2024-01-10T18:36:41.911Z
          updatedAt: 2024-01-12T00:25:33.867Z
        sso:
          google: true
          saml: true
          ldap: true
    EditingAuthenticationSettings:
      value:
        disableInvite: false
        subdomain: test
    CustomLicenseScanSettings:
      value:
      - id: 1
        name: Proprietary License
        matchCriteria: "[Pp]roprietary [Ll]icense"
    PutCustomLicenseScanSettings:
      value:
      - id: 1
        name: Proprietary License
        matchCriteria: "[Pp]roprietary [Ll]icense"
      - id: null
        name: Custom License
        matchCriteria: "[Cc]ustom [Ll]icense"
    SlackSettings:
      value:
      - channel: "#fossa-licensing-notifications"
        webhook_url: https://hooks.slack.com/services/ABCD/EFG/HIJK/LMNOP
      - channel: "#fossa-security-notifications"
        webhook_url: https://hooks.slack.com/services/QRST/UBWX/YZ12/3456
    ProjectRevisionNotFoundError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: This project revision does not exist
        name: NotFoundError
        httpStatusCode: 404
    InvalidSBOMProjectError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: The revision is not associated with an SBOM
        name: BadRequestError
        httpStatusCode: 400
    ReleaseNotFoundError:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: This release does not exist
        name: NotFoundError
        httpStatusCode: 404
    ReleaseGroupNotFound:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: "Release group (id: 1) not found."
        name: NotFoundError
        httpStatusCode: 404
    ReleaseGroupReleaseNotFound:
      value:
        uuid: 00000000-0000-0000-0000-000000000000
        code: 2004
        message: "Release (id: 123) not found."
        name: NotFoundError
        httpStatusCode: 404
    SourcedLicense:
      value:
        depth: 1
        licenseId: MIT
        name: MIT License
        matches:
        - npm+svelte$1.0.0
        - git+github.com/org/someproject$abcd1234
        - pip+pandas$9.8.7
        sources:
        - git+github.com/myorg/myrepo$rev001
        - sbom+123/my-sbom-project$1.2.3
        - custom+123/some-cli-project$12345
    Obligation:
      summary: An example of a license obligation
      value:
        license: BSD-4-Clause
        description: Describes whether the original copyright must be retained.
        revisions:
          sbom+1/my-sbom-project:
          - npm+svelte$1.1.1
          custom+1/my-cli-project:
          - npm+svelte$1.1.1
  parameters:
    PaginationPage:
      description: The specific page of data to return
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    PaginationCount:
      description: The number of items to return in each page of results
      explode: true
      in: query
      name: count
      required: false
      schema:
        default: 20
        maximum: 1000
        minimum: 1
        type: integer
      style: form
    ProjectTeamId:
      description: Filter by one or more team IDs. Providing "null" will return all
        unassigned projects.
      explode: true
      in: query
      name: teamId
      required: false
      schema:
        items:
          $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
        type: array
      style: form
    ReleaseGroupTeamId:
      description: Filter by one or more team IDs. Providing "null" will return all
        unassigned release groups.
      explode: true
      in: query
      name: teamId
      required: false
      schema:
        items:
          $ref: "#/components/schemas/getIssueCWEs_teamId___parameter_inner"
        type: array
      style: form
    IssueOverviewStartDate:
      description: The start date to pull Issue Overview data for. Defaults to 30
        days before the end date.
      explode: true
      in: query
      name: start
      required: false
      schema:
        format: date-time
        type: string
      style: form
    IssueOverviewEndDate:
      description: The start date to pull Issue Overview data for. Defaults to the
        current date and time.
      explode: true
      in: query
      name: end
      required: false
      schema:
        format: date-time
        type: string
      style: form
    IssueOverviewLabels:
      description: The project labels to filter Issue Overview data to.
      explode: true
      in: query
      name: "labels[]"
      required: false
      schema:
        items:
          minimum: 0
          type: integer
        type: array
      style: form
    IssueOverviewCategory:
      description: "The issue category to filter Issue Overview data to. If no category\
        \ is chosen, it will fetch data for all issue categories."
      explode: true
      in: query
      name: category
      required: false
      schema:
        enum:
        - licensing
        - vulnerability
        - quality
        type: string
      style: form
    IssueOverviewProjectId:
      description: The specific project ID to filter Issue Overview data to.
      explode: true
      in: query
      name: projectId
      required: false
      schema:
        type: string
      style: form
  schemas:
    Locator:
      description: FOSSA's identifier for a unique component
      type: string
    Label:
      properties:
        id:
          description: ID of this label
          type: integer
        organizationId:
          description: ID of the organization that this Label is associated with
          type: integer
        label:
          description: Text that this Label represents
          type: string
        projects:
          items:
            description: FOSSA's identifier for a unique component
            type: string
          type: array
    CustomLicenseScanConfig:
      properties:
        name:
          description: custom license scan name
          type: string
        matchCriteria:
          description: regular expression for the custom license scan
          type: string
    CustomLicenseScanConfigWithId:
      allOf:
      - properties:
          name:
            description: custom license scan name
            type: string
          matchCriteria:
            description: regular expression for the custom license scan
            type: string
      - properties:
          id:
            description: Unique identifier for the custom license scan
            type: integer
    Project:
      properties:
        locator:
          description: Text ID that uniquely identifies a project
          type: string
        title:
          description: Name of the project
          type: string
        labels:
          items:
            $ref: "#/components/schemas/getOrganizationLabels_200_response_labels_inner"
          type: array
    SafeVersion:
      type: string
    SafeVersionDistance:
      enum:
      - MAJOR
      - MINOR
      - PATCH
      type: string
    FossaForbiddenError:
      properties:
        message:
          description: Message describing the error
          type: string
    FossaApiError:
      properties:
        uuid:
          description: Unique identifier associated with the error
          type: string
        code:
          description: fossa specific error code
          type: integer
        message:
          description: message associated with this error
          type: string
        name:
          description: name of the error
          type: string
        httpStatusCode:
          description: http status code number
          type: integer
    GeneralOrganizationSettings:
      properties:
        labels:
          items:
            $ref: "#/components/schemas/getOrganizationGeneralSettings_200_response_labels_inner"
          type: array
        title:
          type: string
        email:
          type: string
        defaultRoleId:
          type: integer
        dependencySignatures:
          type: string
        disableNonCustomTeamUserRoles:
          type: boolean
    EditingGeneralOrganizationSettings:
      properties:
        labels:
          items:
            type: string
          type: array
        title:
          type: string
        email:
          type: string
        defaultRoleId:
          type: integer
        dependencySignatures:
          type: string
        disableNonCustomTeamUserRoles:
          type: boolean
    PrivacySettings:
      properties:
        defaultProjectPrivacy:
          description: the default privacy setting for new projects
          enum:
          - public
          - private
          type: string
          nullable: true
    GithubStatusCheckSettings:
      properties:
        projectDefaultAutomatedIntegrationhookTimeout:
          type: number
        projectDefaultProvidedIntegrationhookTimeout:
          type: number
        projectDefaultIntegrationhookFailState:
          enum:
          - ERROR
          - SUCCESS
          type: string
    LicensingIssueSettings:
      properties:
        defaultPolicyId:
          type: integer
        projectDefaultLicensingIssueScanningEnabled:
          type: boolean
        projectDefaultLicensingStatusCheckEnabled:
          type: boolean
        projectDefaultStatusCheckFilterLicensing:
          type: integer
    SecurityIssueSettings:
      properties:
        defaultSecurityPolicyId:
          type: integer
        projectDefaultSecurityIssueScanningEnabled:
          type: boolean
        projectDefaultSecurityStatusCheckEnabled:
          type: boolean
        projectDefaultStatusCheckFilterVulnerability:
          type: integer
    QualityIssueSettings:
      properties:
        defaultQualityPolicyId:
          type: integer
        projectDefaultQualityIssueScanningEnabled:
          type: boolean
        projectDefaultQualityStatusCheckEnabled:
          type: boolean
        projectDefaultStatusCheckFilterQuality:
          type: integer
    ContainerIssueSettings:
      properties:
        projectDefaultExcludeBaseLayerIssuesLicensing:
          type: boolean
        projectDefaultExcludeBaseLayerIssuesSecurity:
          type: boolean
        projectDefaultExcludeBaseLayerIssuesQuality:
          type: boolean
    NotificationsSettings:
      properties:
        notificationDefaultEnabled:
          description: the on/off status of project notifications
          type: boolean
        notificationDefaultSlackScan:
          description: the on/off status of slack notifications for scans
          type: boolean
        notificationDefaultEmailScanUsers:
          items:
            description: the list of user ids to email for scan notifications
            type: number
          type: array
        notificationDefaultEmailScanUserType:
          description: |
            The type of users to email for scan notifications. Each option represents a different set of users:
            - current: Only the current user will receive scan notifications.
            - all: All users will receive scan notifications.
            - custom: Custom set of users will receive scan notifications.
          enum:
          - current
          - all
          - custom
          type: string
    ProjectUpdateHooksSettings:
      properties:
        updateHookDefaultScheduledEnabled:
          description: the on/off status of if the update hook is enabled
          type: boolean
        updateHookDefaultScheduledInterval:
          description: the cadence of the updates
          enum:
          - hour
          - day
          - week
          type: string
          nullable: true
        updateHookDefaultScheduledIntervalLength:
          description: the cadence of the scheduled updates
          type: integer
          nullable: true
        updateHookDefaultScheduledIntervalTime:
          description: date/time for the schedule update hook intervals
          type: string
          nullable: true
    AuthenticationSettings:
      properties:
        subdomain:
          type: string
        loginSubdomain:
          type: string
        disableInvite:
          type: boolean
        saml:
          $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response_saml"
        ldap:
          $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response_ldap"
        sso:
          $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response_sso"
    CustomLicenseScanSettings:
      items:
        $ref: "#/components/schemas/getOrganizationCustomLicenseScanSettings_200_response_inner"
      type: array
    SlackWebhook:
      properties:
        channel:
          description: The Slack channel to send updates to
          type: string
        webhook_url:
          description: The configured webhook url in your Slack Application
          type: string
    SlackSettings:
      items:
        $ref: "#/components/schemas/getOrganizationSlackSettings_200_response_inner"
      type: array
    UpdateAuthenticationSettings:
      properties:
        subdomain:
          type: string
        disableInvite:
          type: boolean
    DeletedJira:
      properties:
        id:
          description: ID of the Jira site that was requested to be deleted
          type: integer
        deleted:
          description: whether the Jira sire was successfully deleted or not
          type: boolean
    Jira:
      properties:
        id:
          readOnly: true
          type: integer
        organizationId:
          readOnly: true
          type: integer
        webhookURL:
          description: Used by the Jira to FOSSA Webhook
          readOnly: true
          type: string
        createdAt:
          description: Timestamp when Jira was created
          readOnly: true
          type: string
        enabled:
          description: On/Off state of the Jira site enabled in FOSSA
          type: boolean
        name:
          description: Display name of your Jira site inside of FOSSA
          type: string
        base_url:
          description: Url of your Jira Site
          nullable: true
          type: string
          nullable: true
        resolved_statuses:
          items:
            description: An optional list of custom statuses to indicate a "closed"
              ticket. This is only used when resolvedStatusesEnabled is set to true
            type: string
          type: array
        resolvedStatusesEnabled:
          description: "When true, incoming webhooks will ignore/unignore issues linked\
            \ to the specific tickets in question if the status matches one of the\
            \ statuses listed in resolved_statuses."
          type: boolean
        credentials:
          $ref: "#/components/schemas/patchJiraConfiguration_request_credentials"
        headers:
          additionalProperties:
            type: string
          description: HTTP headers to pass along when authenticating to the Jira
            site
        issueTypes:
          description: Available issue types to use when exporting tickets
          items:
            type: string
          nullable: true
          type: array
        labels:
          description: Available labels to include when exporting tickets. Corresponds
            to a label in Jira
          items:
            type: string
          nullable: true
          type: array
        jiraProjectIds:
          description: Available Jira Projects to export to from FOSSA
          items:
            type: string
          nullable: true
          type: array
        customFields:
          additionalProperties:
            $ref: "#/components/schemas/patchJiraConfiguration_request_customFields_value"
          description: a dictionary of custom fields
        defaultLicensingProject:
          description: The Jira Project to default to when exporting licensing issues
          nullable: true
          type: string
        defaultSecurityProject:
          description: The Jira Project to default to when exporting security issues
          nullable: true
          type: string
        defaultUniqueTickets:
          description: toggle to determine if each individual issue is 1:1 with a
            ticket upon creation
          type: boolean
    CocoapodsSource:
      properties:
        id:
          description: ID of the Cocoapods source in the FOSSA DB
          type: number
        organizationId:
          description: Organization ID that owns this source
          type: number
        url:
          description: URL of the Cocoapods spec repo
          type: string
    FetcherConfigSecret:
      properties:
        __type:
          enum:
          - s
          type: string
        value:
          type: string
    BowerRegistry:
      properties:
        _id:
          description: UUID of the config (For FOSSA internal usage)
          type: number
        url:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasUrl:
          description: Used when an existing URL is obfuscated in the response
          readOnly: true
          type: boolean
    BowerConfig:
      properties:
        registries:
          description: List of configured Bower registries
          items:
            $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner"
          type: array
        useArtifactory:
          description: Does this registry use Artifactory?
          type: boolean
    GemServer:
      properties:
        _id:
          description: UUID of the gem server (For FOSSA internal usage)
          type: number
        url:
          description: URL of the external gem server
          type: string
        username:
          description: Username for authenticating to the gem server
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    GemConfig:
      properties:
        sources:
          description: List of configured Rubygem servers
          items:
            $ref: "#/components/schemas/getOrganizationRubyGemsSettings_200_response_sources_inner"
          type: array
    MavenRepository:
      properties:
        _id:
          description: UUID of the Maven repo (For FOSSA internal usage)
          type: number
        id:
          description: User configured ID (corresponds with a Maven Server if credentials
            are necessary)
          type: string
        url:
          description: URL of the Maven Repository
          type: string
    MavenServer:
      properties:
        _id:
          description: UUID of the Maven Server (For FOSSA internal usage)
          type: number
        id:
          description: User configured ID (corresponds with a Maven Repository)
          type: string
        username:
          description: Username for authenticating to the Maven repository
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    MavenConfig:
      properties:
        repositories:
          description: List of configured Maven Repositories
          items:
            $ref: "#/components/schemas/getOrganizationMavenSettings_200_response_repositories_inner"
          type: array
        servers:
          description: List of configured Credentials for Maven Repositories
          items:
            $ref: "#/components/schemas/getOrganizationMavenSettings_200_response_servers_inner"
          type: array
    NugetRepository:
      properties:
        _id:
          description: UUID of the Nuget Feed (For FOSSA internal usage)
          type: number
        url:
          description: Remote URL of the Nuget Feed
          type: string
        username:
          description: Username for authenticating to the Nuget Feed
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    NugetConfig:
      properties:
        sources:
          description: List of configured Nuget Feeds
          items:
            $ref: "#/components/schemas/getOrganizationNugetSettings_200_response_sources_inner"
          type: array
    PipRepository:
      properties:
        _id:
          description: UUID of the Pip repository (For FOSSA internal usage)
          type: number
        url:
          description: Remote URL of the Pip repository
          type: string
        username:
          description: Username for authenticating to the Pip repository
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    PipConfig:
      properties:
        repositories:
          description: List of configured Pip Repositories
          items:
            $ref: "#/components/schemas/getOrganizationPipSettings_200_response_repositories_inner"
          type: array
    GitTokenAuth:
      properties:
        _id:
          description: UUID of the Git Server (For FOSSA internal usage)
          type: number
        displayName:
          description: Display name of the Git token in FOSSA
          type: string
        type:
          description: FOSSA internal type
          enum:
          - oauth_key
          type: string
        value:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasToken:
          description: Used when an existing token is obfuscated in the response
          readOnly: true
          type: boolean
    GitUserPasswordAuth:
      properties:
        _id:
          description: UUID of the Git Server (For FOSSA internal usage)
          type: number
        displayName:
          description: Display name of the Git token in FOSSA
          type: string
        type:
          description: FOSSA internal type
          enum:
          - basic
          type: string
        username:
          description: Username to authenticate to the remote Git server
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    GitAuth:
      oneOf:
      - $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner_oneOf"
      - $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner_oneOf_1"
    GitConfig:
      properties:
        authOptions:
          description: List of Git configurations
          items:
            $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner"
          type: array
    NPMRegistryAuth:
      type: object
      email:
        type: string
        description: Email associated to the NPM registry
      username:
        type: string
        description: Username associated to the NPM registry
      password:
        type: object
        properties:
          __type:
            type: string
            enum:
            - s
          value:
            type: string
      hasPassword:
        type: boolean
        readOnly: true
        description: Used when an existing password is obfuscated in the response
      token:
        type: string
        description: Token associated to the NPM registry
      hasToken:
        type: boolean
        readOnly: true
        description: Used when an existing token is obfuscated in the response
      alwaysAuth:
        type: boolean
        readOnly: true
        description: True when at least one auth value is set. Internal field used
          in NPM API
    NPMRegistry:
      properties:
        _id:
          description: UUID of the NPM registry (For FOSSA internal usage)
          type: string
        url:
          description: Remote URL of the NPM registry
          type: string
        auth:
          type: object
          email:
            type: string
            description: Email associated to the NPM registry
          username:
            type: string
            description: Username associated to the NPM registry
          password:
            type: object
            properties:
              __type:
                type: string
                enum:
                - s
              value:
                type: string
          hasPassword:
            type: boolean
            readOnly: true
            description: Used when an existing password is obfuscated in the response
          token:
            type: string
            description: Token associated to the NPM registry
          hasToken:
            type: boolean
            readOnly: true
            description: Used when an existing token is obfuscated in the response
          alwaysAuth:
            type: boolean
            readOnly: true
            description: True when at least one auth value is set. Internal field
              used in NPM API
        ca:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasCa:
          description: Used when an existing CA is obfuscated in the response
          readOnly: true
          type: boolean
    NPMConfig:
      properties:
        registries:
          description: List of NPM configurations
          items:
            $ref: "#/components/schemas/getOrganizationNPMSettings_200_response_registries_inner"
          type: array
    SourcedLicense:
      example:
        value:
          depth: 1
          licenseId: MIT
          name: MIT License
          matches:
          - npm+svelte$1.0.0
          - git+github.com/org/someproject$abcd1234
          - pip+pandas$9.8.7
          sources:
          - git+github.com/myorg/myrepo$rev001
          - sbom+123/my-sbom-project$1.2.3
          - custom+123/some-cli-project$12345
      properties:
        depth:
          example: 1
          type: integer
        licenseId:
          example: MIT
          type: string
        name:
          example: MIT License
          type: string
        matches:
          example:
          - npm+svelte$1.0.0
          - git+github.com/org/someproject$abcd1234
          - pip+pandas$9.8.7
          items:
            type: string
          type: array
        sources:
          example:
          - git+github.com/myorg/myrepo$rev001
          - sbom+123/my-sbom-project$1.2.3
          - custom+123/some-cli-project$12345
          items:
            type: string
          type: array
    Obligation:
      example:
        summary: An example of a license obligation
        value:
          license: BSD-4-Clause
          description: Describes whether the original copyright must be retained.
          revisions:
            sbom+1/my-sbom-project:
            - npm+svelte$1.1.1
            custom+1/my-cli-project:
            - npm+svelte$1.1.1
      properties:
        description:
          description: The description of the obligation.
          type: string
        license:
          description: The license associated with the obligation.
          type: string
        revisions:
          additionalProperties:
            items:
              type: string
          description: A dictionary where the key is the parent locator and the value
            is an array of locators in which the obligation was found.
    getGitHubAppInstallationUrl_403_response:
      example:
        code: 7
        name: name
        message: message
        uuid: uuid
        httpStatusCode: 9
      properties:
        uuid:
          description: Unique identifier associated with the error
          type: string
        code:
          description: fossa specific error code
          type: integer
        message:
          description: message associated with this error
          type: string
        name:
          description: name of the error
          type: string
        httpStatusCode:
          description: http status code number
          type: integer
    getIssuesByCategory_200_response:
      example:
        vulnerability: 1
        licensing: 0
        quality: 6
      properties:
        licensing:
          type: integer
        quality:
          type: integer
        vulnerability:
          type: integer
    getIssuesByCategory_202_response:
      example:
        vulnerability: 2
        message: message
        licensing: 5
        quality: 5
      properties:
        message:
          type: string
        licensing:
          type: integer
        quality:
          type: integer
        vulnerability:
          type: integer
    getIssuesByType_200_response:
      example:
        policy_flag: 6
        outdated_dependency: 5
        policy_conflict: 0
        vulnerability: 5
        unlicensed_dependency: 1
      properties:
        policy_conflict:
          type: integer
        policy_flag:
          type: integer
        unlicensed_dependency:
          type: integer
        outdated_dependency:
          type: integer
        vulnerability:
          type: integer
    getIssuesByType_202_response:
      example:
        policy_flag: 7
        outdated_dependency: 3
        policy_conflict: 2
        vulnerability: 2
        message: message
        unlicensed_dependency: 9
      properties:
        message:
          type: string
        policy_conflict:
          type: integer
        policy_flag:
          type: integer
        unlicensed_dependency:
          type: integer
        outdated_dependency:
          type: integer
        vulnerability:
          type: integer
    getIssueStatuses_filter_type____parameter:
      oneOf:
      - items:
          enum:
          - policy_conflict
          - policy_flag
          - unlicensed_dependency
          type: string
        type: array
      - items:
          enum:
          - outdated_dependency
          - blacklisted_dependency
          type: string
        type: array
    getIssueStatuses_200_response_issues:
      example:
        ignored: 6
        active: 0
      properties:
        active:
          type: integer
        ignored:
          type: integer
    getIssueStatuses_200_response:
      example:
        revisions:
          ignored: 6
          active: 0
        issues:
          ignored: 6
          active: 0
      properties:
        issues:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
        revisions:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
    getIssueStatuses_202_response:
      example:
        revisions:
          ignored: 6
          active: 0
        message: message
        issues:
          ignored: 6
          active: 0
      properties:
        message:
          type: string
        issues:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
        revisions:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
    getIssueDiffComparisonSummaries_filter_epss__parameter:
      properties:
        type:
          enum:
          - score
          - percentile
          type: string
        min:
          type: number
        max:
          type: number
    getIssueDiffComparisonSummaries_200_response_issues:
      example:
        new: 0
        remediated: 6
        unchanged: 1
      properties:
        new:
          type: integer
        remediated:
          type: integer
        unchanged:
          type: integer
    getIssueDiffComparisonSummaries_200_response:
      example:
        revisions:
          new: 0
          remediated: 6
          unchanged: 1
        issues:
          new: 0
          remediated: 6
          unchanged: 1
      properties:
        issues:
          $ref: "#/components/schemas/getIssueDiffComparisonSummaries_200_response_issues"
        revisions:
          $ref: "#/components/schemas/getIssueDiffComparisonSummaries_200_response_issues"
    getLicenseList_200_response:
      example:
        data:
        - data
        - data
      properties:
        data:
          items:
            type: string
          type: array
    getLicenseList_202_response:
      example:
        data:
        - data
        - data
        message: message
      properties:
        message:
          type: string
        data:
          items:
            type: string
          type: array
    getIssuePackageManagers_200_response:
      example:
        packageManagers:
        - packageManagers
        - packageManagers
      properties:
        packageManagers:
          items:
            type: string
          type: array
    getIssuePackageManagers_202_response:
      example:
        packageManagers:
        - packageManagers
        - packageManagers
        message: message
      properties:
        message:
          type: string
        packageManagers:
          items:
            type: string
          type: array
    getIssueCWEs_teamId___parameter_inner:
      oneOf:
      - type: string
      - type: number
    getIssueCWEs_200_response:
      example:
        cwes:
        - cwes
        - cwes
      properties:
        cwes:
          items:
            type: string
          type: array
    getIssue_200_response_oneOf_allOf_source:
      example:
        name: name
        id: id
        packageManager: packageManager
        version: version
        url: url
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        version:
          type: string
        packageManager:
          type: string
    getIssue_200_response_oneOf_allOf_depths:
      example:
        deep: 1
        direct: 6
      properties:
        direct:
          type: integer
        deep:
          type: integer
    getIssue_200_response_oneOf_allOf_containerLayers:
      example:
        other: 5
        base: 5
      properties:
        base:
          type: integer
        other:
          type: integer
    getIssue_200_response_oneOf_allOf_projects_inner:
      example:
        scannedAt: 2000-01-23T04:56:07.000+00:00
        analyzedAt: 2000-01-23T04:56:07.000+00:00
        defaultBranch: defaultBranch
        originPaths:
        - originPaths
        - originPaths
        title: title
        url: url
        revisionId: revisionId
        depth: 2
        revisionScanId: 7.061401241503109
        firstFoundAt: 2000-01-23T04:56:07.000+00:00
        id: id
        status: status
        latest: true
      properties:
        id:
          type: string
        status:
          type: string
        depth:
          type: integer
        title:
          type: string
        scannedAt:
          format: date-time
          type: string
        analyzedAt:
          format: date-time
          type: string
        url:
          description: A link to the project the issue is from.
          type: string
        originPaths:
          description: |
            Optional array of direct dependency origin paths, only present
            when includeDirectDependencyOriginPaths=true is supplied as a URL param.
          items:
            type: string
          type: array
        firstFoundAt:
          description: The date when the issue was first found for this project or
            release group.
          format: date-time
          type: string
        defaultBranch:
          description: The default branch of the project.
          type: string
        latest:
          description: "Whether this issue is present in the most recent scan of the\
            \ project. If false, the issue may be considered remediated."
          type: boolean
        revisionId:
          description: The ID of the revision that is affected by this issue.
          type: string
        revisionScanId:
          description: The ID of the revision scan associated with this issue.
          type: number
    getIssue_200_response_oneOf_allOf_remediation:
      example:
        completeFix: completeFix
        partialFixDistance: MAJOR
        completeFixDistance: MAJOR
        partialFix: partialFix
      properties:
        partialFix:
          type: string
        partialFixDistance:
          enum:
          - MAJOR
          - MINOR
          - PATCH
          type: string
        completeFix:
          type: string
        completeFixDistance:
          enum:
          - MAJOR
          - MINOR
          - PATCH
          type: string
    getIssue_200_response_oneOf_allOf_metrics_inner:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
    getIssue_200_response_oneOf_allOf_epss:
      example:
        score: 3.616076749251911
        percentile: 2.027123023002322
      properties:
        score:
          type: number
        percentile:
          type: number
    getIssue_200_response_oneOf_allOf_source_1:
      allOf:
      - properties:
          id:
            type: string
          name:
            type: string
          url:
            type: string
          version:
            type: string
          packageManager:
            type: string
      - properties:
          isCorrected:
            type: boolean
      example:
        name: name
        id: id
        packageManager: packageManager
        isCorrected: true
        version: version
        url: url
    getIssue_200_response_oneOf:
      allOf:
      - properties:
          id:
            type: integer
          createdAt:
            format: date-time
            type: string
          source:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source"
          depths:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_depths"
          containerLayers:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_containerLayers"
          statuses:
            $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
          projects:
            items:
              $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_projects_inner"
            type: array
          type:
            type: string
          vulnId:
            type: string
          title:
            type: string
          cve:
            type: string
          cvss:
            type: number
          cvssVector:
            description: "The CVSS Vector for the vuln. Prefers the V3 vector if it\
              \ exists, and falls back to the V2 vector. Is null if neither vector\
              \ exists."
            type: string
          severity:
            type: string
          details:
            type: string
          remediation:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_remediation"
          metrics:
            items:
              $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_metrics_inner"
            type: array
          cveStatus:
            type: string
          cwes:
            items:
              type: string
            type: array
          cpes:
            items:
              type: string
            type: array
          published:
            format: date-time
            type: string
          affectedVersionRanges:
            items:
              type: string
            type: array
          patchedVersionRanges:
            items:
              type: string
            type: array
          references:
            items:
              type: string
            type: array
          exploitability:
            enum:
            - UNKNOWN
            - POC
            - MATURE
            type: string
          epss:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_epss"
      - properties:
          source:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source_1"
      example:
        patchedVersionRanges:
        - patchedVersionRanges
        - patchedVersionRanges
        projects:
        - scannedAt: 2000-01-23T04:56:07.000+00:00
          analyzedAt: 2000-01-23T04:56:07.000+00:00
          defaultBranch: defaultBranch
          originPaths:
          - originPaths
          - originPaths
          title: title
          url: url
          revisionId: revisionId
          depth: 2
          revisionScanId: 7.061401241503109
          firstFoundAt: 2000-01-23T04:56:07.000+00:00
          id: id
          status: status
          latest: true
        - scannedAt: 2000-01-23T04:56:07.000+00:00
          analyzedAt: 2000-01-23T04:56:07.000+00:00
          defaultBranch: defaultBranch
          originPaths:
          - originPaths
          - originPaths
          title: title
          url: url
          revisionId: revisionId
          depth: 2
          revisionScanId: 7.061401241503109
          firstFoundAt: 2000-01-23T04:56:07.000+00:00
          id: id
          status: status
          latest: true
        vulnId: vulnId
        references:
        - references
        - references
        source:
          name: name
          id: id
          packageManager: packageManager
          isCorrected: true
          version: version
          url: url
        type: type
        title: title
        cwes:
        - cwes
        - cwes
        createdAt: 2000-01-23T04:56:07.000+00:00
        remediation:
          completeFix: completeFix
          partialFixDistance: MAJOR
          completeFixDistance: MAJOR
          partialFix: partialFix
        cve: cve
        details: details
        id: 0
        affectedVersionRanges:
        - affectedVersionRanges
        - affectedVersionRanges
        severity: severity
        epss:
          score: 3.616076749251911
          percentile: 2.027123023002322
        published: 2000-01-23T04:56:07.000+00:00
        cveStatus: cveStatus
        cvssVector: cvssVector
        cpes:
        - cpes
        - cpes
        depths:
          deep: 1
          direct: 6
        containerLayers:
          other: 5
          base: 5
        statuses:
          ignored: 6
          active: 0
        metrics:
        - name: name
          value: value
        - name: name
          value: value
        cvss: 9.301444243932576
        exploitability: UNKNOWN
    getIssue_200_response_oneOf_1:
      allOf:
      - properties:
          id:
            type: integer
          createdAt:
            format: date-time
            type: string
          source:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source"
          depths:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_depths"
          containerLayers:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_containerLayers"
          statuses:
            $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
          projects:
            items:
              $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_projects_inner"
            type: array
          type:
            type: string
          license:
            type: string
      - properties:
          source:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source_1"
    getIssue_200_response_oneOf_2_allOf_qualityRule:
      properties:
        ruleId:
          type: integer
        type:
          type: string
        notes:
          nullable: true
          type: string
        dependencyOutdatedType:
          enum:
          - FALLBACK
          - SEMVER
          nullable: true
          type: string
        dependencyOutdatedVersionPart:
          enum:
          - MAJOR
          - PATCH
          - MINOR
          nullable: true
          type: string
        dependencyOutdatedVersionDiff:
          nullable: true
          type: string
        dependencyFilterName:
          nullable: true
          type: string
        dependencyFilterVersionType:
          enum:
          - RANGE
          - LESS
          - EQUAL
          - GREATER
          - ALL
          nullable: true
          type: string
        dependencyFilterStartVersion:
          type: string
        dependencyFilterEndVersion:
          nullable: true
          type: string
        enabled:
          type: boolean
        packageProjectLocator:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
    getIssue_200_response_oneOf_2:
      allOf:
      - properties:
          id:
            type: integer
          createdAt:
            format: date-time
            type: string
          source:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source"
          depths:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_depths"
          containerLayers:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_containerLayers"
          statuses:
            $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
          projects:
            items:
              $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_projects_inner"
            type: array
          type:
            type: string
          qualityRule:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_2_allOf_qualityRule"
      - properties:
          source:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source_1"
    getIssue_200_response:
      oneOf:
      - $ref: "#/components/schemas/getIssue_200_response_oneOf"
      - $ref: "#/components/schemas/getIssue_200_response_oneOf_1"
      - $ref: "#/components/schemas/getIssue_200_response_oneOf_2"
    createIssueDispute_request:
      properties:
        reason:
          description: The reason why this issue is being disputed.
          enum:
          - INCORRECT_DEPENDENCY_VERSION_REPORTED
          - LICENSE_DETECTION_FALSE_POSITIVE
          - MULTI_OR_DUAL_LICENSED
          type: string
        comment:
          description: Any additional information that is important for this dispute.
          type: string
    createIssueDispute_200_response:
      example:
        createdAt: 2000-01-23
        reason: INCORRECT_DEPENDENCY_VERSION_REPORTED
        resolvedAt: 2000-01-23
        createdBy: 6.027456183070403
        disputedIssueId: 1.4658129805029452
        resolvedBy: 5.962133916683182
        comment: comment
        id: 0.8008281904610115
        licenseId: licenseId
      properties:
        id:
          type: number
        createdBy:
          type: number
        createdAt:
          format: date
          type: string
        licenseId:
          type: string
        disputedIssueId:
          type: number
        reason:
          description: The reason why this issue is being disputed.
          enum:
          - INCORRECT_DEPENDENCY_VERSION_REPORTED
          - LICENSE_DETECTION_FALSE_POSITIVE
          - MULTI_OR_DUAL_LICENSED
          type: string
        comment:
          type: string
        resolvedAt:
          format: date
          type: string
        resolvedBy:
          type: number
    getIssueAffectedProjects_200_response_inner:
      example:
        revisionId: revisionId
        jiraTicketId: jiraTicketId
        jiraTicketURL: jiraTicketURL
        id: id
        title: title
        type: jira
        branch: branch
        status: status
      properties:
        id:
          description: Project ID
          type: string
        revisionId:
          description: Revision ID
          type: string
        title:
          description: Project title
          type: string
        status:
          description: Project status
          type: string
        branch:
          description: Default or Release Group Project's revision branch
          type: string
        jiraTicketId:
          description: Jira ticket ID
          type: string
        jiraTicketURL:
          description: Jira ticket URL
          type: string
        type:
          description: The type of ticket export
          enum:
          - jira
          type: string
    getIssues_200_response_issues_oneOf_inner:
      example:
        patchedVersionRanges:
        - patchedVersionRanges
        - patchedVersionRanges
        projects:
        - scannedAt: 2000-01-23T04:56:07.000+00:00
          analyzedAt: 2000-01-23T04:56:07.000+00:00
          defaultBranch: defaultBranch
          originPaths:
          - originPaths
          - originPaths
          title: title
          url: url
          revisionId: revisionId
          depth: 2
          revisionScanId: 7.061401241503109
          firstFoundAt: 2000-01-23T04:56:07.000+00:00
          id: id
          status: status
          latest: true
        - scannedAt: 2000-01-23T04:56:07.000+00:00
          analyzedAt: 2000-01-23T04:56:07.000+00:00
          defaultBranch: defaultBranch
          originPaths:
          - originPaths
          - originPaths
          title: title
          url: url
          revisionId: revisionId
          depth: 2
          revisionScanId: 7.061401241503109
          firstFoundAt: 2000-01-23T04:56:07.000+00:00
          id: id
          status: status
          latest: true
        vulnId: vulnId
        references:
        - references
        - references
        source:
          name: name
          id: id
          packageManager: packageManager
          version: version
          url: url
        type: type
        title: title
        cwes:
        - cwes
        - cwes
        createdAt: 2000-01-23T04:56:07.000+00:00
        remediation:
          completeFix: completeFix
          partialFixDistance: MAJOR
          completeFixDistance: MAJOR
          partialFix: partialFix
        cve: cve
        details: details
        id: 0
        affectedVersionRanges:
        - affectedVersionRanges
        - affectedVersionRanges
        severity: severity
        epss:
          score: 3.616076749251911
          percentile: 2.027123023002322
        published: 2000-01-23T04:56:07.000+00:00
        cveStatus: cveStatus
        cvssVector: cvssVector
        cpes:
        - cpes
        - cpes
        depths:
          deep: 1
          direct: 6
        containerLayers:
          other: 5
          base: 5
        statuses:
          ignored: 6
          active: 0
        metrics:
        - name: name
          value: value
        - name: name
          value: value
        cvss: 6.027456183070403
        exploitability: UNKNOWN
      properties:
        id:
          type: integer
        createdAt:
          format: date-time
          type: string
        source:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source"
        depths:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_depths"
        containerLayers:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_containerLayers"
        statuses:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
        projects:
          items:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_projects_inner"
          type: array
        type:
          type: string
        vulnId:
          type: string
        title:
          type: string
        cve:
          type: string
        cvss:
          type: number
        cvssVector:
          description: "The CVSS Vector for the vuln. Prefers the V3 vector if it\
            \ exists, and falls back to the V2 vector. Is null if neither vector exists."
          type: string
        severity:
          type: string
        details:
          type: string
        remediation:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_remediation"
        metrics:
          items:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_metrics_inner"
          type: array
        cveStatus:
          type: string
        cwes:
          items:
            type: string
          type: array
        cpes:
          items:
            type: string
          type: array
        published:
          format: date-time
          type: string
        affectedVersionRanges:
          items:
            type: string
          type: array
        patchedVersionRanges:
          items:
            type: string
          type: array
        references:
          items:
            type: string
          type: array
        exploitability:
          enum:
          - UNKNOWN
          - POC
          - MATURE
          type: string
        epss:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_epss"
    getIssues_200_response_issues_oneOf_inner_1:
      properties:
        id:
          type: integer
        createdAt:
          format: date-time
          type: string
        source:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source"
        depths:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_depths"
        containerLayers:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_containerLayers"
        statuses:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
        projects:
          items:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_projects_inner"
          type: array
        type:
          type: string
        license:
          type: string
    getIssues_200_response_issues_oneOf_inner_2:
      properties:
        id:
          type: integer
        createdAt:
          format: date-time
          type: string
        source:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_source"
        depths:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_depths"
        containerLayers:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_containerLayers"
        statuses:
          $ref: "#/components/schemas/getIssueStatuses_200_response_issues"
        projects:
          items:
            $ref: "#/components/schemas/getIssue_200_response_oneOf_allOf_projects_inner"
          type: array
        type:
          type: string
        qualityRule:
          $ref: "#/components/schemas/getIssue_200_response_oneOf_2_allOf_qualityRule"
    getIssues_200_response_issues:
      oneOf:
      - items:
          $ref: "#/components/schemas/getIssues_200_response_issues_oneOf_inner"
        type: array
      - items:
          $ref: "#/components/schemas/getIssues_200_response_issues_oneOf_inner_1"
        type: array
      - items:
          $ref: "#/components/schemas/getIssues_200_response_issues_oneOf_inner_2"
        type: array
    getIssues_200_response:
      example:
        issues:
        - patchedVersionRanges:
          - patchedVersionRanges
          - patchedVersionRanges
          projects:
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          vulnId: vulnId
          references:
          - references
          - references
          source:
            name: name
            id: id
            packageManager: packageManager
            version: version
            url: url
          type: type
          title: title
          cwes:
          - cwes
          - cwes
          createdAt: 2000-01-23T04:56:07.000+00:00
          remediation:
            completeFix: completeFix
            partialFixDistance: MAJOR
            completeFixDistance: MAJOR
            partialFix: partialFix
          cve: cve
          details: details
          id: 0
          affectedVersionRanges:
          - affectedVersionRanges
          - affectedVersionRanges
          severity: severity
          epss:
            score: 3.616076749251911
            percentile: 2.027123023002322
          published: 2000-01-23T04:56:07.000+00:00
          cveStatus: cveStatus
          cvssVector: cvssVector
          cpes:
          - cpes
          - cpes
          depths:
            deep: 1
            direct: 6
          containerLayers:
            other: 5
            base: 5
          statuses:
            ignored: 6
            active: 0
          metrics:
          - name: name
            value: value
          - name: name
            value: value
          cvss: 6.027456183070403
          exploitability: UNKNOWN
        - patchedVersionRanges:
          - patchedVersionRanges
          - patchedVersionRanges
          projects:
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          vulnId: vulnId
          references:
          - references
          - references
          source:
            name: name
            id: id
            packageManager: packageManager
            version: version
            url: url
          type: type
          title: title
          cwes:
          - cwes
          - cwes
          createdAt: 2000-01-23T04:56:07.000+00:00
          remediation:
            completeFix: completeFix
            partialFixDistance: MAJOR
            completeFixDistance: MAJOR
            partialFix: partialFix
          cve: cve
          details: details
          id: 0
          affectedVersionRanges:
          - affectedVersionRanges
          - affectedVersionRanges
          severity: severity
          epss:
            score: 3.616076749251911
            percentile: 2.027123023002322
          published: 2000-01-23T04:56:07.000+00:00
          cveStatus: cveStatus
          cvssVector: cvssVector
          cpes:
          - cpes
          - cpes
          depths:
            deep: 1
            direct: 6
          containerLayers:
            other: 5
            base: 5
          statuses:
            ignored: 6
            active: 0
          metrics:
          - name: name
            value: value
          - name: name
            value: value
          cvss: 6.027456183070403
          exploitability: UNKNOWN
      properties:
        issues:
          $ref: "#/components/schemas/getIssues_200_response_issues"
    getIssues_202_response:
      example:
        message: message
        issues:
        - patchedVersionRanges:
          - patchedVersionRanges
          - patchedVersionRanges
          projects:
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          vulnId: vulnId
          references:
          - references
          - references
          source:
            name: name
            id: id
            packageManager: packageManager
            version: version
            url: url
          type: type
          title: title
          cwes:
          - cwes
          - cwes
          createdAt: 2000-01-23T04:56:07.000+00:00
          remediation:
            completeFix: completeFix
            partialFixDistance: MAJOR
            completeFixDistance: MAJOR
            partialFix: partialFix
          cve: cve
          details: details
          id: 0
          affectedVersionRanges:
          - affectedVersionRanges
          - affectedVersionRanges
          severity: severity
          epss:
            score: 3.616076749251911
            percentile: 2.027123023002322
          published: 2000-01-23T04:56:07.000+00:00
          cveStatus: cveStatus
          cvssVector: cvssVector
          cpes:
          - cpes
          - cpes
          depths:
            deep: 1
            direct: 6
          containerLayers:
            other: 5
            base: 5
          statuses:
            ignored: 6
            active: 0
          metrics:
          - name: name
            value: value
          - name: name
            value: value
          cvss: 6.027456183070403
          exploitability: UNKNOWN
        - patchedVersionRanges:
          - patchedVersionRanges
          - patchedVersionRanges
          projects:
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          - scannedAt: 2000-01-23T04:56:07.000+00:00
            analyzedAt: 2000-01-23T04:56:07.000+00:00
            defaultBranch: defaultBranch
            originPaths:
            - originPaths
            - originPaths
            title: title
            url: url
            revisionId: revisionId
            depth: 2
            revisionScanId: 7.061401241503109
            firstFoundAt: 2000-01-23T04:56:07.000+00:00
            id: id
            status: status
            latest: true
          vulnId: vulnId
          references:
          - references
          - references
          source:
            name: name
            id: id
            packageManager: packageManager
            version: version
            url: url
          type: type
          title: title
          cwes:
          - cwes
          - cwes
          createdAt: 2000-01-23T04:56:07.000+00:00
          remediation:
            completeFix: completeFix
            partialFixDistance: MAJOR
            completeFixDistance: MAJOR
            partialFix: partialFix
          cve: cve
          details: details
          id: 0
          affectedVersionRanges:
          - affectedVersionRanges
          - affectedVersionRanges
          severity: severity
          epss:
            score: 3.616076749251911
            percentile: 2.027123023002322
          published: 2000-01-23T04:56:07.000+00:00
          cveStatus: cveStatus
          cvssVector: cvssVector
          cpes:
          - cpes
          - cpes
          depths:
            deep: 1
            direct: 6
          containerLayers:
            other: 5
            base: 5
          statuses:
            ignored: 6
            active: 0
          metrics:
          - name: name
            value: value
          - name: name
            value: value
          cvss: 6.027456183070403
          exploitability: UNKNOWN
      properties:
        message:
          type: string
        issues:
          $ref: "#/components/schemas/getIssues_200_response_issues"
    updateIssues_request_oneOf:
      properties:
        type:
          enum:
          - ignore
          type: string
        notes:
          type: string
        reason:
          type: string
    updateIssues_request_oneOf_1_ticket_oneOf_uniqueTickets_inner:
      properties:
        title:
          type: string
        content:
          type: string
        issueId:
          type: number
    updateIssues_request_oneOf_1_ticket_oneOf_customFields_inner:
      properties:
        fieldId:
          type: string
        value:
          type: string
    updateIssues_request_oneOf_1_ticket_oneOf_components_inner:
      properties:
        id:
          type: string
    updateIssues_request_oneOf_1_ticket_oneOf:
      properties:
        type:
          enum:
          - jira
          type: string
        title:
          type: string
        description:
          type: string
        uniqueTickets:
          items:
            $ref: "#/components/schemas/updateIssues_request_oneOf_1_ticket_oneOf_uniqueTickets_inner"
          type: array
        trackerId:
          type: string
        jiraId:
          type: string
        issueType:
          type: string
        labels:
          items:
            type: string
          type: array
        customFields:
          items:
            $ref: "#/components/schemas/updateIssues_request_oneOf_1_ticket_oneOf_customFields_inner"
          type: array
        components:
          items:
            $ref: "#/components/schemas/updateIssues_request_oneOf_1_ticket_oneOf_components_inner"
          type: array
    updateIssues_request_oneOf_1_ticket_oneOf_1:
      properties:
        type:
          enum:
          - custom
          type: string
        url:
          type: string
        comment:
          type: string
    updateIssues_request_oneOf_1_ticket:
      oneOf:
      - $ref: "#/components/schemas/updateIssues_request_oneOf_1_ticket_oneOf"
      - $ref: "#/components/schemas/updateIssues_request_oneOf_1_ticket_oneOf_1"
    updateIssues_request_oneOf_1:
      properties:
        type:
          enum:
          - export
          type: string
        ticket:
          $ref: "#/components/schemas/updateIssues_request_oneOf_1_ticket"
    updateIssues_request_oneOf_2:
      properties:
        type:
          enum:
          - unlink
          type: string
    updateIssues_request_oneOf_3:
      properties:
        type:
          enum:
          - unignore
          type: string
    updateIssues_request_oneOf_4:
      properties:
        type:
          enum:
          - issueException
          type: string
        packageScope:
          enum:
          - SELECTED_VERSION
          - ALL_VERSIONS
          type: string
        ignoreScope:
          enum:
          - ORGANIZATION
          - POLICY
          - PROJECT
          - RELEASE_GROUP
          - PROJECT_AND_RELEASE_GROUPS
          type: string
        expiresAfter:
          description: |
            The UTC date after which the exception will expire. If not provided, the exception will never expire.
          format: date
          type: string
          nullable: true
        notes:
          description: |
            This is a free-form field for users to provide additional context for the exception. This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports
          type: string
        reason:
          description: |
            Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
          enum:
          - Fixed
          - Under_investigation
          - Vulnerable_code_not_present
          - Vulnerable_code_cannot_be_controlled
          - Component_not_present
          - Vulnerable_code_not_in_execute_path
          - Inline_mitigations_already_exist
          - incorrect_data_found
          - other
          type: string
        licenseId:
          description: |
            Set a license ID to create exceptions for a specific license ID.
          type: string
    updateIssues_request:
      oneOf:
      - $ref: "#/components/schemas/updateIssues_request_oneOf"
      - $ref: "#/components/schemas/updateIssues_request_oneOf_1"
      - $ref: "#/components/schemas/updateIssues_request_oneOf_2"
      - $ref: "#/components/schemas/updateIssues_request_oneOf_3"
      - $ref: "#/components/schemas/updateIssues_request_oneOf_4"
    updateIssues_200_response:
      example:
        count: 0
      properties:
        count:
          type: integer
    getIssuesByRevision_200_response_revisions_inner_depth:
      example:
        direct: 5
        transitive: 5
      properties:
        direct:
          type: integer
        transitive:
          type: integer
    getIssuesByRevision_200_response_revisions_inner_type_oneOf:
      example:
        policy_flag: 7
        policy_conflict: 2
        unlicensed_dependency: 9
      properties:
        policy_conflict:
          type: integer
        policy_flag:
          type: integer
        unlicensed_dependency:
          type: integer
    getIssuesByRevision_200_response_revisions_inner_type_oneOf_1:
      properties:
        outdated_dependency:
          type: integer
        blacklisted_dependency:
          type: integer
    getIssuesByRevision_200_response_revisions_inner_type_oneOf_2:
      properties:
        critical:
          type: integer
        high:
          type: integer
        medium:
          type: integer
        low:
          type: integer
        unknown:
          type: integer
    getIssuesByRevision_200_response_revisions_inner_type:
      oneOf:
      - $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner_type_oneOf"
      - $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner_type_oneOf_1"
      - $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner_type_oneOf_2"
    getIssuesByRevision_200_response_revisions_inner:
      example:
        revisionId: revisionId
        jiraTicketCount: 1
        projectCount: 6
        depth:
          direct: 5
          transitive: 5
        dependencyName: dependencyName
        type:
          policy_flag: 7
          policy_conflict: 2
          unlicensed_dependency: 9
        issueCount: 0
      properties:
        revisionId:
          type: string
        dependencyName:
          type: string
        issueCount:
          type: integer
        projectCount:
          type: integer
        jiraTicketCount:
          type: integer
        depth:
          $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner_depth"
        type:
          $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner_type"
    getIssuesByRevision_200_response:
      example:
        revisions:
        - revisionId: revisionId
          jiraTicketCount: 1
          projectCount: 6
          depth:
            direct: 5
            transitive: 5
          dependencyName: dependencyName
          type:
            policy_flag: 7
            policy_conflict: 2
            unlicensed_dependency: 9
          issueCount: 0
        - revisionId: revisionId
          jiraTicketCount: 1
          projectCount: 6
          depth:
            direct: 5
            transitive: 5
          dependencyName: dependencyName
          type:
            policy_flag: 7
            policy_conflict: 2
            unlicensed_dependency: 9
          issueCount: 0
      properties:
        revisions:
          items:
            $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner"
          type: array
    getIssuesByRevision_202_response:
      example:
        revisions:
        - revisionId: revisionId
          jiraTicketCount: 1
          projectCount: 6
          depth:
            direct: 5
            transitive: 5
          dependencyName: dependencyName
          type:
            policy_flag: 7
            policy_conflict: 2
            unlicensed_dependency: 9
          issueCount: 0
        - revisionId: revisionId
          jiraTicketCount: 1
          projectCount: 6
          depth:
            direct: 5
            transitive: 5
          dependencyName: dependencyName
          type:
            policy_flag: 7
            policy_conflict: 2
            unlicensed_dependency: 9
          issueCount: 0
        message: message
      properties:
        message:
          type: string
        revisions:
          items:
            $ref: "#/components/schemas/getIssuesByRevision_200_response_revisions_inner"
          type: array
    getGlobalIssuesCSV_200_response:
      description: "When an email is provided in the query parameter, we will queue\
        \ the Report as a background task, and return information for the given job"
      properties:
        task:
          type: string
        jobToken:
          type: string
    getIssueExceptions_200_response_exceptions_inner:
      example:
        packageScope: SELECTED_VERSION
        note: note
        reason: reason
        exceptionUserPolicyId: 1
        issueCategory: licensing
        dependencyTitle: dependencyTitle
        ignoreScope: ORGANIZATION
        dependencyProjectLocator: dependencyProjectLocator
        condition: "{}"
        policyTitle: policyTitle
        dependencyRevisionLocator: dependencyRevisionLocator
        createdBy: createdBy
        exceptionUserProjectId: exceptionUserProjectId
        exceptionUserReleaseGroupId: 6
        id: 0
        exceptionTitle: exceptionTitle
        projectTitle: projectTitle
      properties:
        id:
          type: integer
        ignoreScope:
          enum:
          - ORGANIZATION
          - POLICY
          - PROJECT
          - RELEASE_GROUP
          - PROJECT_AND_RELEASE_GROUPS
          type: string
        packageScope:
          enum:
          - SELECTED_VERSION
          - ALL_VERSIONS
          type: string
        issueCategory:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        exceptionUserProjectId:
          type: string
        exceptionUserReleaseGroupId:
          type: integer
        exceptionUserPolicyId:
          type: integer
        projectTitle:
          type: string
        dependencyProjectLocator:
          type: string
        dependencyRevisionLocator:
          type: string
        dependencyTitle:
          type: string
        condition:
          type: object
        exceptionTitle:
          type: string
        note:
          type: string
        createdBy:
          type: string
        reason:
          type: string
        policyTitle:
          type: string
    getIssueExceptions_200_response:
      example:
        total: 5
        exceptions:
        - packageScope: SELECTED_VERSION
          note: note
          reason: reason
          exceptionUserPolicyId: 1
          issueCategory: licensing
          dependencyTitle: dependencyTitle
          ignoreScope: ORGANIZATION
          dependencyProjectLocator: dependencyProjectLocator
          condition: "{}"
          policyTitle: policyTitle
          dependencyRevisionLocator: dependencyRevisionLocator
          createdBy: createdBy
          exceptionUserProjectId: exceptionUserProjectId
          exceptionUserReleaseGroupId: 6
          id: 0
          exceptionTitle: exceptionTitle
          projectTitle: projectTitle
        - packageScope: SELECTED_VERSION
          note: note
          reason: reason
          exceptionUserPolicyId: 1
          issueCategory: licensing
          dependencyTitle: dependencyTitle
          ignoreScope: ORGANIZATION
          dependencyProjectLocator: dependencyProjectLocator
          condition: "{}"
          policyTitle: policyTitle
          dependencyRevisionLocator: dependencyRevisionLocator
          createdBy: createdBy
          exceptionUserProjectId: exceptionUserProjectId
          exceptionUserReleaseGroupId: 6
          id: 0
          exceptionTitle: exceptionTitle
          projectTitle: projectTitle
      properties:
        exceptions:
          items:
            $ref: "#/components/schemas/getIssueExceptions_200_response_exceptions_inner"
          type: array
        total:
          type: integer
    deleteIssueExceptions_request_oneOf_filters:
      properties:
        policyId:
          type: integer
        projectId:
          type: string
        releaseGroupId:
          type: integer
        category:
          enum:
          - licensing
          type: string
    deleteIssueExceptions_request_oneOf:
      properties:
        kind:
          enum:
          - all
          type: string
        filters:
          $ref: "#/components/schemas/deleteIssueExceptions_request_oneOf_filters"
    deleteIssueExceptions_request_oneOf_1:
      properties:
        kind:
          enum:
          - idList
          type: string
        value:
          items:
            type: integer
          type: array
    deleteIssueExceptions_request:
      oneOf:
      - $ref: "#/components/schemas/deleteIssueExceptions_request_oneOf"
      - $ref: "#/components/schemas/deleteIssueExceptions_request_oneOf_1"
    listSavedFilters_200_response_inner:
      example:
        filter:
          key: ""
        name: name
        id: 0
        sort: severity_asc
        category: licensing
        group: issue
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        filter:
          additionalProperties:
            type: json
          description: A JSON object representing the specific filter criteria.
        sort:
          description: Can be any of the sort options related to issue or revision.
          enum:
          - severity_asc
          - severity_desc
          - issue_count_asc
          - issue_count_desc
          - created_at_asc
          - created_at_desc
          - package_asc
          - package_desc
          - epss_asc
          - epss_desc
          type: string
        group:
          enum:
          - issue
          - revision
          type: string
    createSavedFilter_request_filter_oneOf:
      properties:
        type:
          enum:
          - policy_conflict
          - policy_flag
          - unlicensed_dependency
          type: string
        identification:
          enum:
          - declared
          - discovered
          type: string
        packageManagers:
          items:
            type: string
          type: array
        projectLabels:
          items:
            type: string
          type: array
        search:
          type: string
        ticketed:
          enum:
          - jira
          - custom
          - has_ticket
          - no_ticket
          type: string
        revisionIds:
          items:
            type: string
          type: array
        containerLayers:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        foundAfter:
          format: date-time
          type: string
    createSavedFilter_request_filter_oneOf_1:
      properties:
        severity:
          enum:
          - critical
          - high
          - medium
          - low
          - unknown
          type: string
        hasFix:
          enum:
          - has_fix
          - no_fix
          type: string
        upgradeDistance:
          enum:
          - none
          - major
          - minor
          - patch
          - unknown
          type: string
        exploitMaturity:
          enum:
          - has_known_exploit
          - no_known_exploit
          type: string
        ignoreReason:
          description: |
            Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports.
          enum:
          - Fixed
          - Under_investigation
          - Vulnerable_code_not_present
          - Vulnerable_code_cannot_be_controlled
          - Component_not_present
          - Vulnerable_code_not_in_execute_path
          - Inline_mitigations_already_exist
          - incorrect_data_found
          - other
          type: string
        reachability:
          enum:
          - reachable
          - unknown
          type: string
        cwes:
          items:
            type: string
          type: array
        packageManagers:
          items:
            type: string
          type: array
        projectLabels:
          items:
            type: string
          type: array
        search:
          type: string
        ticketed:
          enum:
          - jira
          - custom
          - has_ticket
          - no_ticket
          type: string
        revisionIds:
          items:
            type: string
          type: array
        containerLayers:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        foundAfter:
          format: date-time
          type: string
    createSavedFilter_request_filter_oneOf_2:
      properties:
        type:
          enum:
          - outdated_dependency
          - blacklisted_dependency
          - risk_abandonware
          - risk_empty_package
          - risk_native_code
          type: string
        search:
          type: string
        ticketed:
          enum:
          - jira
          - custom
          - has_ticket
          - no_ticket
          type: string
        packageManagers:
          items:
            type: string
          type: array
        projectLabels:
          items:
            type: string
          type: array
        revisionIds:
          items:
            type: string
          type: array
        containerLayers:
          items:
            enum:
            - baseLayer
            - otherLayer
            type: string
          type: array
        foundAfter:
          format: date-time
          type: string
    createSavedFilter_request_filter:
      oneOf:
      - $ref: "#/components/schemas/createSavedFilter_request_filter_oneOf"
      - $ref: "#/components/schemas/createSavedFilter_request_filter_oneOf_1"
      - $ref: "#/components/schemas/createSavedFilter_request_filter_oneOf_2"
    createSavedFilter_request:
      properties:
        category:
          enum:
          - licensing
          - vulnerability
          - quality
          type: string
        name:
          type: string
        filter:
          $ref: "#/components/schemas/createSavedFilter_request_filter"
        sort:
          description: Can be any of the sort options related to issue or revision.
          enum:
          - severity_asc
          - severity_desc
          - issue_count_asc
          - issue_count_desc
          - created_at_asc
          - created_at_desc
          - package_asc
          - package_desc
          - epss_asc
          - epss_desc
          type: string
        group:
          enum:
          - issue
          - revision
          type: string
    updateSavedFilter_request:
      properties:
        name:
          type: string
        filter:
          $ref: "#/components/schemas/createSavedFilter_request_filter"
        sort:
          description: Can be any of the sort options related to issue or revision.
          enum:
          - severity_asc
          - severity_desc
          - issue_count_asc
          - issue_count_desc
          - created_at_asc
          - created_at_desc
          - package_asc
          - package_desc
          - epss_asc
          - epss_desc
          type: string
        group:
          enum:
          - issue
          - revision
          type: string
    getIssueCounts_200_response_counts:
      description: An array of daily issue count summaries.
      example:
        date: 2023-12-19T20:09:12.583Z
        ignored: 241
        remediated: 51
        active: 10
      properties:
        date:
          example: 2023-12-19T20:09:12.583Z
          format: date-time
          type: string
        active:
          example: 10
          minimum: 0
          type: integer
        ignored:
          example: 241
          minimum: 0
          type: integer
        remediated:
          example: 51
          minimum: 0
          type: integer
    getIssueCounts_200_response_licensing_type:
      example:
        policy_flag: 210
        policy_conflict: 59
        unlicensed_dependency: 2
      properties:
        policy_conflict:
          example: 59
          minimum: 0
          type: integer
        policy_flag:
          example: 210
          minimum: 0
          type: integer
        unlicensed_dependency:
          example: 2
          minimum: 0
          type: integer
    getIssueCounts_200_response_licensing_status:
      example:
        ignored: 4
        remediated: 0
        active: 271
      properties:
        active:
          example: 271
          minimum: 0
          type: integer
        ignored:
          example: 4
          minimum: 0
          type: integer
        remediated:
          example: 0
          minimum: 0
          type: integer
    getIssueCounts_200_response_licensing:
      example:
        type:
          policy_flag: 210
          policy_conflict: 59
          unlicensed_dependency: 2
        status:
          ignored: 4
          remediated: 0
          active: 271
      properties:
        type:
          $ref: "#/components/schemas/getIssueCounts_200_response_licensing_type"
        status:
          $ref: "#/components/schemas/getIssueCounts_200_response_licensing_status"
    getIssueCounts_200_response_vulnerability_type:
      example:
        high: 52
        critical: 11
        low: 99
        medium: 4
        unknown: 42
      properties:
        critical:
          example: 11
          minimum: 0
          type: integer
        high:
          example: 52
          minimum: 0
          type: integer
        medium:
          example: 4
          minimum: 0
          type: integer
        low:
          example: 99
          minimum: 0
          type: integer
        unknown:
          example: 42
          minimum: 0
          type: integer
    getIssueCounts_200_response_vulnerability_status:
      example:
        ignored: 2
        remediated: 5
        active: 208
      properties:
        active:
          example: 208
          minimum: 0
          type: integer
        ignored:
          example: 2
          minimum: 0
          type: integer
        remediated:
          example: 5
          minimum: 0
          type: integer
    getIssueCounts_200_response_vulnerability:
      example:
        type:
          high: 52
          critical: 11
          low: 99
          medium: 4
          unknown: 42
        status:
          ignored: 2
          remediated: 5
          active: 208
      properties:
        type:
          $ref: "#/components/schemas/getIssueCounts_200_response_vulnerability_type"
        status:
          $ref: "#/components/schemas/getIssueCounts_200_response_vulnerability_status"
    getIssueCounts_200_response_quality_type:
      example:
        outdated_dependency: 40
        blacklisted_dependency: 19
        risk_abandonware: 16
        risk_native-code: 6
        risk_empty-package: 1
      properties:
        outdated_dependency:
          example: 40
          minimum: 0
          type: integer
        blacklisted_dependency:
          example: 19
          minimum: 0
          type: integer
        risk_abandonware:
          example: 16
          minimum: 0
          type: integer
        risk_empty-package:
          example: 1
          minimum: 0
          type: integer
        risk_native-code:
          example: 6
          minimum: 0
          type: integer
    getIssueCounts_200_response_quality_status:
      example:
        ignored: 25
        remediated: 6
        active: 82
      properties:
        active:
          example: 82
          minimum: 0
          type: integer
        ignored:
          example: 25
          minimum: 0
          type: integer
        remediated:
          example: 6
          minimum: 0
          type: integer
    getIssueCounts_200_response_quality:
      example:
        type:
          outdated_dependency: 40
          blacklisted_dependency: 19
          risk_abandonware: 16
          risk_native-code: 6
          risk_empty-package: 1
        status:
          ignored: 25
          remediated: 6
          active: 82
      properties:
        type:
          $ref: "#/components/schemas/getIssueCounts_200_response_quality_type"
        status:
          $ref: "#/components/schemas/getIssueCounts_200_response_quality_status"
    getIssueCounts_200_response:
      example:
        totalProjects: 9
        counts:
          date: 2023-12-19T20:09:12.583Z
          ignored: 241
          remediated: 51
          active: 10
        vulnerability:
          type:
            high: 52
            critical: 11
            low: 99
            medium: 4
            unknown: 42
          status:
            ignored: 2
            remediated: 5
            active: 208
        licensing:
          type:
            policy_flag: 210
            policy_conflict: 59
            unlicensed_dependency: 2
          status:
            ignored: 4
            remediated: 0
            active: 271
        quality:
          type:
            outdated_dependency: 40
            blacklisted_dependency: 19
            risk_abandonware: 16
            risk_native-code: 6
            risk_empty-package: 1
          status:
            ignored: 25
            remediated: 6
            active: 82
      properties:
        counts:
          $ref: "#/components/schemas/getIssueCounts_200_response_counts"
        totalProjects:
          example: 9
          minimum: 0
          type: integer
        licensing:
          $ref: "#/components/schemas/getIssueCounts_200_response_licensing"
        vulnerability:
          $ref: "#/components/schemas/getIssueCounts_200_response_vulnerability"
        quality:
          $ref: "#/components/schemas/getIssueCounts_200_response_quality"
      required:
      - counts
      - totalProjects
    exportIssueOverviewCsv_200_response:
      example:
        jobToken: f49923d3-c522-4c6b-ab80-f38527d28a46
        task: ExportIssueSnapshots
      properties:
        jobToken:
          description: The job token used by the frontend when polling for updates.
          example: f49923d3-c522-4c6b-ab80-f38527d28a46
          type: string
        task:
          description: The name of the background task.
          example: ExportIssueSnapshots
          type: string
    getOrganizationCLI_200_response_customLicenseScanConfigs_inner:
      example:
        matchCriteria: matchCriteria
        name: name
      properties:
        name:
          description: custom license scan name
          type: string
        matchCriteria:
          description: regular expression for the custom license scan
          type: string
    getOrganizationCLI_200_response:
      example:
        defaultVendoredDependencyScanType: ArchiveUpload
        requireFullFileUploads: true
        supportsDependenciesCachePolling: true
        supportsIssueDiffs: true
        defaultToFirstPartyScans: true
        supportsPathDependency: true
        organizationId: 0
        usesSAML: true
        supportsNativeContainerScans: true
        supportsAnalyzedRevisionsQuery: true
        supportsFirstPartyScans: true
        supportsCliLicenseScanning: true
        customLicenseScanConfigs:
        - matchCriteria: matchCriteria
          name: name
        - matchCriteria: matchCriteria
          name: name
      properties:
        organizationId:
          description: Unique organization identifier
          type: integer
        usesSAML:
          description: "True if organization uses SAML, otherwise False."
          type: boolean
        supportsCliLicenseScanning:
          description: "True if organization supports CLI license scanning (native),\
            \ otherwise False."
          type: boolean
        supportsAnalyzedRevisionsQuery:
          description: "True if organization supports analyzed revision query, otherwise\
            \ False."
          type: boolean
        supportsDependenciesCachePolling:
          description: "True if organization supports dependencies cache polling,\
            \ otherwise False."
          type: boolean
        supportsIssueDiffs:
          description: "True if organization supports issue diffing, otherwise False."
          type: boolean
        defaultVendoredDependencyScanType:
          description: Default vendor scanning preferred by the organization.
          enum:
          - ArchiveUpload
          - CLILicenseScan
          type: string
        supportsNativeContainerScans:
          description: "True if organization supports native container scanning, otherwise\
            \ False."
          type: boolean
        requireFullFileUploads:
          description: True if the organization wants CLI-side license scans to upload
            full file contents instead of just the match string
          type: boolean
        supportsPathDependency:
          description: True if the organization supports path dependencies. Otherwise
            False.
          type: boolean
        supportsFirstPartyScans:
          description: True if the FOSSA instance supports first-party scans. Otherwise
            False.
          type: boolean
        defaultToFirstPartyScans:
          description: True if the organization defaults to first-party scans. Otherwise
            False.
          type: boolean
        customLicenseScanConfigs:
          description: Configuration for custom license scans
          items:
            $ref: "#/components/schemas/getOrganizationCLI_200_response_customLicenseScanConfigs_inner"
          type: array
    getOrganizationLabels_200_response_labels_inner:
      example:
        organizationId: 6
        projects:
        - projects
        - projects
        id: 0
        label: label
      properties:
        id:
          description: ID of this label
          type: integer
        organizationId:
          description: ID of the organization that this Label is associated with
          type: integer
        label:
          description: Text that this Label represents
          type: string
        projects:
          items:
            description: FOSSA's identifier for a unique component
            type: string
          type: array
    getOrganizationLabels_200_response:
      example:
        labels:
        - organizationId: 6
          projects:
          - projects
          - projects
          id: 0
          label: label
        - organizationId: 6
          projects:
          - projects
          - projects
          id: 0
          label: label
      properties:
        labels:
          items:
            $ref: "#/components/schemas/getOrganizationLabels_200_response_labels_inner"
          type: array
    createOrganizationLabel_request:
      properties:
        label:
          description: Text that this Label represents
          type: string
    createOrganizationLabel_201_response:
      example:
        organizationId: 6
        id: 0
        label: label
      properties:
        id:
          description: ID of this label
          type: integer
        organizationId:
          description: ID of the organization that this Label is associated with
          type: integer
        label:
          description: Text that this Label represents
          type: string
    getOrganizationLimits_200_response:
      description: |
        An object that provides the current usage of a resource, the contractual limit of the resource, and whether or not the organization has an unlimited cap on the resource.
      example:
        max: 0
        unlimited: true
        usage: 0
      properties:
        usage:
          description: The current usage of the resource.
          minimum: 0
          type: integer
        max:
          description: The contractual limit of the resource.
          minimum: 0
          type: integer
        unlimited:
          description: Whether or not the organization has an unlimited cap on the
            resource.
          type: boolean
    getProjectLabels_200_response_inner:
      example:
        id: 0
        label: label
      properties:
        id:
          description: ID of this label
          type: integer
        label:
          description: Text that this Label represents
          type: string
    updateProjectLabels_request:
      properties:
        labels:
          description: List of Label IDs that should be associated with this Project
          items:
            type: integer
          type: array
    updateProjectLabels_200_response:
      example:
        title: title
        locator: locator
        labels:
        - organizationId: 6
          projects:
          - projects
          - projects
          id: 0
          label: label
        - organizationId: 6
          projects:
          - projects
          - projects
          id: 0
          label: label
      properties:
        locator:
          description: Text ID that uniquely identifies a project
          type: string
        title:
          description: Name of the project
          type: string
        labels:
          items:
            $ref: "#/components/schemas/getOrganizationLabels_200_response_labels_inner"
          type: array
    getProjectRevisions_200_response_branch_value_inner_loc:
      description: Normalized representation of the Locator
      example:
        fetcher: fetcher
        package: package
        revision: revision
      properties:
        fetcher:
          description: the external package manager or internal representation of
            one
          type: string
        package:
          description: the package name
          type: string
        revision:
          description: the version/revision of the package
          type: string
    getProjectRevisions_200_response_branch_value_inner:
      example:
        loc:
          fetcher: fetcher
          package: package
          revision: revision
        author: author
        link: link
        source_type: source_type
        error: error
        message: message
        url: url
        latestRevisionScanId: 0.8008281904610115
        createdAt: createdAt
        revision_timestamp: revision_timestamp
        locator: locator
        projectId: projectId
        latestHubbleAnalysisId: 6.027456183070403
        resolved: true
        updatedAt: updatedAt
      properties:
        loc:
          $ref: "#/components/schemas/getProjectRevisions_200_response_branch_value_inner_loc"
        locator:
          description: Text ID that uniquely identifies a project
          type: string
        resolved:
          description: Has the Revision been fully analyzed by FOSSA
          type: boolean
        projectId:
          description: The Project locator that the Revision belongs to
          type: string
        source_type:
          description: FOSSA internal representation of the source language for the
            given repository/project
          nullable: true
          type: string
        error:
          description: Error message during analysis (if any)
          nullable: true
          type: string
        message:
          description: Message of the revision or commit
          nullable: true
          type: string
        revision_timestamp:
          description: timestamp of when the Revision was published
          nullable: true
          type: string
        latestRevisionScanId:
          description: The Revision Scan ID of the latest policy scan
          nullable: true
          type: number
        latestHubbleAnalysisId:
          description: The Hubble Analysis ID of the latest analysis
          nullable: true
          type: number
        createdAt:
          description: when the Revision was added to the FOSSA Database
          type: string
        updatedAt:
          description: when the Revision was last updated in the FOSSA Database
          type: string
        author:
          description: The author of the Revision
          nullable: true
          type: string
        link:
          description: The link associated with the Revision
          nullable: true
          type: string
        url:
          description: The url associated with the Revision
          nullable: true
          type: string
    getProjectRevisions_200_response:
      example:
        tag:
          key:
          - loc:
              fetcher: fetcher
              package: package
              revision: revision
            author: author
            link: link
            source_type: source_type
            error: error
            message: message
            url: url
            latestRevisionScanId: 0.8008281904610115
            createdAt: createdAt
            revision_timestamp: revision_timestamp
            locator: locator
            projectId: projectId
            latestHubbleAnalysisId: 6.027456183070403
            resolved: true
            updatedAt: updatedAt
          - loc:
              fetcher: fetcher
              package: package
              revision: revision
            author: author
            link: link
            source_type: source_type
            error: error
            message: message
            url: url
            latestRevisionScanId: 0.8008281904610115
            createdAt: createdAt
            revision_timestamp: revision_timestamp
            locator: locator
            projectId: projectId
            latestHubbleAnalysisId: 6.027456183070403
            resolved: true
            updatedAt: updatedAt
        branch:
          key:
          - loc:
              fetcher: fetcher
              package: package
              revision: revision
            author: author
            link: link
            source_type: source_type
            error: error
            message: message
            url: url
            latestRevisionScanId: 0.8008281904610115
            createdAt: createdAt
            revision_timestamp: revision_timestamp
            locator: locator
            projectId: projectId
            latestHubbleAnalysisId: 6.027456183070403
            resolved: true
            updatedAt: updatedAt
          - loc:
              fetcher: fetcher
              package: package
              revision: revision
            author: author
            link: link
            source_type: source_type
            error: error
            message: message
            url: url
            latestRevisionScanId: 0.8008281904610115
            createdAt: createdAt
            revision_timestamp: revision_timestamp
            locator: locator
            projectId: projectId
            latestHubbleAnalysisId: 6.027456183070403
            resolved: true
            updatedAt: updatedAt
      properties:
        branch:
          additionalProperties:
            items:
              $ref: "#/components/schemas/getProjectRevisions_200_response_branch_value_inner"
          description: map of branches to their Revisions
        tag:
          additionalProperties:
            items:
              $ref: "#/components/schemas/getProjectRevisions_200_response_branch_value_inner"
          description: map of tags to their Revisions
    generateProjectGenerateAttributionSlug_401_response:
      example:
        message: message
      properties:
        message:
          description: Message describing the error
          type: string
    getProjectExportIssues_200_response_Package_License_Issues_inner:
      example:
        Affected Project: Affected Project
        Issue Type: Issue Type
        Details: Details
        Revision: Revision
        License: License
        FOSSA URL: FOSSA URL
        Dependency Depths: Dependency Depths
        Dependency: Dependency
        Flagged by Policy: Flagged by Policy
      properties:
        Dependency:
          description: |
            The dependency that the issue is associated with.
          type: string
        Revision:
          description: |
            The revision of the dependency that the issue is associated with.
          type: string
        Flagged by Policy:
          description: |
            The policy that triggered the issue.
          type: string
        Issue Type:
          description: |
            The type of issue.
          type: string
        License:
          description: |
            The license that triggered the issue.
          type: string
        Affected Project:
          description: |
            The User Project that the issue is associated with.
          type: string
        FOSSA URL:
          description: |
            A link to the project in the FOSSA UI.
          type: string
        Details:
          description: |
            A description of the policy rule that triggered this issue (if available).
          type: string
        Dependency Depths:
          description: |
            The depth(s) of the dependency in the dependency tree.
          type: string
    getProjectExportIssues_200_response_Vulnerability_Issues_inner:
      example:
        Reference: Reference
        Remediation Advice: Remediation Advice
        Dependency: Dependency
        CVSS: CVSS
        Name: Name
        Affected Project: Affected Project
        CWE: CWE
        CVE: CVE
        Details: Details
        Revision: Revision
        FOSSA URL: FOSSA URL
        CVSS Severity: CVSS Severity
        Dependency Depths: Dependency Depths
        CVSS Score: CVSS Score
      properties:
        Name:
          description: |
            The plaintext name of the CWE that affects the dependency.
          type: string
        Dependency:
          description: |
            The dependency that the issue is associated with.
          type: string
        Revision:
          description: |
            The revision of the dependency that the issue is associated with.
          type: string
        CVE:
          description: |
            The CVE that affects the dependency.
          type: string
        Affected Project:
          description: |
            The User Project that the issue is associated with.
          type: string
        FOSSA URL:
          description: |
            A link to the project in the FOSSA UI.
          type: string
        CVSS:
          description: |
            The CVSS Vector of the vulnerability.
          type: string
        CVSS Score:
          description: |
            The CVSS Score of the vulnerability.
          type: string
        CVSS Severity:
          description: |
            The CVSS Severity of the vulnerability.
          type: string
        Details:
          description: |
            A description of the Vulnerability that triggered this issue (if available).
          type: string
        Remediation Advice:
          description: |
            The version of the dependency that fixes all vulnerabilities on this dependency (if available).
          type: string
        Dependency Depths:
          description: |
            The depth(s) of the dependency in the dependency tree.
          type: string
        Reference:
          description: |
            Associated link to information on the vulnerability.
          type: string
        CWE:
          description: |
            A CWE that affects the dependency.
          type: string
    getProjectExportIssues_200_response_Quality_Issues_inner:
      example:
        Affected Project: Affected Project
        Type: Type
        Details: Details
        Revision: Revision
        FOSSA URL: FOSSA URL
        Dependency Depths: Dependency Depths
        Dependency: Dependency
      properties:
        Dependency:
          description: |
            The dependency that the issue is associated with.
          type: string
        Revision:
          description: |
            The revision of the dependency that the issue is associated with.
          type: string
        Type:
          description: |
            The type of issue.
          type: string
        FOSSA URL:
          description: |
            A link to the project in the FOSSA UI.
          type: string
        Affected Project:
          description: |
            The User Project that the issue is associated with.
          type: string
        Details:
          description: |
            A description of the policy rule that triggered this issue (if available).
          type: string
        Dependency Depths:
          description: |
            The depth(s) of the dependency in the dependency tree.
          type: string
    getProjectExportIssues_200_response:
      example:
        Quality Issues:
        - Affected Project: Affected Project
          Type: Type
          Details: Details
          Revision: Revision
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
        - Affected Project: Affected Project
          Type: Type
          Details: Details
          Revision: Revision
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
        Vulnerability Issues:
        - Reference: Reference
          Remediation Advice: Remediation Advice
          Dependency: Dependency
          CVSS: CVSS
          Name: Name
          Affected Project: Affected Project
          CWE: CWE
          CVE: CVE
          Details: Details
          Revision: Revision
          FOSSA URL: FOSSA URL
          CVSS Severity: CVSS Severity
          Dependency Depths: Dependency Depths
          CVSS Score: CVSS Score
        - Reference: Reference
          Remediation Advice: Remediation Advice
          Dependency: Dependency
          CVSS: CVSS
          Name: Name
          Affected Project: Affected Project
          CWE: CWE
          CVE: CVE
          Details: Details
          Revision: Revision
          FOSSA URL: FOSSA URL
          CVSS Severity: CVSS Severity
          Dependency Depths: Dependency Depths
          CVSS Score: CVSS Score
        Package License Issues:
        - Affected Project: Affected Project
          Issue Type: Issue Type
          Details: Details
          Revision: Revision
          License: License
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
          Flagged by Policy: Flagged by Policy
        - Affected Project: Affected Project
          Issue Type: Issue Type
          Details: Details
          Revision: Revision
          License: License
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
          Flagged by Policy: Flagged by Policy
      properties:
        Package License Issues:
          items:
            $ref: "#/components/schemas/getProjectExportIssues_200_response_Package_License_Issues_inner"
          type: array
        Vulnerability Issues:
          items:
            $ref: "#/components/schemas/getProjectExportIssues_200_response_Vulnerability_Issues_inner"
          type: array
        Quality Issues:
          items:
            $ref: "#/components/schemas/getProjectExportIssues_200_response_Quality_Issues_inner"
          type: array
    getProjectJSONExportIssues_200_response_Vulnerability_Issues_inner:
      example:
        Remediation Advice: Remediation Advice
        Dependency: Dependency
        CVSS: CVSS
        Name: Name
        Affected Project: Affected Project
        CVE: CVE
        Details: Details
        Revision: Revision
        References:
        - References
        - References
        FOSSA URL: FOSSA URL
        CVSS Severity: CVSS Severity
        Dependency Depths: Dependency Depths
        CVSS Score: CVSS Score
        CWES:
        - CWES
        - CWES
      properties:
        Name:
          description: |
            The plaintext name of the CWE that affects the dependency.
          type: string
        Dependency:
          description: |
            The dependency that the issue is associated with.
          type: string
        Revision:
          description: |
            The revision of the dependency that the issue is associated with.
          type: string
        CVE:
          description: |
            The CVE that affects the dependency.
          type: string
        Affected Project:
          description: |
            The User Project that the issue is associated with.
          type: string
        FOSSA URL:
          description: |
            A link to the project in the FOSSA UI.
          type: string
        CVSS:
          description: |
            The CVSS Vector of the vulnerability.
          type: string
        CVSS Score:
          description: |
            The CVSS Score of the vulnerability.
          type: string
        CVSS Severity:
          description: |
            The CVSS Severity of the vulnerability.
          type: string
        Details:
          description: |
            A description of the Vulnerability that triggered this issue (if available).
          type: string
        Remediation Advice:
          description: |
            The version of the dependency that fixes all vulnerabilities on this dependency (if available).
          type: string
        Dependency Depths:
          description: |
            The depth(s) of the dependency in the dependency tree.
          type: string
        References:
          description: |
            Associated link's to information on the vulnerability.
          items:
            type: string
          type: array
        CWES:
          description: |
            List of CWE's that affects the dependency.
          items:
            type: string
          type: array
    getProjectJSONExportIssues_200_response:
      example:
        Quality Issues:
        - Affected Project: Affected Project
          Type: Type
          Details: Details
          Revision: Revision
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
        - Affected Project: Affected Project
          Type: Type
          Details: Details
          Revision: Revision
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
        Vulnerability Issues:
        - Remediation Advice: Remediation Advice
          Dependency: Dependency
          CVSS: CVSS
          Name: Name
          Affected Project: Affected Project
          CVE: CVE
          Details: Details
          Revision: Revision
          References:
          - References
          - References
          FOSSA URL: FOSSA URL
          CVSS Severity: CVSS Severity
          Dependency Depths: Dependency Depths
          CVSS Score: CVSS Score
          CWES:
          - CWES
          - CWES
        - Remediation Advice: Remediation Advice
          Dependency: Dependency
          CVSS: CVSS
          Name: Name
          Affected Project: Affected Project
          CVE: CVE
          Details: Details
          Revision: Revision
          References:
          - References
          - References
          FOSSA URL: FOSSA URL
          CVSS Severity: CVSS Severity
          Dependency Depths: Dependency Depths
          CVSS Score: CVSS Score
          CWES:
          - CWES
          - CWES
        Package License Issues:
        - Affected Project: Affected Project
          Issue Type: Issue Type
          Details: Details
          Revision: Revision
          License: License
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
          Flagged by Policy: Flagged by Policy
        - Affected Project: Affected Project
          Issue Type: Issue Type
          Details: Details
          Revision: Revision
          License: License
          FOSSA URL: FOSSA URL
          Dependency Depths: Dependency Depths
          Dependency: Dependency
          Flagged by Policy: Flagged by Policy
      properties:
        Package License Issues:
          items:
            $ref: "#/components/schemas/getProjectExportIssues_200_response_Package_License_Issues_inner"
          type: array
        Vulnerability Issues:
          items:
            $ref: "#/components/schemas/getProjectJSONExportIssues_200_response_Vulnerability_Issues_inner"
          type: array
        Quality Issues:
          items:
            $ref: "#/components/schemas/getProjectExportIssues_200_response_Quality_Issues_inner"
          type: array
    getAllRoles_200_response_inner_permissions_inner:
      example:
        action: action
        resourceType: resourceType
      properties:
        resourceType:
          description: The resource type
          type: string
        action:
          description: The action
          type: string
    getAllRoles_200_response_inner:
      example:
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        permissions:
        - action: action
          resourceType: resourceType
        - action: action
          resourceType: resourceType
        scope: organization
        isCustom: true
        name: name
        description: description
        id: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The role's unique identifier
          type: integer
        organizationId:
          description: The organization's unique identifier
          type: integer
        isCustom:
          description: Whether the role is custom
          type: boolean
        scope:
          description: The role's scope
          enum:
          - organization
          - team
          type: string
        name:
          description: The role's name
          type: string
        description:
          description: The role's description
          type: string
        createdAt:
          description: The role's creation date
          format: date-time
          type: string
        updatedAt:
          description: The role's last update date
          format: date-time
          type: string
        permissions:
          items:
            $ref: "#/components/schemas/getAllRoles_200_response_inner_permissions_inner"
          type: array
    getAllTeams_200_response_inner_teamUsers_inner:
      example:
        roleId: 5
        userId: 5
      properties:
        userId:
          description: The user's unique identifier
          type: integer
        roleId:
          description: The role's unique identifier
          type: integer
    getAllTeams_200_response_inner:
      example:
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        teamUsers:
        - roleId: 5
          userId: 5
        - roleId: 5
          userId: 5
        teamReleaseGroupsCount: 2
        teamProjectsCount: 7
        name: name
        autoAddUsers: true
        id: 0
        defaultRoleId: 1
        uniqueIdentifier: uniqueIdentifier
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The team's unique identifier
          type: integer
        organizationId:
          description: The organization's unique identifier
          type: integer
        name:
          description: The team's name
          type: string
        defaultRoleId:
          description: The default role's unique identifier
          type: integer
        autoAddUsers:
          description: Whether the team auto-adds users
          type: boolean
        uniqueIdentifier:
          description: The team's unique identifier
          type: string
        createdAt:
          description: The team's creation date
          format: date-time
          type: string
        updatedAt:
          description: The team's last update date
          format: date-time
          type: string
        teamUsers:
          items:
            $ref: "#/components/schemas/getAllTeams_200_response_inner_teamUsers_inner"
          type: array
        teamReleaseGroupsCount:
          description: The number of release groups associated with the team
          type: integer
        teamProjectsCount:
          description: The number of projects associated with the team
          type: integer
    getTeamByIdV2_200_response:
      example:
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        teamReleaseGroupsCount: 5
        teamProjectsCount: 2
        name: name
        autoAddUsers: true
        id: 0
        teamType: team
        defaultRoleId: 1
        uniqueIdentifier: uniqueIdentifier
        updatedAt: 2000-01-23T04:56:07.000+00:00
        teamMembersCount: 5
      properties:
        id:
          description: The team's unique identifier
          type: integer
        organizationId:
          description: The organization's unique identifier
          type: integer
        name:
          description: The team's name
          type: string
        defaultRoleId:
          description: The default role's unique identifier
          type: integer
        autoAddUsers:
          description: Whether the team auto-adds users
          type: boolean
        uniqueIdentifier:
          description: The team's unique identifier
          type: string
        createdAt:
          description: The team's creation date
          format: date-time
          type: string
        updatedAt:
          description: The team's last update date
          format: date-time
          type: string
        teamType:
          description: Whether it's a normal team or a Team Group.
          enum:
          - team
          - team_group
          type: string
        teamMembersCount:
          description: The number of members in the team
          type: integer
        teamReleaseGroupsCount:
          description: The number of release groups associated with the team
          type: integer
        teamProjectsCount:
          description: The number of projects associated with the team
          type: integer
    getTeamMembers_200_response_results_inner:
      example:
        roleId: 6
        userId: 0
        email: email
        username: username
      properties:
        userId:
          description: ID of the user
          type: integer
        roleId:
          description: ID of the role assigned to the user in the team
          type: integer
        username:
          description: Username of the user
          type: string
        email:
          description: Email of the user
          format: email
          type: string
      required:
      - email
      - roleId
      - userId
      - username
    getTeamMembers_200_response:
      example:
        pageSize: 1
        page: 5
        totalCount: 5
        results:
        - roleId: 6
          userId: 0
          email: email
          username: username
        - roleId: 6
          userId: 0
          email: email
          username: username
      properties:
        results:
          description: Array of team members
          items:
            $ref: "#/components/schemas/getTeamMembers_200_response_results_inner"
          type: array
        pageSize:
          description: Number of items per page
          type: integer
        page:
          description: Current page number (1-indexed)
          type: integer
        totalCount:
          description: Total number of team members
          type: integer
      required:
      - page
      - pageSize
      - results
      - totalCount
    getAddableTeamUsers_200_response_results_inner:
      example:
        userId: 0
        email: email
        username: username
      properties:
        userId:
          description: ID of the user
          type: integer
        username:
          description: Username of the user
          type: string
        email:
          description: Email of the user
          format: email
          type: string
      required:
      - email
      - userId
      - username
    getAddableTeamUsers_200_response:
      example:
        pageSize: 6
        page: 1
        totalCount: 5
        results:
        - userId: 0
          email: email
          username: username
        - userId: 0
          email: email
          username: username
      properties:
        results:
          description: Array of users that can be added to the team
          items:
            $ref: "#/components/schemas/getAddableTeamUsers_200_response_results_inner"
          type: array
        pageSize:
          description: Number of items per page
          type: integer
        page:
          description: Current page number (1-indexed)
          type: integer
        totalCount:
          description: Total number of users that can be added to the team
          type: integer
      required:
      - page
      - pageSize
      - results
      - totalCount
    getTeamProjects_200_response_results_inner:
      example:
        title: title
        locator: locator
      properties:
        title:
          description: Title of the project
          type: string
        locator:
          description: Locator of the project
          type: string
      required:
      - locator
      - title
    getTeamProjects_200_response:
      example:
        pageSize: 0
        page: 6
        totalCount: 1
        results:
        - title: title
          locator: locator
        - title: title
          locator: locator
      properties:
        results:
          description: Array of team projects
          items:
            $ref: "#/components/schemas/getTeamProjects_200_response_results_inner"
          type: array
        pageSize:
          description: Number of items per page
          type: integer
        page:
          description: Current page number (1-indexed)
          type: integer
        totalCount:
          description: Total number of team projects
          type: integer
      required:
      - page
      - pageSize
      - results
      - totalCount
    getTeamReleaseGroups_200_response_results_inner:
      example:
        id: 0
        title: title
      properties:
        title:
          description: Title of the Release Group
          type: string
        id:
          description: ID of the Release Group
          type: integer
      required:
      - id
      - title
    getTeamReleaseGroups_200_response:
      example:
        pageSize: 6
        page: 1
        totalCount: 5
        results:
        - id: 0
          title: title
        - id: 0
          title: title
      properties:
        results:
          description: Array of team Release Groups
          items:
            $ref: "#/components/schemas/getTeamReleaseGroups_200_response_results_inner"
          type: array
        pageSize:
          description: Number of items per page
          type: integer
        page:
          description: Current page number (1-indexed)
          type: integer
        totalCount:
          description: Total number of team release groups
          type: integer
      required:
      - page
      - pageSize
      - results
      - totalCount
    getAddableTeamProjectsAndReleaseGroups_200_response_results_inner:
      example:
        id: id
        title: title
        type: project
      properties:
        id:
          description: Locator of the project or stringified Release Group ID
          type: string
        title:
          description: Title of the project or Release Group
          type: string
        type:
          description: Type of the project or Release Group
          enum:
          - project
          - release_group
          type: string
      required:
      - id
      - title
      - type
    getAddableTeamProjectsAndReleaseGroups_200_response:
      example:
        pageSize: 0
        page: 6
        totalCount: 1
        results:
        - id: id
          title: title
          type: project
        - id: id
          title: title
          type: project
      properties:
        results:
          description: Array of projects and Release Groups that can be added to the
            team
          items:
            $ref: "#/components/schemas/getAddableTeamProjectsAndReleaseGroups_200_response_results_inner"
          type: array
        pageSize:
          description: Number of items per page
          type: integer
        page:
          description: Current page number (1-indexed)
          type: integer
        totalCount:
          description: Total number of projects and Release Groups that can be added
            to the team
          type: integer
      required:
      - page
      - pageSize
      - results
      - totalCount
    getProjects_200_response:
      example:
        total: 0
        projects:
        - ""
        - ""
      properties:
        total:
          type: integer
        projects:
          items: {}
          type: array
    deleteProjects_locators_parameter:
      oneOf:
      - enum:
        - all
        type: string
      - items:
          type: string
        type: array
    getProjectsSummary_200_response_summary:
      example:
        projects: 0
        releaseGroups: 6
      properties:
        projects:
          type: integer
        releaseGroups:
          type: integer
    getProjectsSummary_200_response:
      example:
        summary:
          projects: 0
          releaseGroups: 6
      properties:
        summary:
          $ref: "#/components/schemas/getProjectsSummary_200_response_summary"
    listReleaseGroupsForProject_200_response_inner_revisions_inner_releases_inner:
      example:
        releaseId: 6.027456183070403
        releaseTitle: releaseTitle
      properties:
        releaseId:
          type: number
        releaseTitle:
          type: string
    listReleaseGroupsForProject_200_response_inner_revisions_inner:
      example:
        revisionId: revisionId
        releases:
        - releaseId: 6.027456183070403
          releaseTitle: releaseTitle
        - releaseId: 6.027456183070403
          releaseTitle: releaseTitle
      properties:
        revisionId:
          type: string
        releases:
          items:
            $ref: "#/components/schemas/listReleaseGroupsForProject_200_response_inner_revisions_inner_releases_inner"
          type: array
    listReleaseGroupsForProject_200_response_inner:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        releaseGroupId: 0.8008281904610115
        releaseGroupTitle: releaseGroupTitle
        revisions:
        - revisionId: revisionId
          releases:
          - releaseId: 6.027456183070403
            releaseTitle: releaseTitle
          - releaseId: 6.027456183070403
            releaseTitle: releaseTitle
        - revisionId: revisionId
          releases:
          - releaseId: 6.027456183070403
            releaseTitle: releaseTitle
          - releaseId: 6.027456183070403
            releaseTitle: releaseTitle
      properties:
        releaseGroupId:
          type: number
        releaseGroupTitle:
          type: string
        createdAt:
          description: The timestamp when the release group was created
          format: date-time
          type: string
        revisions:
          items:
            $ref: "#/components/schemas/listReleaseGroupsForProject_200_response_inner_revisions_inner"
          type: array
    getReleaseGroups_200_response_releaseGroups_inner:
      example:
        projects: 5
        scanned: 2000-01-23T04:56:07.000+00:00
        publicOnPortal: true
        id: 6
        title: title
        issues: 1
      properties:
        id:
          type: integer
        title:
          type: string
        publicOnPortal:
          type: boolean
        scanned:
          format: date-time
          type: string
        issues:
          type: integer
        projects:
          type: integer
    getReleaseGroups_200_response:
      example:
        total: 0
        releaseGroups:
        - projects: 5
          scanned: 2000-01-23T04:56:07.000+00:00
          publicOnPortal: true
          id: 6
          title: title
          issues: 1
        - projects: 5
          scanned: 2000-01-23T04:56:07.000+00:00
          publicOnPortal: true
          id: 6
          title: title
          issues: 1
      properties:
        total:
          type: integer
        releaseGroups:
          items:
            $ref: "#/components/schemas/getReleaseGroups_200_response_releaseGroups_inner"
          type: array
    deleteReleaseGroups_ids_parameter:
      oneOf:
      - items:
          type: integer
        type: array
      - enum:
        - all
        type: string
    updateReleaseGroupsPolicies_ids_parameter:
      oneOf:
      - enum:
        - all
        type: string
      - items:
          type: number
        type: array
    getPackagesPackageLocators_200_response:
      example:
        pageSize: 2
        page: 1
        results:
        - npm+foo
        - git+bar
      properties:
        results:
          example:
          - npm+foo
          - git+bar
          items:
            type: string
          type: array
        pageSize:
          example: 2
          type: integer
        page:
          example: 1
          type: integer
    getPackagesPackageSummary_200_response:
      example:
        count: 0.8008281904610115
        lastCacheDate: 2000-01-23T04:56:07.000+00:00
      properties:
        count:
          type: number
        lastCacheDate:
          format: date-time
          type: string
    getPackageIndexExport_201_response_task:
      example:
        jobToken: jobToken
        task: task
      properties:
        task:
          type: string
        jobToken:
          type: string
    getPackageIndexExport_201_response:
      example:
        task:
          jobToken: jobToken
          task: task
        target: target
      properties:
        task:
          $ref: "#/components/schemas/getPackageIndexExport_201_response_task"
        target:
          description: Email address where the report link will be sent
          type: string
    getPackageLabels_200_response_packageLabels_inner:
      example:
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        id: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: integer
        organizationId:
          type: integer
        name:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
    getPackageLabels_200_response:
      example:
        packageLabels:
        - organizationId: 6
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - organizationId: 6
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        packageLabels:
          items:
            $ref: "#/components/schemas/getPackageLabels_200_response_packageLabels_inner"
          type: array
    createPackageLabel_request:
      properties:
        labels:
          description: The names of the new Package Labels
          items:
            type: string
          type: array
      required:
      - labels
    deletePackageLabels_request:
      properties:
        ids:
          description: The IDs of the Package Labels to delete
          items:
            type: integer
          type: array
      required:
      - ids
    getPackageLabelAssignments_200_response_packageLabelAssignmentResponse:
      example:
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        scopeId: scopeId
        labelId: 1
        scope: org
        packageId: packageId
        packageVersion: packageVersion
        id: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The ID of the package label assignment.
          type: integer
        createdAt:
          description: The date and time the package label assignment was created.
          format: date-time
          type: string
        updatedAt:
          description: The date and time the package label assignment was last updated.
          format: date-time
          type: string
        organizationId:
          description: The ID of the organization that owns the package label assignment.
          type: integer
        labelId:
          description: The ID of the label that was assigned to the package.
          type: integer
        packageId:
          description: The ID of the package that the label was assigned to.
          type: string
        packageVersion:
          description: The version of the package that the label was assigned to or
            null if the label was assigned to all versions.
          type: string
          nullable: true
        scope:
          description: The scope of the package label assignment.
          enum:
          - org
          - project
          - revision
          type: string
        scopeId:
          description: The ID of the scope that the label was assigned to or null
            if the label was assigned to all scopes.
          type: string
          nullable: true
      required:
      - createdAt
      - id
      - labelId
      - organizationId
      - packageId
      - scope
      - scopeId
      - updatedAt
    getPackageLabelAssignments_200_response:
      example:
        packageLabelAssignmentResponse:
          organizationId: 6
          createdAt: 2000-01-23T04:56:07.000+00:00
          scopeId: scopeId
          labelId: 1
          scope: org
          packageId: packageId
          packageVersion: packageVersion
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        packageLabelAssignmentResponse:
          $ref: "#/components/schemas/getPackageLabelAssignments_200_response_packageLabelAssignmentResponse"
    createPackageLabelAssignments_request:
      properties:
        packageId:
          description: The ID of the package to assign labels to.
          type: string
        packageVersion:
          description: The version of the package to assign labels to or blank for
            all versions.
          type: string
        scope:
          description: The scope of the package label assignment.
          enum:
          - org
          - project
          - revision
          type: string
        scopeId:
          description: The ID of the scope to assign labels to.
          type: string
        labelIds:
          description: The IDs of the labels to assign to the package.
          items:
            type: integer
          type: array
      required:
      - labels
      - packageId
    deletePackageLabelAssignments_request:
      properties:
        assignmentLabelIds:
          description: The IDs of the package label assignments to delete.
          items:
            type: integer
          type: array
    createReleaseGroup_request_release_projects_inner:
      properties:
        projectId:
          type: string
        branch:
          type: string
        revisionId:
          type: string
    createReleaseGroup_request_release:
      properties:
        title:
          type: string
        projects:
          items:
            $ref: "#/components/schemas/createReleaseGroup_request_release_projects_inner"
          type: array
    createReleaseGroup_request:
      example:
        title: New Release Group
        licensingPolicyId: 1
        securityPolicyId: 2
        qualityPolicyId: null
        publicOnPortal: true
        issueTrackerType: github
        teams:
        - 101
        - 102
        release:
          title: 1.0.0
          projects:
          - projectId: custom+1/my-repo
            branch: main
            revisionId: rev001
          - projectId: custom+1/my-other-repo
            branch: develop
            revisionId: rev002
      properties:
        title:
          type: string
        licensingPolicyId:
          type: integer
          nullable: true
        securityPolicyId:
          type: integer
          nullable: true
        qualityPolicyId:
          type: integer
          nullable: true
        publicOnPortal:
          type: boolean
          nullable: true
        issueTrackerType:
          enum:
          - github
          - jira
          type: string
        teams:
          items:
            type: integer
          type: array
        release:
          $ref: "#/components/schemas/createReleaseGroup_request_release"
      required:
      - release
      - title
    createReleaseGroup_200_response:
      example:
        id: 1
        title: My Release Group
        organizationId: 1000
        policyId: 1001
        securityPolicyId: 1002
        qualityPolicyId: null
        publicOnPortal: true
        customReportText: null
        createdAt: 2024-07-09T21:51:20.671Z
        updatedAt: 2024-07-09T21:51:20.671Z
      properties:
        id:
          type: integer
        title:
          type: string
        organizationId:
          type: integer
        policyId:
          nullable: true
          type: integer
        securityPolicyId:
          nullable: true
          type: integer
        qualityPolicyId:
          nullable: true
          type: integer
        publicOnPortal:
          type: boolean
        reportCustomText:
          nullable: true
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
    getReleaseGroupById_200_response_allOf_releases_inner:
      example:
        id: 1
        title: 1.0.0
        projectGroupId: 1
        dependency_count: 50
        license_count: 10
        unresolved_licensing_issue_count: 2
        unresolved_security_issue_count: 3
        unresolved_quality_issue_count: 1
        publishedOnPortal: cyclonedx_json
        publishedAt: 2024-07-09T19:14:26Z
        reportPath: /reports/1.0.0/sbom.cyclonedx.json
        publishedLicenses:
        - MIT
        - Apache-2.0
      properties:
        id:
          description: Release ID
          type: integer
        title:
          description: Release title/version
          type: string
        projectGroupId:
          description: The release group which this belongs to
          type: integer
        dependency_count:
          description: The count of dependencies in this release
          type: integer
          nullable: true
        license_count:
          description: The count of licenses in this release
          type: integer
          nullable: true
        unresolved_licensing_issue_count:
          description: The number of licensing issues in this release
          type: integer
          nullable: true
        unresolved_security_issue_count:
          description: The number of security issues in this release
          type: integer
          nullable: true
        unresolved_quality_issue_count:
          description: The number of quality issues in this release
          type: integer
          nullable: true
        publishedOnPortal:
          description: If this release has been published on an SBOM portal
          enum:
          - attribution_txt
          - spdx_tagged
          - cyclonedx_json
          - spdx_json
          - cyclonedx_xml
          - pending
          type: string
          nullable: true
        publishedAt:
          description: When the release was published to the portal
          format: date-time
          type: string
        reportPath:
          description: Path to the SBOM report for this release
          type: string
          nullable: true
        publishedLicenses:
          description: List of published license IDs
          items:
            type: string
          type: array
          nullable: true
    getReleaseGroupById_200_response_allOf_projects_inner:
      example:
        projectId: custom+1/github.com/myrepo
        projectGroupReleaseId: 1
        branch: main
        revisionId: rev001
        createdAt: 2024-07-09T19:14:26Z
        updatedAt: 2024-07-09T19:14:26Z
      properties:
        projectId:
          type: string
        projectGroupReleaseId:
          type: integer
        branch:
          type: string
        revisionId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
    getReleaseGroupById_200_response_allOf_scans_inner:
      example:
        value:
          id: 1
          scanned_at: 2024-07-09T19:14:26Z
          organizationId: 100
          projectGroupReleaseId: 200
          createdAt: 2024-07-09T18:14:26Z
          updatedAt: 2024-07-09T19:14:26Z
      properties:
        id:
          example: 123
          type: integer
        scanned_at:
          example: 2024-07-02T22:56:38.769Z
          format: date-time
          type: string
        organizationId:
          example: 1
          type: integer
        projectGroupReleaseId:
          example: 123
          type: integer
        createdAt:
          example: 2024-07-02T22:56:38.769Z
          format: date-time
          type: string
        updatedAt:
          example: 2024-07-02T22:56:38.769Z
          format: date-time
          type: string
    getReleaseGroupById_200_response:
      allOf:
      - example:
          id: 1
          title: My Release Group
          organizationId: 1000
          policyId: 1001
          securityPolicyId: 1002
          qualityPolicyId: null
          publicOnPortal: true
          customReportText: null
          createdAt: 2024-07-09T21:51:20.671Z
          updatedAt: 2024-07-09T21:51:20.671Z
        properties:
          id:
            type: integer
          title:
            type: string
          organizationId:
            type: integer
          policyId:
            nullable: true
            type: integer
          securityPolicyId:
            nullable: true
            type: integer
          qualityPolicyId:
            nullable: true
            type: integer
          publicOnPortal:
            type: boolean
          reportCustomText:
            nullable: true
            type: string
          createdAt:
            format: date-time
            type: string
          updatedAt:
            format: date-time
            type: string
      - properties:
          releases:
            items:
              $ref: "#/components/schemas/getReleaseGroupById_200_response_allOf_releases_inner"
            type: array
          projects:
            items:
              $ref: "#/components/schemas/getReleaseGroupById_200_response_allOf_projects_inner"
            type: array
          scans:
            items:
              $ref: "#/components/schemas/getReleaseGroupById_200_response_allOf_scans_inner"
            type: array
      example:
        qualityPolicyId: 5
        projects:
        - projectId: custom+1/github.com/myrepo
          projectGroupReleaseId: 1
          branch: main
          revisionId: rev001
          createdAt: 2024-07-09T19:14:26Z
          updatedAt: 2024-07-09T19:14:26Z
        - projectId: custom+1/github.com/myrepo
          projectGroupReleaseId: 1
          branch: main
          revisionId: rev001
          createdAt: 2024-07-09T19:14:26Z
          updatedAt: 2024-07-09T19:14:26Z
        publicOnPortal: true
        title: title
        releases:
        - id: 1
          title: 1.0.0
          projectGroupId: 1
          dependency_count: 50
          license_count: 10
          unresolved_licensing_issue_count: 2
          unresolved_security_issue_count: 3
          unresolved_quality_issue_count: 1
          publishedOnPortal: cyclonedx_json
          publishedAt: 2024-07-09T19:14:26Z
          reportPath: /reports/1.0.0/sbom.cyclonedx.json
          publishedLicenses:
          - MIT
          - Apache-2.0
        - id: 1
          title: 1.0.0
          projectGroupId: 1
          dependency_count: 50
          license_count: 10
          unresolved_licensing_issue_count: 2
          unresolved_security_issue_count: 3
          unresolved_quality_issue_count: 1
          publishedOnPortal: cyclonedx_json
          publishedAt: 2024-07-09T19:14:26Z
          reportPath: /reports/1.0.0/sbom.cyclonedx.json
          publishedLicenses:
          - MIT
          - Apache-2.0
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        policyId: 1
        scans:
        - value:
            id: 1
            scanned_at: 2024-07-09T19:14:26Z
            organizationId: 100
            projectGroupReleaseId: 200
            createdAt: 2024-07-09T18:14:26Z
            updatedAt: 2024-07-09T19:14:26Z
        - value:
            id: 1
            scanned_at: 2024-07-09T19:14:26Z
            organizationId: 100
            projectGroupReleaseId: 200
            createdAt: 2024-07-09T18:14:26Z
            updatedAt: 2024-07-09T19:14:26Z
        securityPolicyId: 5
        reportCustomText: reportCustomText
        id: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
    updateReleaseGroupById_request:
      example:
        title: Updated Release Group
        licensingPolicyId: 1
        securityPolicyId: 2
        qualityPolicyId: 3
        publicOnPortal: true
        reportCustomText: null
      properties:
        title:
          type: string
        licensingPolicyId:
          type: integer
          nullable: true
        securityPolicyId:
          type: integer
          nullable: true
        qualityPolicyId:
          type: integer
          nullable: true
        publicOnPortal:
          type: boolean
          nullable: true
        reportCustomText:
          type: string
          nullable: true
    getAllReleaseGroupTeams_200_response_teams_inner:
      properties:
        id:
          type: integer
        name:
          type: string
    getAllReleaseGroupTeams_200_response:
      example:
        totalCount: 3
        teams:
        - id: 1
          name: West Coast Team
        - id: 2
          name: Midwest Team
        - id: 3
          name: East Coast Team
      properties:
        totalCount:
          type: integer
        teams:
          items:
            $ref: "#/components/schemas/getAllReleaseGroupTeams_200_response_teams_inner"
          type: array
    getReleaseGroupReleases_200_response:
      example:
        total: 0
        releases:
        - id: 1
          title: 1.0.0
          projectGroupId: 1
          dependency_count: 50
          license_count: 10
          unresolved_licensing_issue_count: 2
          unresolved_security_issue_count: 3
          unresolved_quality_issue_count: 1
          publishedOnPortal: cyclonedx_json
          publishedAt: 2024-07-09T19:14:26Z
          reportPath: /reports/1.0.0/sbom.cyclonedx.json
          publishedLicenses:
          - MIT
          - Apache-2.0
        - id: 1
          title: 1.0.0
          projectGroupId: 1
          dependency_count: 50
          license_count: 10
          unresolved_licensing_issue_count: 2
          unresolved_security_issue_count: 3
          unresolved_quality_issue_count: 1
          publishedOnPortal: cyclonedx_json
          publishedAt: 2024-07-09T19:14:26Z
          reportPath: /reports/1.0.0/sbom.cyclonedx.json
          publishedLicenses:
          - MIT
          - Apache-2.0
      properties:
        releases:
          items:
            $ref: "#/components/schemas/getReleaseGroupById_200_response_allOf_releases_inner"
          type: array
        total:
          type: integer
    deprecatedGetReleaseGroupReleases_200_response_inner:
      allOf:
      - example:
          id: 1
          title: My Release Group
          organizationId: 1000
          policyId: 1001
          securityPolicyId: 1002
          qualityPolicyId: null
          publicOnPortal: true
          customReportText: null
          createdAt: 2024-07-09T21:51:20.671Z
          updatedAt: 2024-07-09T21:51:20.671Z
        properties:
          id:
            type: integer
          title:
            type: string
          organizationId:
            type: integer
          policyId:
            nullable: true
            type: integer
          securityPolicyId:
            nullable: true
            type: integer
          qualityPolicyId:
            nullable: true
            type: integer
          publicOnPortal:
            type: boolean
          reportCustomText:
            nullable: true
            type: string
          createdAt:
            format: date-time
            type: string
          updatedAt:
            format: date-time
            type: string
      - properties:
          projects:
            items:
              $ref: "#/components/schemas/getReleaseGroupById_200_response_allOf_projects_inner"
            type: array
    createReleaseGroupReleases_request:
      example:
        title: 1.2.3
        projects:
        - projectId: git+github.com/myorg/myrepo
          branch: main
          revisionId: a0b1c3
        - projectId: git+github.com/myorg/other-repo
          branch: develop
          revisionId: rev0003
        - projectId: sbom+1/my-sbom-upload-project
          branch: main
          revisionId: rev123
      properties:
        title:
          type: string
        projects:
          items:
            $ref: "#/components/schemas/createReleaseGroup_request_release_projects_inner"
          type: array
    getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner_allOf_project_inner_allOf_teams_inner:
      properties:
        id:
          type: integer
        name:
          type: string
        uniqueId:
          nullable: true
          type: string
    getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner_allOf_project_inner_allOf_latestRevision:
      properties:
        locator:
          type: string
        message:
          type: string
      required:
      - locator
    getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner_allOf_project_inner:
      allOf:
      - properties:
          id:
            type: string
          title:
            type: string
          branch:
            type: string
          version:
            type: string
          type:
            enum:
            - container
            - archive
            - provided
            - autobuild
            - sbom
            type: string
          public:
            type: boolean
          url:
            type: string
          scanned:
            format: date-time
            type: string
          lastAnalyzed:
            format: date-time
            type: string
          teams:
            items:
              $ref: "#/components/schemas/getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner_allOf_project_inner_allOf_teams_inner"
            type: array
          latestRevision:
            $ref: "#/components/schemas/getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner_allOf_project_inner_allOf_latestRevision"
          latestBuildStatus:
            enum:
            - running
            - succeeded
            - failed
            type: string
        required:
        - branch
        - id
        - public
        - teams
        - title
        - type
      latestRevision:
      - type: object
        properties:
          loc:
            type: object
            description: Normalized representation of the Locator
            properties:
              fetcher:
                type: string
                description: the external package manager or internal representation
                  of one
              package:
                type: string
                description: the package name
              revision:
                type: string
                description: the version/revision of the package
          locator:
            type: string
            description: Text ID that uniquely identifies a project
          resolved:
            type: boolean
            description: Has the Revision been fully analyzed by FOSSA
          projectId:
            type: string
            description: The Project locator that the Revision belongs to
          source_type:
            type:
            - string
            - "null"
            description: FOSSA internal representation of the source language for
              the given repository/project
          error:
            type:
            - string
            - "null"
            description: Error message during analysis (if any)
          message:
            type:
            - string
            - "null"
            description: Message of the revision or commit
          revision_timestamp:
            type:
            - string
            - "null"
            description: timestamp of when the Revision was published
          latestRevisionScanId:
            type:
            - number
            - "null"
            description: The Revision Scan ID of the latest policy scan
          latestHubbleAnalysisId:
            type:
            - number
            - "null"
            description: The Hubble Analysis ID of the latest analysis
          createdAt:
            type: string
            description: when the Revision was added to the FOSSA Database
          updatedAt:
            type: string
            description: when the Revision was last updated in the FOSSA Database
          author:
            type:
            - string
            - "null"
            description: The author of the Revision
          link:
            type:
            - string
            - "null"
            description: The link associated with the Revision
          url:
            type:
            - string
            - "null"
            description: The url associated with the Revision
    getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner:
      allOf:
      - example:
          projectId: custom+1/github.com/myrepo
          projectGroupReleaseId: 1
          branch: main
          revisionId: rev001
          createdAt: 2024-07-09T19:14:26Z
          updatedAt: 2024-07-09T19:14:26Z
        properties:
          projectId:
            type: string
          projectGroupReleaseId:
            type: integer
          branch:
            type: string
          revisionId:
            type: string
          createdAt:
            format: date-time
            type: string
          updatedAt:
            format: date-time
            type: string
      - properties:
          project:
            items:
              $ref: "#/components/schemas/getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner_allOf_project_inner"
            type: array
    getReleaseGroupReleaseById_200_response_inner:
      allOf:
      - example:
          id: 1
          title: My Release Group
          organizationId: 1000
          policyId: 1001
          securityPolicyId: 1002
          qualityPolicyId: null
          publicOnPortal: true
          customReportText: null
          createdAt: 2024-07-09T21:51:20.671Z
          updatedAt: 2024-07-09T21:51:20.671Z
        properties:
          id:
            type: integer
          title:
            type: string
          organizationId:
            type: integer
          policyId:
            nullable: true
            type: integer
          securityPolicyId:
            nullable: true
            type: integer
          qualityPolicyId:
            nullable: true
            type: integer
          publicOnPortal:
            type: boolean
          reportCustomText:
            nullable: true
            type: string
          createdAt:
            format: date-time
            type: string
          updatedAt:
            format: date-time
            type: string
      - properties:
          projects:
            items:
              $ref: "#/components/schemas/getReleaseGroupReleaseById_200_response_inner_allOf_projects_inner"
            type: array
    updateReleaseGroupReleaseById_request_projects_inner:
      example:
        projectId: custom+1/org/project
        branch: main
        revisionId: rev001
        projectGroupReleaseId: 123
      properties:
        projectId:
          type: string
        branch:
          type: string
        revisionId:
          type: string
        projectGroupReleaseId:
          type: integer
    updateReleaseGroupReleaseById_request:
      example:
        title: New Release Title
        projects:
        - projectId: custom+1/org/project
          branch: main
          revisionId: rev001
          projectGroupReleaseId: 123
        projectsToDelete:
        - custom+1/org/deleteable
      properties:
        title:
          type: string
        projects:
          items:
            $ref: "#/components/schemas/updateReleaseGroupReleaseById_request_projects_inner"
          type: array
        projectsToDelete:
          items:
            type: string
          type: array
      required:
      - title
    getReleaseGroupReleaseRevisions_200_response_inner_allOf_licenses_inner:
      properties:
        title:
          example: custom-license
          type: string
        id:
          example: 22493
          type: integer
        licenseId:
          example: custom-license
          type: string
        revisionId:
          example: custom+1/david-CORE-3156$2024-03-28T17:34:14Z
          type: string
        licenseGroupId:
          example: 18965
          type: integer
        projectCorrectionId:
          type: string
          nullable: true
        ignored:
          example: false
          type: boolean
        url:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        copyright:
          type: string
          nullable: true
        file_count:
          example: 1
          type: integer
        manual:
          example: false
          type: boolean
        createdAt:
          example: 2024-03-28T17:34:36.062Z
          format: date-time
          type: string
        updatedAt:
          example: 2024-03-28T17:34:36.062Z
          format: date-time
          type: string
    getReleaseGroupReleaseRevisions_200_response_inner:
      allOf:
      - properties:
          loc:
            $ref: "#/components/schemas/getProjectRevisions_200_response_branch_value_inner_loc"
          locator:
            description: Text ID that uniquely identifies a project
            type: string
          resolved:
            description: Has the Revision been fully analyzed by FOSSA
            type: boolean
          projectId:
            description: The Project locator that the Revision belongs to
            type: string
          source_type:
            description: FOSSA internal representation of the source language for
              the given repository/project
            nullable: true
            type: string
          error:
            description: Error message during analysis (if any)
            nullable: true
            type: string
          message:
            description: Message of the revision or commit
            nullable: true
            type: string
          revision_timestamp:
            description: timestamp of when the Revision was published
            nullable: true
            type: string
          latestRevisionScanId:
            description: The Revision Scan ID of the latest policy scan
            nullable: true
            type: number
          latestHubbleAnalysisId:
            description: The Hubble Analysis ID of the latest analysis
            nullable: true
            type: number
          createdAt:
            description: when the Revision was added to the FOSSA Database
            type: string
          updatedAt:
            description: when the Revision was last updated in the FOSSA Database
            type: string
          author:
            description: The author of the Revision
            nullable: true
            type: string
          link:
            description: The link associated with the Revision
            nullable: true
            type: string
          url:
            description: The url associated with the Revision
            nullable: true
            type: string
      - properties:
          licenses:
            items:
              $ref: "#/components/schemas/getReleaseGroupReleaseRevisions_200_response_inner_allOf_licenses_inner"
            type: array
    getReleaseGroupReleaseLicenses_200_response_value:
      example:
        value:
          depth: 1
          licenseId: MIT
          name: MIT License
          matches:
          - npm+svelte$1.0.0
          - git+github.com/org/someproject$abcd1234
          - pip+pandas$9.8.7
          sources:
          - git+github.com/myorg/myrepo$rev001
          - sbom+123/my-sbom-project$1.2.3
          - custom+123/some-cli-project$12345
      properties:
        depth:
          example: 1
          type: integer
        licenseId:
          example: MIT
          type: string
        name:
          example: MIT License
          type: string
        matches:
          example:
          - npm+svelte$1.0.0
          - git+github.com/org/someproject$abcd1234
          - pip+pandas$9.8.7
          items:
            type: string
          type: array
        sources:
          example:
          - git+github.com/myorg/myrepo$rev001
          - sbom+123/my-sbom-project$1.2.3
          - custom+123/some-cli-project$12345
          items:
            type: string
          type: array
    getReleaseGroupReleaseObligations_200_response_value_inner:
      example:
        summary: An example of a license obligation
        value:
          license: BSD-4-Clause
          description: Describes whether the original copyright must be retained.
          revisions:
            sbom+1/my-sbom-project:
            - npm+svelte$1.1.1
            custom+1/my-cli-project:
            - npm+svelte$1.1.1
      properties:
        description:
          description: The description of the obligation.
          type: string
        license:
          description: The license associated with the obligation.
          type: string
        revisions:
          additionalProperties:
            items:
              type: string
          description: A dictionary where the key is the parent locator and the value
            is an array of locators in which the obligation was found.
    getReleaseGroupReleaseScans_200_response:
      allOf:
      - example:
          value:
            id: 1
            scanned_at: 2024-07-09T19:14:26Z
            organizationId: 100
            projectGroupReleaseId: 200
            createdAt: 2024-07-09T18:14:26Z
            updatedAt: 2024-07-09T19:14:26Z
        properties:
          id:
            example: 123
            type: integer
          scanned_at:
            example: 2024-07-02T22:56:38.769Z
            format: date-time
            type: string
          organizationId:
            example: 1
            type: integer
          projectGroupReleaseId:
            example: 123
            type: integer
          createdAt:
            example: 2024-07-02T22:56:38.769Z
            format: date-time
            type: string
          updatedAt:
            example: 2024-07-02T22:56:38.769Z
            format: date-time
            type: string
      - properties:
          revisionScans:
            items: {}
            type: array
      example:
        organizationId: 1
        revisionScans:
        - ""
        - ""
        createdAt: 2024-07-02T22:56:38.769Z
        scanned_at: 2024-07-02T22:56:38.769Z
        id: 123
        projectGroupReleaseId: 123
        updatedAt: 2024-07-02T22:56:38.769Z
    getReleaseGroupReleaseSummary_200_response:
      example:
        dependency_count: 50
        isSteady: true
        project_count: 10
        license_count: 5
        unresolved_licensing_issue_count: 100
        unresolved_quality_issue_count: 100
        unresolved_security_issue_count: 100
        unresolved_issue_count: 300
      properties:
        license_count:
          example: 5
          type: integer
        dependency_count:
          example: 50
          type: integer
        project_count:
          example: 10
          type: integer
        unresolved_issue_count:
          example: 300
          type: integer
        unresolved_licensing_issue_count:
          example: 100
          type: integer
        unresolved_security_issue_count:
          example: 100
          type: integer
        unresolved_quality_issue_count:
          example: 100
          type: integer
        isSteady:
          example: true
          type: boolean
    queueReleaseGroupAttributionReport_200_response:
      example:
        taskId: 0
      properties:
        taskId:
          type: integer
    getReleaseGroupAttributionReportStatus_200_response:
      example:
        taskId: 0
        url: url
        status: CREATED
      properties:
        taskId:
          type: integer
        status:
          enum:
          - CREATED
          - ASSIGNED
          - RUNNING
          - SUCCEEDED
          - FAILED
          type: string
        url:
          type: string
    updateRevision_request:
      properties:
        link:
          description: New link for Revision
          type: string
        url:
          description: New url for Revision
          type: string
        author:
          description: New author for Revision
          type: string
    getRevisionAttributionEmail_200_response_context_reportOptions:
      description: The report options
      example:
        includeClosedVulnerabilities: true
        includeLicenseHeaders: true
        includeLicenseList: true
        includeCopyrightList: true
        includeFileMatches: true
        includeDeepDependencies: true
        includeDirectDependencies: true
        download: true
        createPublicReport: true
        includeLicenseScan: true
        includeProjectLicense: true
        includeOpenVulnerabilities: true
        includeDependencySummary: true
        email: true
      properties:
        download:
          description: Whether to download the report
          type: boolean
        createPublicReport:
          description: Whether to create a public report
          type: boolean
        email:
          description: Whether to email the report
          type: boolean
        includeDeepDependencies:
          description: Whether to include deep dependencies
          type: boolean
        includeDirectDependencies:
          description: Whether to include direct dependencies
          type: boolean
        includeLicenseList:
          description: Whether to include the license list
          type: boolean
        includeLicenseScan:
          description: Whether to include the license scan
          type: boolean
        includeProjectLicense:
          description: Whether to include the project license
          type: boolean
        includeCopyrightList:
          description: Whether to include the copyright list
          type: boolean
        includeFileMatches:
          description: Whether to include the file matches
          type: boolean
        includeOpenVulnerabilities:
          description: Whether to include the open vulnerabilities
          type: boolean
        includeClosedVulnerabilities:
          description: Whether to include the closed vulnerabilities
          type: boolean
        includeDependencySummary:
          description: Whether to include the dependency summary
          type: boolean
        includeLicenseHeaders:
          description: Whether to include the license headers
          type: boolean
    getRevisionAttributionEmail_200_response_context:
      example:
        reportOptions:
          includeClosedVulnerabilities: true
          includeLicenseHeaders: true
          includeLicenseList: true
          includeCopyrightList: true
          includeFileMatches: true
          includeDeepDependencies: true
          includeDirectDependencies: true
          download: true
          createPublicReport: true
          includeLicenseScan: true
          includeProjectLicense: true
          includeOpenVulnerabilities: true
          includeDependencySummary: true
          email: true
        userId: 1
        locator: locator
      properties:
        userId:
          description: The user's ID
          type: integer
        reportOptions:
          $ref: "#/components/schemas/getRevisionAttributionEmail_200_response_context_reportOptions"
        locator:
          description: The locator
          type: string
    getRevisionAttributionEmail_200_response:
      example:
        jobToken: jobToken
        pod: pod
        started: 2000-01-23T04:56:07.000+00:00
        finished: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        maxRetries: 5
        attempt_number: 0
        task: task
        scheduledStartTime: 2000-01-23T04:56:07.000+00:00
        context:
          reportOptions:
            includeClosedVulnerabilities: true
            includeLicenseHeaders: true
            includeLicenseList: true
            includeCopyrightList: true
            includeFileMatches: true
            includeDeepDependencies: true
            includeDirectDependencies: true
            download: true
            createPublicReport: true
            includeLicenseScan: true
            includeProjectLicense: true
            includeOpenVulnerabilities: true
            includeDependencySummary: true
            email: true
          userId: 1
          locator: locator
        id: 6
        updatedAt: 2000-01-23T04:56:07.000+00:00
        status: status
      properties:
        attempt_number:
          description: The number of attempts
          type: integer
        id:
          description: The ID of the task
          type: integer
        task:
          description: The task to be performed
          type: string
        context:
          $ref: "#/components/schemas/getRevisionAttributionEmail_200_response_context"
        maxRetries:
          description: The maximum number of retries
          type: integer
        scheduledStartTime:
          description: The scheduled start time
          format: date-time
          type: string
        updatedAt:
          description: The time the task was last updated
          format: date-time
          type: string
        createdAt:
          description: The time the task was created
          format: date-time
          type: string
        started:
          description: The time the task was started
          format: date-time
          type: string
        finished:
          description: The time the task was finished
          format: date-time
          type: string
        pod:
          description: The pod the task is running on
          type: string
        status:
          description: The status of the task
          type: string
        jobToken:
          description: The token of the job in the FOSSA Backend
          type: string
    getRevisionAttributionJSON_200_response_project:
      description: Project information
      example:
        name: name
        revision: revision
      properties:
        name:
          description: The name of the project
          type: string
        revision:
          description: The revision of the project
          type: string
    getRevisionAttributionJSON_200_response_directDependencies_inner_licenses_inner:
      example:
        name: name
        attribution: attribution
      properties:
        name:
          description: The name of the license
          type: string
        attribution:
          description: The attribution of the license
          type: string
    getRevisionAttributionJSON_200_response_directDependencies_inner_noticeFiles_inner:
      example:
        revisionId: revisionId
        createdAt: 2000-01-23T04:56:07.000+00:00
        ignored: true
        contents: contents
        copyrights:
        - copyrights
        - copyrights
        id: 0
        updatedAt: 2000-01-23T04:56:07.000+00:00
        corrected: true
      properties:
        id:
          description: The ID of the notice match
          type: integer
        revisionId:
          description: The revision ID of the notice match
          type: string
        contents:
          description: The contents of the notice match
          type: string
        copyrights:
          description: The copyrights of the notice match
          items:
            type: string
          type: array
        createdAt:
          description: The creation date of the notice match
          format: date-time
          type: string
        updatedAt:
          description: The update date of the notice match
          format: date-time
          type: string
        corrected:
          description: Whether the notice match has been manually corrected
          type: boolean
        ignored:
          description: Whether the notice match has been manually ignored
          type: boolean
    getRevisionAttributionJSON_200_response_directDependencies_inner:
      example:
        projectUrl: projectUrl
        package: package
        notes:
        - notes
        - notes
        otherLicenses:
        - name: name
          attribution: attribution
        - name: name
          attribution: attribution
        downloadUrl: downloadUrl
        description: description
        source: source
        title: title
        version: version
        dependencyPaths:
        - dependencyPaths
        - dependencyPaths
        licenses:
        - name: name
          attribution: attribution
        - name: name
          attribution: attribution
        packageLabels:
        - packageLabels
        - packageLabels
        noticeFiles:
        - revisionId: revisionId
          createdAt: 2000-01-23T04:56:07.000+00:00
          ignored: true
          contents: contents
          copyrights:
          - copyrights
          - copyrights
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
          corrected: true
        - revisionId: revisionId
          createdAt: 2000-01-23T04:56:07.000+00:00
          ignored: true
          contents: contents
          copyrights:
          - copyrights
          - copyrights
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
          corrected: true
        hash: hash
        isGolang: true
        authors:
        - authors
        - authors
      properties:
        package:
          description: The package name
          type: string
        source:
          description: The source of the package
          type: string
        version:
          description: The version of the package
          type: string
        hash:
          description: The hash of the package
          type: string
        authors:
          description: The authors of the package
          items:
            type: string
          type: array
        description:
          description: The description of the package
          type: string
        licenses:
          description: The licenses of the package
          items:
            $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner_licenses_inner"
          type: array
        otherLicenses:
          description: The other licenses of the package
          items:
            $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner_licenses_inner"
          type: array
        projectUrl:
          description: The project URL
          type: string
        dependencyPaths:
          description: The dependency paths
          items:
            type: string
          type: array
        notes:
          description: The notes of the package
          items:
            type: string
          type: array
        downloadUrl:
          description: The download URL
          type: string
        isGolang:
          description: Whether the package is Golang
          type: boolean
        title:
          description: The title of the package
          type: string
        noticeFiles:
          description: The notice file matches of the package
          items:
            $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner_noticeFiles_inner"
          type: array
        packageLabels:
          description: "All applicable package labels assigned to the package, including\
            \ globally applied labels, project applied labels, and revision applied\
            \ labels that match this package in this revision."
          items:
            type: string
          type: array
    getRevisionAttributionJSON_200_response:
      example:
        licenses: "{}"
        deepDependencies:
        - projectUrl: projectUrl
          package: package
          notes:
          - notes
          - notes
          otherLicenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          downloadUrl: downloadUrl
          description: description
          source: source
          title: title
          version: version
          dependencyPaths:
          - dependencyPaths
          - dependencyPaths
          licenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          packageLabels:
          - packageLabels
          - packageLabels
          noticeFiles:
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          hash: hash
          isGolang: true
          authors:
          - authors
          - authors
        - projectUrl: projectUrl
          package: package
          notes:
          - notes
          - notes
          otherLicenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          downloadUrl: downloadUrl
          description: description
          source: source
          title: title
          version: version
          dependencyPaths:
          - dependencyPaths
          - dependencyPaths
          licenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          packageLabels:
          - packageLabels
          - packageLabels
          noticeFiles:
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          hash: hash
          isGolang: true
          authors:
          - authors
          - authors
        directDependencies:
        - projectUrl: projectUrl
          package: package
          notes:
          - notes
          - notes
          otherLicenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          downloadUrl: downloadUrl
          description: description
          source: source
          title: title
          version: version
          dependencyPaths:
          - dependencyPaths
          - dependencyPaths
          licenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          packageLabels:
          - packageLabels
          - packageLabels
          noticeFiles:
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          hash: hash
          isGolang: true
          authors:
          - authors
          - authors
        - projectUrl: projectUrl
          package: package
          notes:
          - notes
          - notes
          otherLicenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          downloadUrl: downloadUrl
          description: description
          source: source
          title: title
          version: version
          dependencyPaths:
          - dependencyPaths
          - dependencyPaths
          licenses:
          - name: name
            attribution: attribution
          - name: name
            attribution: attribution
          packageLabels:
          - packageLabels
          - packageLabels
          noticeFiles:
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          - revisionId: revisionId
            createdAt: 2000-01-23T04:56:07.000+00:00
            ignored: true
            contents: contents
            copyrights:
            - copyrights
            - copyrights
            id: 0
            updatedAt: 2000-01-23T04:56:07.000+00:00
            corrected: true
          hash: hash
          isGolang: true
          authors:
          - authors
          - authors
        noticeFiles:
        - revisionId: revisionId
          createdAt: 2000-01-23T04:56:07.000+00:00
          ignored: true
          contents: contents
          copyrights:
          - copyrights
          - copyrights
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
          corrected: true
        - revisionId: revisionId
          createdAt: 2000-01-23T04:56:07.000+00:00
          ignored: true
          contents: contents
          copyrights:
          - copyrights
          - copyrights
          id: 0
          updatedAt: 2000-01-23T04:56:07.000+00:00
          corrected: true
        project:
          name: name
          revision: revision
        copyrightsByLicense: "{}"
      properties:
        project:
          $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_project"
        directDependencies:
          items:
            $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner"
          type: array
        deepDependencies:
          items:
            $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner"
          type: array
        licenses:
          description: A record of license names to their text
          type: object
        copyrightsByLicense:
          description: A record of license names to their copyrights
          type: object
        noticeFiles:
          description: A list of notice file matches
          items:
            $ref: "#/components/schemas/getRevisionAttributionJSON_200_response_directDependencies_inner_noticeFiles_inner"
          type: array
    sbomAnalysis_200_response_sbomFile_analysis_inner:
      properties:
        status:
          enum:
          - success
          - error
          - unknown
          type: string
        description:
          type: string
        value:
          type: string
    sbomAnalysis_200_response_sbomFile:
      properties:
        status:
          enum:
          - success
          - error
          type: string
        analysis:
          items:
            $ref: "#/components/schemas/sbomAnalysis_200_response_sbomFile_analysis_inner"
          type: array
      requiredFields:
        type: object
        properties:
          status:
            type: string
            enum:
            - success
            - error
            - unknown
          analysis:
            type: array
            items:
              type: object
              properties:
                status:
                  type: string
                  enum:
                  - success
                  - error
                  - unknown
                description:
                  type: string
                value:
                  type: string
      dependencyScan:
        type: object
        properties:
          status:
            type: string
            enum:
            - success
            - error
          analysis:
            type: array
            items:
              type: object
              properties:
                status:
                  type: string
                  enum:
                  - success
                  - error
                description:
                  type: string
                value:
                  type: string
    sbomAnalysis_200_response:
      properties:
        sbomFile:
          $ref: "#/components/schemas/sbomAnalysis_200_response_sbomFile"
    getBuilds_200_response_inner_revision:
      description: The revision for the build
      example:
        message: message
        locator: locator
        projectId: 5
      properties:
        locator:
          description: The revision locator for the build
          type: string
        projectId:
          description: The project locator of the project for the build
          type: integer
        message:
          description: The message for the revision
          type: string
    getBuilds_200_response_inner_task:
      description: The task for the build
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        maxRetries: 7
        attempt_number: 2
        started: 2000-01-23T04:56:07.000+00:00
        finished: 2000-01-23T04:56:07.000+00:00
        status: CREATED
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        status:
          description: The status of the task
          enum:
          - CREATED
          - ASSIGNED
          - RUNNING
          - SUCCEEDED
          - FAILED
          type: string
        started:
          description: The date and time the task was started
          format: date-time
          type: string
        finished:
          description: The date and time the task was finished
          format: date-time
          type: string
        createdAt:
          description: The date and time the task was created
          format: date-time
          type: string
        updatedAt:
          description: The date and time the task was last updated
          format: date-time
          type: string
        attempt_number:
          description: The number of attempts for the task
          type: integer
        maxRetries:
          description: The maximum number of retries for the task
          type: integer
    getBuilds_200_response_inner:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        cliVersionId: 5
        task:
          createdAt: 2000-01-23T04:56:07.000+00:00
          maxRetries: 7
          attempt_number: 2
          started: 2000-01-23T04:56:07.000+00:00
          finished: 2000-01-23T04:56:07.000+00:00
          status: CREATED
          updatedAt: 2000-01-23T04:56:07.000+00:00
        warnings:
        - warnings
        - warnings
        provided: true
        id: 0
        ownerId: 6
        error: error
        locator: locator
        taskId: 1
        updatedAt: 2000-01-23T04:56:07.000+00:00
        revision:
          message: message
          locator: locator
          projectId: 5
      properties:
        id:
          description: The ID for the build
          type: integer
        locator:
          description: The revision locator for the build
          type: string
        ownerId:
          description: The ID of the user who owns the build
          nullable: true
          type: integer
        error:
          description: The error message for the build
          nullable: true
          type: string
        warnings:
          description: The warning messages for the build
          items:
            type: string
          type: array
        provided:
          description: Is the build from a CLI upload
          type: boolean
        taskId:
          description: The ID of the task for the build
          nullable: true
          type: integer
        createdAt:
          description: The date and time the build was created
          format: date-time
          type: string
        updatedAt:
          description: The date and time the build was last updated
          format: date-time
          type: string
        cliVersionId:
          description: The ID of the CLI version for the build
          type: integer
        revision:
          $ref: "#/components/schemas/getBuilds_200_response_inner_revision"
        task:
          $ref: "#/components/schemas/getBuilds_200_response_inner_task"
    getAllUsers_200_response_inner_userRole_role:
      example:
        organizationId: 5
        scope: scope
        isCustom: true
        name: name
        id: 5
      properties:
        id:
          description: The role's unique identifier
          type: integer
        organizationId:
          description: The organization the role belongs to
          type: integer
        isCustom:
          description: Whether the role is custom
          type: boolean
        name:
          description: The role's name
          type: string
        scope:
          description: The role's scope
          type: string
    getAllUsers_200_response_inner_userRole:
      example:
        role:
          organizationId: 5
          scope: scope
          isCustom: true
          name: name
          id: 5
        roleId: 1
      properties:
        roleId:
          description: The user's Organization role ID
          type: integer
        role:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_userRole_role"
    getAllUsers_200_response_inner_tokens_inner_meta:
      example:
        pushOnly: true
      properties:
        pushOnly:
          description: Whether the token is push only
          type: boolean
      defaultPolicyId:
        type: integer
        description: The token's default licensing policy ID
      defaultSecurityPolicyId:
        type: integer
        description: The token's default security policy ID
      defaultQualityPolicyId:
        type: integer
        description: The token's default quality policy ID
    getAllUsers_200_response_inner_tokens_inner:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        meta:
          pushOnly: true
        name: name
        id: 2
        isDisabled: true
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The token's unique identifier
          type: integer
        name:
          description: The token's name
          type: string
        isDisabled:
          type: boolean
        updatedAt:
          description: The date the token was last updated
          format: date-time
          type: string
        createdAt:
          description: The date the token was created
          format: date-time
          type: string
        meta:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_tokens_inner_meta"
    getAllUsers_200_response_inner_teamUsers_inner_team:
      example:
        name: name
        id: 9
      properties:
        id:
          description: The team's unique identifier
          type: integer
        name:
          description: The team's name
          type: string
    getAllUsers_200_response_inner_teamUsers_inner:
      example:
        roleId: 7
        team:
          name: name
          id: 9
      properties:
        roleId:
          description: The user's role ID
          type: integer
        team:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_teamUsers_inner_team"
    getAllUsers_200_response_inner_organization:
      example:
        access_level: access_level
        id: 3
        title: title
      properties:
        id:
          description: The organization's unique identifier
          type: integer
        title:
          description: The organization's title
          type: string
        access_level:
          description: The organization's access level
          type: string
    getAllUsers_200_response_inner_github:
      example:
        avatar_url: avatar_url
        name: name
        email: email
      properties:
        name:
          description: The user's GitHub username
          type: string
        email:
          description: The user's GitHub email address
          type: string
        avatar_url:
          description: The user's GitHub avatar URL
          type: string
    getAllUsers_200_response_inner_bitbucketCloud:
      example:
        avatar_url: avatar_url
        name: name
        email: email
      properties:
        name:
          description: The user's Bitbucket Cloud username
          type: string
        email:
          description: The user's Bitbucket Cloud email address
          type: string
        avatar_url:
          description: The user's Bitbucket Cloud avatar URL
          type: string
    getAllUsers_200_response_inner:
      example:
        role: role
        demo: true
        enabled: true
        organizationId: 6
        createdAt: 2000-01-23T04:56:07.000+00:00
        last_visit: 2000-01-23T04:56:07.000+00:00
        teamUsers:
        - roleId: 7
          team:
            name: name
            id: 9
        - roleId: 7
          team:
            name: name
            id: 9
        tokens:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          meta:
            pushOnly: true
          name: name
          id: 2
          isDisabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          meta:
            pushOnly: true
          name: name
          id: 2
          isDisabled: true
          updatedAt: 2000-01-23T04:56:07.000+00:00
        id: 0
        email: email
        updatedAt: 2000-01-23T04:56:07.000+00:00
        github:
          avatar_url: avatar_url
          name: name
          email: email
        email_verified: true
        joined: 2000-01-23T04:56:07.000+00:00
        install_admin: true
        super: true
        sso_only: true
        full_name: full_name
        phone: phone
        organization:
          access_level: access_level
          id: 3
          title: title
        has_set_password: true
        userRole:
          role:
            organizationId: 5
            scope: scope
            isCustom: true
            name: name
            id: 5
          roleId: 1
        bitbucketCloud:
          avatar_url: avatar_url
          name: name
          email: email
        username: username
        terms_agreed: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: The user's unique identifier
          type: integer
        username:
          description: The user's username
          nullable: true
          type: string
        email:
          description: The user's email address
          nullable: true
          type: string
        email_verified:
          description: Whether the user's email address has been verified
          nullable: true
          type: boolean
        demo:
          description: Whether the user is a demo user
          type: boolean
        super:
          description: Whether the user is a super user
          type: boolean
        joined:
          description: The date the user joined the organization
          format: date-time
          nullable: true
          type: string
        last_visit:
          description: The date the user last visited the organization
          format: date-time
          nullable: true
          type: string
        terms_agreed:
          description: The date the user agreed to the organization's terms
          format: date-time
          nullable: true
          type: string
        full_name:
          description: The user's full name
          nullable: true
          type: string
        phone:
          description: The user's phone number
          nullable: true
          type: string
        role:
          description: The user's role in the organization
          nullable: true
          type: string
        organizationId:
          description: The organization the user belongs to
          type: integer
        sso_only:
          description: Whether the user is SSO only
          type: boolean
        enabled:
          description: Whether the user is enabled
          type: boolean
        has_set_password:
          description: Whether the user has set a password
          nullable: true
          type: boolean
        install_admin:
          description: Whether the user is an install admin
          nullable: true
          type: boolean
        createdAt:
          description: The date the user was created
          format: date-time
          type: string
        updatedAt:
          description: The date the user was last updated
          format: date-time
          type: string
        userRole:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_userRole"
        tokens:
          items:
            $ref: "#/components/schemas/getAllUsers_200_response_inner_tokens_inner"
          type: array
        teamUsers:
          items:
            $ref: "#/components/schemas/getAllUsers_200_response_inner_teamUsers_inner"
          type: array
        organization:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_organization"
        github:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_github"
        bitbucketCloud:
          $ref: "#/components/schemas/getAllUsers_200_response_inner_bitbucketCloud"
    getProjectDependencies_200_response_dependencies_inner_status:
      example:
        analyzing: true
        unsupported: true
        error: error
        resolved: true
      properties:
        error:
          type: string
        resolved:
          type: boolean
        unsupported:
          type: boolean
        analyzing:
          type: boolean
    getProjectDependencies_200_response_dependencies_inner_issues_inner:
      example:
        license: license
        cvssScore: 1.4658129805029452
        id: 6
        type: type
        status: active
      properties:
        id:
          type: integer
        type:
          type: string
        status:
          enum:
          - active
          - ignored
          type: string
        license:
          type: string
        cvssScore:
          type: number
    getProjectDependencies_200_response_dependencies_inner_rootProjects_inner:
      example:
        title: title
        branch: branch
        revision: revision
      properties:
        title:
          type: string
        revision:
          type: string
        branch:
          type: string
    getProjectDependencies_200_response_dependencies_inner:
      example:
        declaredLicenses:
        - declaredLicenses
        - declaredLicenses
        isManual: true
        originPaths:
        - originPaths
        - originPaths
        title: title
        isIgnored: true
        issues:
        - license: license
          cvssScore: 1.4658129805029452
          id: 6
          type: type
          status: active
        - license: license
          cvssScore: 1.4658129805029452
          id: 6
          type: type
          status: active
        version: version
        rootProjects:
        - title: title
          branch: branch
          revision: revision
        - title: title
          branch: branch
          revision: revision
        layerDepth: 5.962133916683182
        licenses:
        - licenses
        - licenses
        depth: 0
        cpes:
        - cpes
        - cpes
        isUnknown: true
        locator: locator
        status:
          analyzing: true
          unsupported: true
          error: error
          resolved: true
      properties:
        locator:
          type: string
        title:
          type: string
        isManual:
          type: boolean
        isIgnored:
          type: boolean
        isUnknown:
          type: boolean
        licenses:
          items:
            type: string
          type: array
        declaredLicenses:
          items:
            type: string
          type: array
        depth:
          type: integer
        originPaths:
          items:
            type: string
          type: array
        status:
          $ref: "#/components/schemas/getProjectDependencies_200_response_dependencies_inner_status"
        issues:
          items:
            $ref: "#/components/schemas/getProjectDependencies_200_response_dependencies_inner_issues_inner"
          type: array
        rootProjects:
          items:
            $ref: "#/components/schemas/getProjectDependencies_200_response_dependencies_inner_rootProjects_inner"
          type: array
        layerDepth:
          type: number
        cpes:
          items:
            type: string
          type: array
        version:
          type: string
    getProjectDependencies_200_response:
      example:
        count: 5
        dependencies:
        - declaredLicenses:
          - declaredLicenses
          - declaredLicenses
          isManual: true
          originPaths:
          - originPaths
          - originPaths
          title: title
          isIgnored: true
          issues:
          - license: license
            cvssScore: 1.4658129805029452
            id: 6
            type: type
            status: active
          - license: license
            cvssScore: 1.4658129805029452
            id: 6
            type: type
            status: active
          version: version
          rootProjects:
          - title: title
            branch: branch
            revision: revision
          - title: title
            branch: branch
            revision: revision
          layerDepth: 5.962133916683182
          licenses:
          - licenses
          - licenses
          depth: 0
          cpes:
          - cpes
          - cpes
          isUnknown: true
          locator: locator
          status:
            analyzing: true
            unsupported: true
            error: error
            resolved: true
        - declaredLicenses:
          - declaredLicenses
          - declaredLicenses
          isManual: true
          originPaths:
          - originPaths
          - originPaths
          title: title
          isIgnored: true
          issues:
          - license: license
            cvssScore: 1.4658129805029452
            id: 6
            type: type
            status: active
          - license: license
            cvssScore: 1.4658129805029452
            id: 6
            type: type
            status: active
          version: version
          rootProjects:
          - title: title
            branch: branch
            revision: revision
          - title: title
            branch: branch
            revision: revision
          layerDepth: 5.962133916683182
          licenses:
          - licenses
          - licenses
          depth: 0
          cpes:
          - cpes
          - cpes
          isUnknown: true
          locator: locator
          status:
            analyzing: true
            unsupported: true
            error: error
            resolved: true
      properties:
        dependencies:
          items:
            $ref: "#/components/schemas/getProjectDependencies_200_response_dependencies_inner"
          type: array
        count:
          type: integer
    getReleaseGroupDependencyRootProjects_200_response:
      example:
        rootProjects:
        - title: title
          branch: branch
          revision: revision
        - title: title
          branch: branch
          revision: revision
      properties:
        rootProjects:
          items:
            $ref: "#/components/schemas/getProjectDependencies_200_response_dependencies_inner_rootProjects_inner"
          type: array
    getOrganizationGeneralSettings_200_response_labels_inner:
      example:
        projectCount: 6
        id: 0
        label: label
      properties:
        id:
          type: integer
        label:
          type: string
        projectCount:
          type: integer
    getOrganizationGeneralSettings_200_response:
      example:
        disableNonCustomTeamUserRoles: true
        title: title
        dependencySignatures: dependencySignatures
        email: email
        defaultRoleId: 1
        labels:
        - projectCount: 6
          id: 0
          label: label
        - projectCount: 6
          id: 0
          label: label
      properties:
        labels:
          items:
            $ref: "#/components/schemas/getOrganizationGeneralSettings_200_response_labels_inner"
          type: array
        title:
          type: string
        email:
          type: string
        defaultRoleId:
          type: integer
        dependencySignatures:
          type: string
        disableNonCustomTeamUserRoles:
          type: boolean
    updateOrganizationGeneralSettings_request:
      properties:
        labels:
          items:
            type: string
          type: array
        title:
          type: string
        email:
          type: string
        defaultRoleId:
          type: integer
        dependencySignatures:
          type: string
        disableNonCustomTeamUserRoles:
          type: boolean
    getOrganizationProjectPrivacySettings_200_response:
      example:
        defaultProjectPrivacy: public
      properties:
        defaultProjectPrivacy:
          description: the default privacy setting for new projects
          enum:
          - public
          - private
          type: string
          nullable: true
    getOrganizationGithubStatusCheckSettings_200_response:
      example:
        projectDefaultProvidedIntegrationhookTimeout: 6.027456183070403
        projectDefaultIntegrationhookFailState: ERROR
        projectDefaultAutomatedIntegrationhookTimeout: 0.8008281904610115
      properties:
        projectDefaultAutomatedIntegrationhookTimeout:
          type: number
        projectDefaultProvidedIntegrationhookTimeout:
          type: number
        projectDefaultIntegrationhookFailState:
          enum:
          - ERROR
          - SUCCESS
          type: string
    getOrganizationLicensingIssueSettings_200_response:
      example:
        projectDefaultLicensingIssueScanningEnabled: true
        projectDefaultLicensingStatusCheckEnabled: true
        projectDefaultStatusCheckFilterLicensing: 6
        defaultPolicyId: 0
      properties:
        defaultPolicyId:
          type: integer
        projectDefaultLicensingIssueScanningEnabled:
          type: boolean
        projectDefaultLicensingStatusCheckEnabled:
          type: boolean
        projectDefaultStatusCheckFilterLicensing:
          type: integer
    getOrganizationSecurityIssueSettings_200_response:
      example:
        projectDefaultSecurityIssueScanningEnabled: true
        defaultSecurityPolicyId: 0
        projectDefaultSecurityStatusCheckEnabled: true
        projectDefaultStatusCheckFilterVulnerability: 6
      properties:
        defaultSecurityPolicyId:
          type: integer
        projectDefaultSecurityIssueScanningEnabled:
          type: boolean
        projectDefaultSecurityStatusCheckEnabled:
          type: boolean
        projectDefaultStatusCheckFilterVulnerability:
          type: integer
    getOrganizationQualityIssueSettings_200_response:
      example:
        projectDefaultQualityIssueScanningEnabled: true
        projectDefaultStatusCheckFilterQuality: 6
        defaultQualityPolicyId: 0
        projectDefaultQualityStatusCheckEnabled: true
      properties:
        defaultQualityPolicyId:
          type: integer
        projectDefaultQualityIssueScanningEnabled:
          type: boolean
        projectDefaultQualityStatusCheckEnabled:
          type: boolean
        projectDefaultStatusCheckFilterQuality:
          type: integer
    getOrganizationContainerIssueSettings_200_response:
      example:
        projectDefaultExcludeBaseLayerIssuesQuality: true
        projectDefaultExcludeBaseLayerIssuesSecurity: true
        projectDefaultExcludeBaseLayerIssuesLicensing: true
      properties:
        projectDefaultExcludeBaseLayerIssuesLicensing:
          type: boolean
        projectDefaultExcludeBaseLayerIssuesSecurity:
          type: boolean
        projectDefaultExcludeBaseLayerIssuesQuality:
          type: boolean
    getShareRequests_200_response_shareRequests_inner:
      example:
        originProjectLocator: originProjectLocator
        originRevisionId: originRevisionId
        sharedAt: 2000-01-23T04:56:07.000+00:00
        receivingOrganizationName: receivingOrganizationName
        sharedOrganizationId: 0
        projectTitle: projectTitle
      properties:
        originRevisionId:
          description: The ID of the revision that was shared
          type: string
        originProjectLocator:
          description: The locator of the project that was shared
          type: string
        projectTitle:
          description: The title of the project that was shared
          type: string
        sharedOrganizationId:
          description: The ID of the shared organization record
          format: int64
          type: integer
        sharedAt:
          description: The timestamp when the share was created
          format: date-time
          type: string
        receivingOrganizationName:
          description: The name of the organization that received the share
          type: string
    getShareRequests_200_response:
      example:
        shareRequests:
        - originProjectLocator: originProjectLocator
          originRevisionId: originRevisionId
          sharedAt: 2000-01-23T04:56:07.000+00:00
          receivingOrganizationName: receivingOrganizationName
          sharedOrganizationId: 0
          projectTitle: projectTitle
        - originProjectLocator: originProjectLocator
          originRevisionId: originRevisionId
          sharedAt: 2000-01-23T04:56:07.000+00:00
          receivingOrganizationName: receivingOrganizationName
          sharedOrganizationId: 0
          projectTitle: projectTitle
      properties:
        shareRequests:
          items:
            $ref: "#/components/schemas/getShareRequests_200_response_shareRequests_inner"
          type: array
    createShareRequest_request:
      properties:
        revisionId:
          description: The locator for the revision to share
          type: string
        sharedOrganizationId:
          description: The ID of the shared organization record
          format: int64
          type: integer
      required:
      - revisionId
      - sharedOrganizationId
    createShareRequest_201_response_task:
      example:
        jobToken: jobToken
        name: name
      properties:
        name:
          description: "Identifier for the task type (e.g., \"ProjectRevisionShare\"\
            )"
          type: string
        jobToken:
          description: Token used to track the share job
          type: string
    createShareRequest_201_response:
      example:
        task:
          jobToken: jobToken
          name: name
      properties:
        task:
          $ref: "#/components/schemas/createShareRequest_201_response_task"
    getLinkedOrganizations_200_response_organizationsToShareWith_inner:
      example:
        receivingOrganizationName: receivingOrganizationName
        originOrganizationName: originOrganizationName
        sharedOrganizationId: 0
      properties:
        sharedOrganizationId:
          description: The ID of the shared organization record
          format: int64
          type: integer
        originOrganizationName:
          description: The name of the origin organization
          type: string
        receivingOrganizationName:
          description: The name of the receiving organization
          type: string
    getLinkedOrganizations_200_response:
      example:
        organizationsToShareWith:
        - receivingOrganizationName: receivingOrganizationName
          originOrganizationName: originOrganizationName
          sharedOrganizationId: 0
        - receivingOrganizationName: receivingOrganizationName
          originOrganizationName: originOrganizationName
          sharedOrganizationId: 0
        organizationsThatHaveSharedWithMe:
        - receivingOrganizationName: receivingOrganizationName
          originOrganizationName: originOrganizationName
          sharedOrganizationId: 0
        - receivingOrganizationName: receivingOrganizationName
          originOrganizationName: originOrganizationName
          sharedOrganizationId: 0
      properties:
        organizationsToShareWith:
          items:
            $ref: "#/components/schemas/getLinkedOrganizations_200_response_organizationsToShareWith_inner"
          type: array
        organizationsThatHaveSharedWithMe:
          items:
            $ref: "#/components/schemas/getLinkedOrganizations_200_response_organizationsToShareWith_inner"
          type: array
    getOrganizationNotificationSettings_200_response:
      example:
        notificationDefaultEmailScanUserType: current
        notificationDefaultSlackScan: true
        notificationDefaultEmailScanUsers:
        - 0.8008281904610115
        - 0.8008281904610115
        notificationDefaultEnabled: true
      properties:
        notificationDefaultEnabled:
          description: the on/off status of project notifications
          type: boolean
        notificationDefaultSlackScan:
          description: the on/off status of slack notifications for scans
          type: boolean
        notificationDefaultEmailScanUsers:
          items:
            description: the list of user ids to email for scan notifications
            type: number
          type: array
        notificationDefaultEmailScanUserType:
          description: |
            The type of users to email for scan notifications. Each option represents a different set of users:
            - current: Only the current user will receive scan notifications.
            - all: All users will receive scan notifications.
            - custom: Custom set of users will receive scan notifications.
          enum:
          - current
          - all
          - custom
          type: string
    getOrganizationUpdateHookSettings_200_response:
      example:
        updateHookDefaultScheduledIntervalTime: updateHookDefaultScheduledIntervalTime
        updateHookDefaultScheduledIntervalLength: 0
        updateHookDefaultScheduledInterval: hour
        updateHookDefaultScheduledEnabled: true
      properties:
        updateHookDefaultScheduledEnabled:
          description: the on/off status of if the update hook is enabled
          type: boolean
        updateHookDefaultScheduledInterval:
          description: the cadence of the updates
          enum:
          - hour
          - day
          - week
          type: string
          nullable: true
        updateHookDefaultScheduledIntervalLength:
          description: the cadence of the scheduled updates
          type: integer
          nullable: true
        updateHookDefaultScheduledIntervalTime:
          description: date/time for the schedule update hook intervals
          type: string
          nullable: true
    getOrganizationAuthenticationSettings_200_response_saml:
      example:
        audienceUrl: audienceUrl
        createdAt: 2000-01-23T04:56:07.000+00:00
        audience: audience
        loginUrl: loginUrl
        callbackUrl: callbackUrl
        cert: cert
        id: 0.8008281904610115
        entryPoint: entryPoint
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        callbackUrl:
          type: string
        loginUrl:
          type: string
        audienceUrl:
          type: string
        id:
          type: number
        entryPoint:
          type: string
        cert:
          type: string
        audience:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
    getOrganizationAuthenticationSettings_200_response_ldap:
      example:
        server: server
        groupDNAttr: groupDNAttr
        userNameAttr: userNameAttr
        groupFilter: groupFilter
        groupBase: groupBase
        searchBase: searchBase
        uidAttr: uidAttr
        userEmailAttr: userEmailAttr
        ssl: true
        passwordIsSet: true
        enabled: true
        organizationId: 1.4658129805029452
        createdAt: 2000-01-23T04:56:07.000+00:00
        port: 5.962133916683182
        allowEmptyEmail: true
        id: 6.027456183070403
        useGroups: true
        username: username
        searchFilter: searchFilter
        groupNameAttr: groupNameAttr
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        passwordIsSet:
          type: boolean
        id:
          type: number
        organizationId:
          type: number
        enabled:
          type: boolean
        server:
          type: string
        port:
          type: number
        ssl:
          type: boolean
        username:
          type: string
        searchBase:
          type: string
        searchFilter:
          type: string
        useGroups:
          type: boolean
        groupBase:
          type: string
        groupFilter:
          type: string
        groupNameAttr:
          type: string
        groupDNAttr:
          type: string
        userEmailAttr:
          type: string
        userNameAttr:
          type: string
        uidAttr:
          type: string
        allowEmptyEmail:
          type: boolean
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
    getOrganizationAuthenticationSettings_200_response_sso:
      example:
        ldap: true
        saml: true
        google: true
      properties:
        ldap:
          type: boolean
        saml:
          type: boolean
        google:
          type: boolean
    getOrganizationAuthenticationSettings_200_response:
      example:
        ldap:
          server: server
          groupDNAttr: groupDNAttr
          userNameAttr: userNameAttr
          groupFilter: groupFilter
          groupBase: groupBase
          searchBase: searchBase
          uidAttr: uidAttr
          userEmailAttr: userEmailAttr
          ssl: true
          passwordIsSet: true
          enabled: true
          organizationId: 1.4658129805029452
          createdAt: 2000-01-23T04:56:07.000+00:00
          port: 5.962133916683182
          allowEmptyEmail: true
          id: 6.027456183070403
          useGroups: true
          username: username
          searchFilter: searchFilter
          groupNameAttr: groupNameAttr
          updatedAt: 2000-01-23T04:56:07.000+00:00
        disableInvite: true
        saml:
          audienceUrl: audienceUrl
          createdAt: 2000-01-23T04:56:07.000+00:00
          audience: audience
          loginUrl: loginUrl
          callbackUrl: callbackUrl
          cert: cert
          id: 0.8008281904610115
          entryPoint: entryPoint
          updatedAt: 2000-01-23T04:56:07.000+00:00
        subdomain: subdomain
        loginSubdomain: loginSubdomain
        sso:
          ldap: true
          saml: true
          google: true
      properties:
        subdomain:
          type: string
        loginSubdomain:
          type: string
        disableInvite:
          type: boolean
        saml:
          $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response_saml"
        ldap:
          $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response_ldap"
        sso:
          $ref: "#/components/schemas/getOrganizationAuthenticationSettings_200_response_sso"
    updateOrganizationAuthenticationSettings_request:
      properties:
        subdomain:
          type: string
        disableInvite:
          type: boolean
    getOrganizationCocoapodsSettings_200_response_inner:
      example:
        organizationId: 6.027456183070403
        id: 0.8008281904610115
        url: url
      properties:
        id:
          description: ID of the Cocoapods source in the FOSSA DB
          type: number
        organizationId:
          description: Organization ID that owns this source
          type: number
        url:
          description: URL of the Cocoapods spec repo
          type: string
    getOrganizationBowerSettings_200_response_registries_inner_url:
      example:
        __type: s
        value: value
      properties:
        __type:
          enum:
          - s
          type: string
        value:
          type: string
    getOrganizationBowerSettings_200_response_registries_inner:
      example:
        hasUrl: true
        _id: 0.8008281904610115
        url:
          __type: s
          value: value
      properties:
        _id:
          description: UUID of the config (For FOSSA internal usage)
          type: number
        url:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasUrl:
          description: Used when an existing URL is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationBowerSettings_200_response:
      example:
        useArtifactory: true
        registries:
        - hasUrl: true
          _id: 0.8008281904610115
          url:
            __type: s
            value: value
        - hasUrl: true
          _id: 0.8008281904610115
          url:
            __type: s
            value: value
      nullable: true
      properties:
        registries:
          description: List of configured Bower registries
          items:
            $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner"
          type: array
        useArtifactory:
          description: Does this registry use Artifactory?
          type: boolean
    putOrganizationBowerSettings_request:
      properties:
        registries:
          description: List of configured Bower registries
          items:
            $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner"
          type: array
        useArtifactory:
          description: Does this registry use Artifactory?
          type: boolean
    getOrganizationRubyGemsSettings_200_response_sources_inner:
      example:
        password:
          __type: s
          value: value
        _id: 0.8008281904610115
        hasPassword: true
        url: url
        username: username
      properties:
        _id:
          description: UUID of the gem server (For FOSSA internal usage)
          type: number
        url:
          description: URL of the external gem server
          type: string
        username:
          description: Username for authenticating to the gem server
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationRubyGemsSettings_200_response:
      example:
        sources:
        - password:
            __type: s
            value: value
          _id: 0.8008281904610115
          hasPassword: true
          url: url
          username: username
        - password:
            __type: s
            value: value
          _id: 0.8008281904610115
          hasPassword: true
          url: url
          username: username
      nullable: true
      properties:
        sources:
          description: List of configured Rubygem servers
          items:
            $ref: "#/components/schemas/getOrganizationRubyGemsSettings_200_response_sources_inner"
          type: array
    putOrganizationRubyGemsSettings_request:
      properties:
        sources:
          description: List of configured Rubygem servers
          items:
            $ref: "#/components/schemas/getOrganizationRubyGemsSettings_200_response_sources_inner"
          type: array
    getOrganizationMavenSettings_200_response_repositories_inner:
      example:
        _id: 0.8008281904610115
        id: id
        url: url
      properties:
        _id:
          description: UUID of the Maven repo (For FOSSA internal usage)
          type: number
        id:
          description: User configured ID (corresponds with a Maven Server if credentials
            are necessary)
          type: string
        url:
          description: URL of the Maven Repository
          type: string
    getOrganizationMavenSettings_200_response_servers_inner:
      example:
        password:
          __type: s
          value: value
        _id: 6.027456183070403
        id: id
        hasPassword: true
        username: username
      properties:
        _id:
          description: UUID of the Maven Server (For FOSSA internal usage)
          type: number
        id:
          description: User configured ID (corresponds with a Maven Repository)
          type: string
        username:
          description: Username for authenticating to the Maven repository
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationMavenSettings_200_response:
      example:
        servers:
        - password:
            __type: s
            value: value
          _id: 6.027456183070403
          id: id
          hasPassword: true
          username: username
        - password:
            __type: s
            value: value
          _id: 6.027456183070403
          id: id
          hasPassword: true
          username: username
        repositories:
        - _id: 0.8008281904610115
          id: id
          url: url
        - _id: 0.8008281904610115
          id: id
          url: url
      nullable: true
      properties:
        repositories:
          description: List of configured Maven Repositories
          items:
            $ref: "#/components/schemas/getOrganizationMavenSettings_200_response_repositories_inner"
          type: array
        servers:
          description: List of configured Credentials for Maven Repositories
          items:
            $ref: "#/components/schemas/getOrganizationMavenSettings_200_response_servers_inner"
          type: array
    putOrganizationMavenSettings_request:
      properties:
        repositories:
          description: List of configured Maven Repositories
          items:
            $ref: "#/components/schemas/getOrganizationMavenSettings_200_response_repositories_inner"
          type: array
        servers:
          description: List of configured Credentials for Maven Repositories
          items:
            $ref: "#/components/schemas/getOrganizationMavenSettings_200_response_servers_inner"
          type: array
    getOrganizationNugetSettings_200_response_sources_inner:
      example:
        password:
          __type: s
          value: value
        _id: 0.8008281904610115
        hasPassword: true
        url: url
        username: username
      properties:
        _id:
          description: UUID of the Nuget Feed (For FOSSA internal usage)
          type: number
        url:
          description: Remote URL of the Nuget Feed
          type: string
        username:
          description: Username for authenticating to the Nuget Feed
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationNugetSettings_200_response:
      example:
        sources:
        - password:
            __type: s
            value: value
          _id: 0.8008281904610115
          hasPassword: true
          url: url
          username: username
        - password:
            __type: s
            value: value
          _id: 0.8008281904610115
          hasPassword: true
          url: url
          username: username
      nullable: true
      properties:
        sources:
          description: List of configured Nuget Feeds
          items:
            $ref: "#/components/schemas/getOrganizationNugetSettings_200_response_sources_inner"
          type: array
    putOrganizationNugetSettings_request:
      properties:
        sources:
          description: List of configured Nuget Feeds
          items:
            $ref: "#/components/schemas/getOrganizationNugetSettings_200_response_sources_inner"
          type: array
    getOrganizationPipSettings_200_response_repositories_inner:
      example:
        password:
          __type: s
          value: value
        _id: 0.8008281904610115
        hasPassword: true
        url: url
        username: username
      properties:
        _id:
          description: UUID of the Pip repository (For FOSSA internal usage)
          type: number
        url:
          description: Remote URL of the Pip repository
          type: string
        username:
          description: Username for authenticating to the Pip repository
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationPipSettings_200_response:
      example:
        repositories:
        - password:
            __type: s
            value: value
          _id: 0.8008281904610115
          hasPassword: true
          url: url
          username: username
        - password:
            __type: s
            value: value
          _id: 0.8008281904610115
          hasPassword: true
          url: url
          username: username
      nullable: true
      properties:
        repositories:
          description: List of configured Pip Repositories
          items:
            $ref: "#/components/schemas/getOrganizationPipSettings_200_response_repositories_inner"
          type: array
    putOrganizationPipSettings_request:
      properties:
        repositories:
          description: List of configured Pip Repositories
          items:
            $ref: "#/components/schemas/getOrganizationPipSettings_200_response_repositories_inner"
          type: array
    getOrganizationGitSettings_200_response_authOptions_inner_oneOf:
      example:
        displayName: displayName
        hasToken: true
        _id: 0.8008281904610115
        type: oauth_key
        value:
          __type: s
          value: value
      properties:
        _id:
          description: UUID of the Git Server (For FOSSA internal usage)
          type: number
        displayName:
          description: Display name of the Git token in FOSSA
          type: string
        type:
          description: FOSSA internal type
          enum:
          - oauth_key
          type: string
        value:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasToken:
          description: Used when an existing token is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationGitSettings_200_response_authOptions_inner_oneOf_1:
      properties:
        _id:
          description: UUID of the Git Server (For FOSSA internal usage)
          type: number
        displayName:
          description: Display name of the Git token in FOSSA
          type: string
        type:
          description: FOSSA internal type
          enum:
          - basic
          type: string
        username:
          description: Username to authenticate to the remote Git server
          type: string
        password:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasPassword:
          description: Used when an existing password is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationGitSettings_200_response_authOptions_inner:
      oneOf:
      - $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner_oneOf"
      - $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner_oneOf_1"
    getOrganizationGitSettings_200_response:
      example:
        authOptions:
        - displayName: displayName
          hasToken: true
          _id: 0.8008281904610115
          type: oauth_key
          value:
            __type: s
            value: value
        - displayName: displayName
          hasToken: true
          _id: 0.8008281904610115
          type: oauth_key
          value:
            __type: s
            value: value
      nullable: true
      properties:
        authOptions:
          description: List of Git configurations
          items:
            $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner"
          type: array
    putOrganizationGitSettings_request:
      properties:
        authOptions:
          description: List of Git configurations
          items:
            $ref: "#/components/schemas/getOrganizationGitSettings_200_response_authOptions_inner"
          type: array
    getOrganizationNPMSettings_200_response_registries_inner:
      example:
        auth: "{}"
        _id: _id
        url: url
        ca:
          __type: s
          value: value
        hasCa: true
      properties:
        _id:
          description: UUID of the NPM registry (For FOSSA internal usage)
          type: string
        url:
          description: Remote URL of the NPM registry
          type: string
        auth:
          type: object
          email:
            type: string
            description: Email associated to the NPM registry
          username:
            type: string
            description: Username associated to the NPM registry
          password:
            type: object
            properties:
              __type:
                type: string
                enum:
                - s
              value:
                type: string
          hasPassword:
            type: boolean
            readOnly: true
            description: Used when an existing password is obfuscated in the response
          token:
            type: string
            description: Token associated to the NPM registry
          hasToken:
            type: boolean
            readOnly: true
            description: Used when an existing token is obfuscated in the response
          alwaysAuth:
            type: boolean
            readOnly: true
            description: True when at least one auth value is set. Internal field
              used in NPM API
        ca:
          $ref: "#/components/schemas/getOrganizationBowerSettings_200_response_registries_inner_url"
        hasCa:
          description: Used when an existing CA is obfuscated in the response
          readOnly: true
          type: boolean
    getOrganizationNPMSettings_200_response:
      example:
        registries:
        - auth: "{}"
          _id: _id
          url: url
          ca:
            __type: s
            value: value
          hasCa: true
        - auth: "{}"
          _id: _id
          url: url
          ca:
            __type: s
            value: value
          hasCa: true
      nullable: true
      properties:
        registries:
          description: List of NPM configurations
          items:
            $ref: "#/components/schemas/getOrganizationNPMSettings_200_response_registries_inner"
          type: array
    putOrganizationNPMSettings_request:
      properties:
        registries:
          description: List of NPM configurations
          items:
            $ref: "#/components/schemas/getOrganizationNPMSettings_200_response_registries_inner"
          type: array
    getOrganizationCustomLicenseScanSettings_200_response_inner:
      allOf:
      - properties:
          name:
            description: custom license scan name
            type: string
          matchCriteria:
            description: regular expression for the custom license scan
            type: string
      - properties:
          id:
            description: Unique identifier for the custom license scan
            type: integer
      example:
        matchCriteria: matchCriteria
        name: name
        id: 0
    getOrganizationSlackSettings_200_response_inner:
      example:
        webhook_url: webhook_url
        channel: channel
      properties:
        channel:
          description: The Slack channel to send updates to
          type: string
        webhook_url:
          description: The configured webhook url in your Slack Application
          type: string
    deleteJiraConfiguration_200_response:
      example:
        deleted: true
        id: 0
      properties:
        id:
          description: ID of the Jira site that was requested to be deleted
          type: integer
        deleted:
          description: whether the Jira sire was successfully deleted or not
          type: boolean
    patchJiraConfiguration_request_credentials_basic:
      example:
        password: password
        username: username
      properties:
        username:
          description: Jira username to authenticate to the site
          type: string
        password:
          description: Jira password to authenticate to the site (obfuscated when
            retrieved)
          type: string
    patchJiraConfiguration_request_credentials:
      example:
        basic:
          password: password
          username: username
      properties:
        basic:
          $ref: "#/components/schemas/patchJiraConfiguration_request_credentials_basic"
    patchJiraConfiguration_request_customFields_value:
      example:
        isRequired: isRequired
        displayName: displayName
        defaultValue: defaultValue
        fieldId: fieldId
      properties:
        fieldId:
          description: The corresponding Field ID in the Jira site for the given field
          type: string
        displayName:
          description: Display name to use in FOSSA
          type: string
        isRequired:
          description: On/off switch to tell FOSSA if the field is required when exporting
            tickets
          type: string
        defaultValue:
          description: "When provided, is the default value used when exporting a\
            \ ticket"
          type: string
    patchJiraConfiguration_request:
      example:
        headers:
          key: headers
        defaultUniqueTickets: true
        credentials:
          basic:
            password: password
            username: username
        customFields:
          key:
            isRequired: isRequired
            displayName: displayName
            defaultValue: defaultValue
            fieldId: fieldId
        defaultSecurityProject: defaultSecurityProject
        base_url: base_url
        webhookURL: webhookURL
        enabled: true
        issueTypes:
        - issueTypes
        - issueTypes
        labels:
        - labels
        - labels
        organizationId: 6
        createdAt: createdAt
        jiraProjectIds:
        - jiraProjectIds
        - jiraProjectIds
        name: name
        resolved_statuses:
        - resolved_statuses
        - resolved_statuses
        resolvedStatusesEnabled: true
        defaultLicensingProject: defaultLicensingProject
        id: 0
      properties:
        id:
          readOnly: true
          type: integer
        organizationId:
          readOnly: true
          type: integer
        webhookURL:
          description: Used by the Jira to FOSSA Webhook
          readOnly: true
          type: string
        createdAt:
          description: Timestamp when Jira was created
          readOnly: true
          type: string
        enabled:
          description: On/Off state of the Jira site enabled in FOSSA
          type: boolean
        name:
          description: Display name of your Jira site inside of FOSSA
          type: string
        base_url:
          description: Url of your Jira Site
          nullable: true
          type: string
          nullable: true
        resolved_statuses:
          items:
            description: An optional list of custom statuses to indicate a "closed"
              ticket. This is only used when resolvedStatusesEnabled is set to true
            type: string
          type: array
        resolvedStatusesEnabled:
          description: "When true, incoming webhooks will ignore/unignore issues linked\
            \ to the specific tickets in question if the status matches one of the\
            \ statuses listed in resolved_statuses."
          type: boolean
        credentials:
          $ref: "#/components/schemas/patchJiraConfiguration_request_credentials"
        headers:
          additionalProperties:
            type: string
          description: HTTP headers to pass along when authenticating to the Jira
            site
        issueTypes:
          description: Available issue types to use when exporting tickets
          items:
            type: string
          nullable: true
          type: array
        labels:
          description: Available labels to include when exporting tickets. Corresponds
            to a label in Jira
          items:
            type: string
          nullable: true
          type: array
        jiraProjectIds:
          description: Available Jira Projects to export to from FOSSA
          items:
            type: string
          nullable: true
          type: array
        customFields:
          additionalProperties:
            $ref: "#/components/schemas/patchJiraConfiguration_request_customFields_value"
          description: a dictionary of custom fields
        defaultLicensingProject:
          description: The Jira Project to default to when exporting licensing issues
          nullable: true
          type: string
        defaultSecurityProject:
          description: The Jira Project to default to when exporting security issues
          nullable: true
          type: string
        defaultUniqueTickets:
          description: toggle to determine if each individual issue is 1:1 with a
            ticket upon creation
          type: boolean
    getAuditLogs_200_response_inner:
      example:
        dependencyId: dependencyId
        issueId: 2
        description: description
        buildId: 2
        actingUserName: actingUserName
        userId: 5
        revisionLicenseId: 3
        organizationId: 1
        createdAt: createdAt
        actingUserEmail: actingUserEmail
        policyId: 7
        teamId: 5
        name: name
        action: action
        topic: topic
        actingUserId: 6
        old_value: old_value
        id: 0
        licenseId: licenseId
        ruleId: 9
        projectId: projectId
        locator: locator
        actingUserRole: actingUserRole
        new_value: new_value
      properties:
        id:
          description: The unique identifier for the audit log.
          type: integer
        actingUserId:
          description: The unique identifier for the user who performed the action.
          nullable: true
          type: integer
        actingUserEmail:
          description: The email address of the user who performed the action.
          nullable: true
          type: string
        actingUserName:
          description: The name of the user who performed the action.
          nullable: true
          type: string
        actingUserRole:
          description: The role of the user who performed the action.
          nullable: true
          type: string
        organizationId:
          description: The unique identifier for the organization.
          nullable: true
          type: integer
        userId:
          description: The unique identifier for the user.
          nullable: true
          type: integer
        teamId:
          description: The unique identifier for the team.
          nullable: true
          type: integer
        buildId:
          description: The unique identifier for the build.
          nullable: true
          type: integer
        dependencyId:
          description: The unique identifier for the dependency.
          nullable: true
          type: string
        licenseId:
          description: The unique identifier for the license.
          nullable: true
          type: string
        policyId:
          description: The unique identifier for the policy.
          nullable: true
          type: integer
        projectId:
          description: The unique identifier for the project.
          nullable: true
          type: string
        ruleId:
          description: The unique identifier for the rule.
          nullable: true
          type: integer
        locator:
          description: The locator for the dependency.
          nullable: true
          type: string
        revisionLicenseId:
          description: The unique identifier for the revision license.
          nullable: true
          type: integer
        issueId:
          description: The unique identifier for the issue.
          nullable: true
          type: integer
        action:
          description: The action that was performed.
          type: string
        topic:
          description: The topic of the action.
          type: string
        name:
          description: The name of the action.
          nullable: true
          type: string
        old_value:
          description: The old value before the change.
          nullable: true
          type: string
        new_value:
          description: The new value after the change.
          nullable: true
          type: string
        description:
          description: The description of the action.
          nullable: true
          type: string
        createdAt:
          description: The date and time the action was performed.
          type: string
    getAuditLogsExport_request:
      properties:
        startDate:
          description: Filter audit logs to those created on or after this date (YYYY-MM-DD
            format)
          format: date
          type: string
        endDate:
          description: Filter audit logs to those created on or before this date (YYYY-MM-DD
            format)
          format: date
          type: string
        actingUserIds:
          description: Filter audit logs to those created by the given user IDs
          items:
            type: string
          type: array
        actions:
          description: Filter audit logs to those with the given actions
          items:
            type: string
          type: array
        topics:
          description: Filter audit logs to those with the given topics
          items:
            type: string
          type: array
        topicActions:
          description: Filter audit logs to those with the given topic and action
          items:
            type: string
          type: array
      required:
      - endDate
      - startDate
    getAuditLogsExport_201_response_task:
      example:
        jobToken: jobToken
        task: task
      properties:
        task:
          description: Identifier for the task
          type: string
        jobToken:
          description: Token used to track the export job
          type: string
    getAuditLogsExport_201_response:
      example:
        task:
          jobToken: jobToken
          task: task
        target: target
      properties:
        task:
          $ref: "#/components/schemas/getAuditLogsExport_201_response_task"
        target:
          description: Email address where the export link will be sent
          type: string
    getSignedUrl_200_response:
      example:
        signedUrl: signedUrl
      properties:
        signedUrl:
          type: string
    build_request_archives:
      description: File upload metadata
      properties:
        packageSpec:
          description: |
            The unresolved spec (i.e. a URL) that can be passed to a fetcher and resolved to a package id. For example:
            underscore (npm)
            https://github.com/fossas/fossa (git)
            nokogiri (gem)
          type: string
        revision:
          description: The branch or revision of the component being uploaded.
          type: string
        description:
          description: The description of the archive.
          type: string
        projectURL:
          description: The homepage of the archive.
          type: string
    build_request_selectedTeams_inner_oneOf:
      description: A team ID
      properties:
        id:
          type: integer
    build_request_selectedTeams_inner_oneOf_1:
      description: A team name
      properties:
        name:
          type: string
    build_request_selectedTeams_inner:
      oneOf:
      - $ref: "#/components/schemas/build_request_selectedTeams_inner_oneOf"
      - $ref: "#/components/schemas/build_request_selectedTeams_inner_oneOf_1"
    build_request:
      properties:
        archives:
          $ref: "#/components/schemas/build_request_archives"
        selectedTeams:
          items:
            $ref: "#/components/schemas/build_request_selectedTeams_inner"
          type: array
        forceRebuild:
          description: Force a rebuild no matter what
          type: boolean
  securitySchemes:
    ApiToken:
      description: "Enter the api token with the `Bearer: ` prefix, e.g. \"Bearer\
        \ 123456\""
      scheme: bearer
      type: http
x-readme:
  samples-languages:
  - curl
  - powershell
  - python
