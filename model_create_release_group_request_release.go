/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the CreateReleaseGroupRequestRelease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateReleaseGroupRequestRelease{}

// CreateReleaseGroupRequestRelease struct for CreateReleaseGroupRequestRelease
type CreateReleaseGroupRequestRelease struct {
	Title *string `json:"title,omitempty"`
	Projects []CreateReleaseGroupRequestReleaseProjectsInner `json:"projects,omitempty"`
}

// NewCreateReleaseGroupRequestRelease instantiates a new CreateReleaseGroupRequestRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReleaseGroupRequestRelease() *CreateReleaseGroupRequestRelease {
	this := CreateReleaseGroupRequestRelease{}
	return &this
}

// NewCreateReleaseGroupRequestReleaseWithDefaults instantiates a new CreateReleaseGroupRequestRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReleaseGroupRequestReleaseWithDefaults() *CreateReleaseGroupRequestRelease {
	this := CreateReleaseGroupRequestRelease{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CreateReleaseGroupRequestRelease) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseGroupRequestRelease) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CreateReleaseGroupRequestRelease) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CreateReleaseGroupRequestRelease) SetTitle(v string) {
	o.Title = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *CreateReleaseGroupRequestRelease) GetProjects() []CreateReleaseGroupRequestReleaseProjectsInner {
	if o == nil || IsNil(o.Projects) {
		var ret []CreateReleaseGroupRequestReleaseProjectsInner
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReleaseGroupRequestRelease) GetProjectsOk() ([]CreateReleaseGroupRequestReleaseProjectsInner, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *CreateReleaseGroupRequestRelease) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []CreateReleaseGroupRequestReleaseProjectsInner and assigns it to the Projects field.
func (o *CreateReleaseGroupRequestRelease) SetProjects(v []CreateReleaseGroupRequestReleaseProjectsInner) {
	o.Projects = v
}

func (o CreateReleaseGroupRequestRelease) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReleaseGroupRequestRelease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	return toSerialize, nil
}

type NullableCreateReleaseGroupRequestRelease struct {
	value *CreateReleaseGroupRequestRelease
	isSet bool
}

func (v NullableCreateReleaseGroupRequestRelease) Get() *CreateReleaseGroupRequestRelease {
	return v.value
}

func (v *NullableCreateReleaseGroupRequestRelease) Set(val *CreateReleaseGroupRequestRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReleaseGroupRequestRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReleaseGroupRequestRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReleaseGroupRequestRelease(val *CreateReleaseGroupRequestRelease) *NullableCreateReleaseGroupRequestRelease {
	return &NullableCreateReleaseGroupRequestRelease{value: val, isSet: true}
}

func (v NullableCreateReleaseGroupRequestRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReleaseGroupRequestRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


