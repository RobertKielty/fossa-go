/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetIssue200Response - struct for GetIssue200Response
type GetIssue200Response struct {
	GetIssue200ResponseOneOf *GetIssue200ResponseOneOf
	GetIssue200ResponseOneOf1 *GetIssue200ResponseOneOf1
	GetIssue200ResponseOneOf2 *GetIssue200ResponseOneOf2
}

// GetIssue200ResponseOneOfAsGetIssue200Response is a convenience function that returns GetIssue200ResponseOneOf wrapped in GetIssue200Response
func GetIssue200ResponseOneOfAsGetIssue200Response(v *GetIssue200ResponseOneOf) GetIssue200Response {
	return GetIssue200Response{
		GetIssue200ResponseOneOf: v,
	}
}

// GetIssue200ResponseOneOf1AsGetIssue200Response is a convenience function that returns GetIssue200ResponseOneOf1 wrapped in GetIssue200Response
func GetIssue200ResponseOneOf1AsGetIssue200Response(v *GetIssue200ResponseOneOf1) GetIssue200Response {
	return GetIssue200Response{
		GetIssue200ResponseOneOf1: v,
	}
}

// GetIssue200ResponseOneOf2AsGetIssue200Response is a convenience function that returns GetIssue200ResponseOneOf2 wrapped in GetIssue200Response
func GetIssue200ResponseOneOf2AsGetIssue200Response(v *GetIssue200ResponseOneOf2) GetIssue200Response {
	return GetIssue200Response{
		GetIssue200ResponseOneOf2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIssue200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetIssue200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.GetIssue200ResponseOneOf)
	if err == nil {
		jsonGetIssue200ResponseOneOf, _ := json.Marshal(dst.GetIssue200ResponseOneOf)
		if string(jsonGetIssue200ResponseOneOf) == "{}" { // empty struct
			dst.GetIssue200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.GetIssue200ResponseOneOf); err != nil {
				dst.GetIssue200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetIssue200ResponseOneOf = nil
	}

	// try to unmarshal data into GetIssue200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.GetIssue200ResponseOneOf1)
	if err == nil {
		jsonGetIssue200ResponseOneOf1, _ := json.Marshal(dst.GetIssue200ResponseOneOf1)
		if string(jsonGetIssue200ResponseOneOf1) == "{}" { // empty struct
			dst.GetIssue200ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.GetIssue200ResponseOneOf1); err != nil {
				dst.GetIssue200ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetIssue200ResponseOneOf1 = nil
	}

	// try to unmarshal data into GetIssue200ResponseOneOf2
	err = newStrictDecoder(data).Decode(&dst.GetIssue200ResponseOneOf2)
	if err == nil {
		jsonGetIssue200ResponseOneOf2, _ := json.Marshal(dst.GetIssue200ResponseOneOf2)
		if string(jsonGetIssue200ResponseOneOf2) == "{}" { // empty struct
			dst.GetIssue200ResponseOneOf2 = nil
		} else {
			if err = validator.Validate(dst.GetIssue200ResponseOneOf2); err != nil {
				dst.GetIssue200ResponseOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetIssue200ResponseOneOf2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetIssue200ResponseOneOf = nil
		dst.GetIssue200ResponseOneOf1 = nil
		dst.GetIssue200ResponseOneOf2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIssue200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIssue200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIssue200Response) MarshalJSON() ([]byte, error) {
	if src.GetIssue200ResponseOneOf != nil {
		return json.Marshal(&src.GetIssue200ResponseOneOf)
	}

	if src.GetIssue200ResponseOneOf1 != nil {
		return json.Marshal(&src.GetIssue200ResponseOneOf1)
	}

	if src.GetIssue200ResponseOneOf2 != nil {
		return json.Marshal(&src.GetIssue200ResponseOneOf2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIssue200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetIssue200ResponseOneOf != nil {
		return obj.GetIssue200ResponseOneOf
	}

	if obj.GetIssue200ResponseOneOf1 != nil {
		return obj.GetIssue200ResponseOneOf1
	}

	if obj.GetIssue200ResponseOneOf2 != nil {
		return obj.GetIssue200ResponseOneOf2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetIssue200Response) GetActualInstanceValue() (interface{}) {
	if obj.GetIssue200ResponseOneOf != nil {
		return *obj.GetIssue200ResponseOneOf
	}

	if obj.GetIssue200ResponseOneOf1 != nil {
		return *obj.GetIssue200ResponseOneOf1
	}

	if obj.GetIssue200ResponseOneOf2 != nil {
		return *obj.GetIssue200ResponseOneOf2
	}

	// all schemas are nil
	return nil
}

type NullableGetIssue200Response struct {
	value *GetIssue200Response
	isSet bool
}

func (v NullableGetIssue200Response) Get() *GetIssue200Response {
	return v.value
}

func (v *NullableGetIssue200Response) Set(val *GetIssue200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssue200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssue200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssue200Response(val *GetIssue200Response) *NullableGetIssue200Response {
	return &NullableGetIssue200Response{value: val, isSet: true}
}

func (v NullableGetIssue200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssue200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


