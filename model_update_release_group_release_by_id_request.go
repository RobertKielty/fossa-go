/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateReleaseGroupReleaseByIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateReleaseGroupReleaseByIdRequest{}

// UpdateReleaseGroupReleaseByIdRequest struct for UpdateReleaseGroupReleaseByIdRequest
type UpdateReleaseGroupReleaseByIdRequest struct {
	Title string `json:"title"`
	Projects []UpdateReleaseGroupReleaseByIdRequestProjectsInner `json:"projects,omitempty"`
	ProjectsToDelete []string `json:"projectsToDelete,omitempty"`
}

type _UpdateReleaseGroupReleaseByIdRequest UpdateReleaseGroupReleaseByIdRequest

// NewUpdateReleaseGroupReleaseByIdRequest instantiates a new UpdateReleaseGroupReleaseByIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateReleaseGroupReleaseByIdRequest(title string) *UpdateReleaseGroupReleaseByIdRequest {
	this := UpdateReleaseGroupReleaseByIdRequest{}
	this.Title = title
	return &this
}

// NewUpdateReleaseGroupReleaseByIdRequestWithDefaults instantiates a new UpdateReleaseGroupReleaseByIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateReleaseGroupReleaseByIdRequestWithDefaults() *UpdateReleaseGroupReleaseByIdRequest {
	this := UpdateReleaseGroupReleaseByIdRequest{}
	return &this
}

// GetTitle returns the Title field value
func (o *UpdateReleaseGroupReleaseByIdRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *UpdateReleaseGroupReleaseByIdRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *UpdateReleaseGroupReleaseByIdRequest) SetTitle(v string) {
	o.Title = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *UpdateReleaseGroupReleaseByIdRequest) GetProjects() []UpdateReleaseGroupReleaseByIdRequestProjectsInner {
	if o == nil || IsNil(o.Projects) {
		var ret []UpdateReleaseGroupReleaseByIdRequestProjectsInner
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateReleaseGroupReleaseByIdRequest) GetProjectsOk() ([]UpdateReleaseGroupReleaseByIdRequestProjectsInner, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *UpdateReleaseGroupReleaseByIdRequest) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []UpdateReleaseGroupReleaseByIdRequestProjectsInner and assigns it to the Projects field.
func (o *UpdateReleaseGroupReleaseByIdRequest) SetProjects(v []UpdateReleaseGroupReleaseByIdRequestProjectsInner) {
	o.Projects = v
}

// GetProjectsToDelete returns the ProjectsToDelete field value if set, zero value otherwise.
func (o *UpdateReleaseGroupReleaseByIdRequest) GetProjectsToDelete() []string {
	if o == nil || IsNil(o.ProjectsToDelete) {
		var ret []string
		return ret
	}
	return o.ProjectsToDelete
}

// GetProjectsToDeleteOk returns a tuple with the ProjectsToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateReleaseGroupReleaseByIdRequest) GetProjectsToDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectsToDelete) {
		return nil, false
	}
	return o.ProjectsToDelete, true
}

// HasProjectsToDelete returns a boolean if a field has been set.
func (o *UpdateReleaseGroupReleaseByIdRequest) HasProjectsToDelete() bool {
	if o != nil && !IsNil(o.ProjectsToDelete) {
		return true
	}

	return false
}

// SetProjectsToDelete gets a reference to the given []string and assigns it to the ProjectsToDelete field.
func (o *UpdateReleaseGroupReleaseByIdRequest) SetProjectsToDelete(v []string) {
	o.ProjectsToDelete = v
}

func (o UpdateReleaseGroupReleaseByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateReleaseGroupReleaseByIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.ProjectsToDelete) {
		toSerialize["projectsToDelete"] = o.ProjectsToDelete
	}
	return toSerialize, nil
}

func (o *UpdateReleaseGroupReleaseByIdRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateReleaseGroupReleaseByIdRequest := _UpdateReleaseGroupReleaseByIdRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateReleaseGroupReleaseByIdRequest)

	if err != nil {
		return err
	}

	*o = UpdateReleaseGroupReleaseByIdRequest(varUpdateReleaseGroupReleaseByIdRequest)

	return err
}

type NullableUpdateReleaseGroupReleaseByIdRequest struct {
	value *UpdateReleaseGroupReleaseByIdRequest
	isSet bool
}

func (v NullableUpdateReleaseGroupReleaseByIdRequest) Get() *UpdateReleaseGroupReleaseByIdRequest {
	return v.value
}

func (v *NullableUpdateReleaseGroupReleaseByIdRequest) Set(val *UpdateReleaseGroupReleaseByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateReleaseGroupReleaseByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateReleaseGroupReleaseByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateReleaseGroupReleaseByIdRequest(val *UpdateReleaseGroupReleaseByIdRequest) *NullableUpdateReleaseGroupReleaseByIdRequest {
	return &NullableUpdateReleaseGroupReleaseByIdRequest{value: val, isSet: true}
}

func (v NullableUpdateReleaseGroupReleaseByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateReleaseGroupReleaseByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


