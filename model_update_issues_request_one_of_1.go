/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the UpdateIssuesRequestOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIssuesRequestOneOf1{}

// UpdateIssuesRequestOneOf1 struct for UpdateIssuesRequestOneOf1
type UpdateIssuesRequestOneOf1 struct {
	Type *string `json:"type,omitempty"`
	Ticket *UpdateIssuesRequestOneOf1Ticket `json:"ticket,omitempty"`
}

// NewUpdateIssuesRequestOneOf1 instantiates a new UpdateIssuesRequestOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIssuesRequestOneOf1() *UpdateIssuesRequestOneOf1 {
	this := UpdateIssuesRequestOneOf1{}
	return &this
}

// NewUpdateIssuesRequestOneOf1WithDefaults instantiates a new UpdateIssuesRequestOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIssuesRequestOneOf1WithDefaults() *UpdateIssuesRequestOneOf1 {
	this := UpdateIssuesRequestOneOf1{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateIssuesRequestOneOf1) SetType(v string) {
	o.Type = &v
}

// GetTicket returns the Ticket field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf1) GetTicket() UpdateIssuesRequestOneOf1Ticket {
	if o == nil || IsNil(o.Ticket) {
		var ret UpdateIssuesRequestOneOf1Ticket
		return ret
	}
	return *o.Ticket
}

// GetTicketOk returns a tuple with the Ticket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf1) GetTicketOk() (*UpdateIssuesRequestOneOf1Ticket, bool) {
	if o == nil || IsNil(o.Ticket) {
		return nil, false
	}
	return o.Ticket, true
}

// HasTicket returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf1) HasTicket() bool {
	if o != nil && !IsNil(o.Ticket) {
		return true
	}

	return false
}

// SetTicket gets a reference to the given UpdateIssuesRequestOneOf1Ticket and assigns it to the Ticket field.
func (o *UpdateIssuesRequestOneOf1) SetTicket(v UpdateIssuesRequestOneOf1Ticket) {
	o.Ticket = &v
}

func (o UpdateIssuesRequestOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIssuesRequestOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Ticket) {
		toSerialize["ticket"] = o.Ticket
	}
	return toSerialize, nil
}

type NullableUpdateIssuesRequestOneOf1 struct {
	value *UpdateIssuesRequestOneOf1
	isSet bool
}

func (v NullableUpdateIssuesRequestOneOf1) Get() *UpdateIssuesRequestOneOf1 {
	return v.value
}

func (v *NullableUpdateIssuesRequestOneOf1) Set(val *UpdateIssuesRequestOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIssuesRequestOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIssuesRequestOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIssuesRequestOneOf1(val *UpdateIssuesRequestOneOf1) *NullableUpdateIssuesRequestOneOf1 {
	return &NullableUpdateIssuesRequestOneOf1{value: val, isSet: true}
}

func (v NullableUpdateIssuesRequestOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIssuesRequestOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


