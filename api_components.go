/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ComponentsAPIService ComponentsAPI service
type ComponentsAPIService service

type ApiBuildRequest struct {
	ctx context.Context
	ApiService *ComponentsAPIService
	packageSpec *string
	revision *string
	dependency *bool
	description *string
	fileType *string
	branch *string
	jiraProjectKey *string
	link *string
	projectURL *string
	policy *string
	policyId *float32
	team *string
	title *string
	releaseGroup *string
	releaseGroupRelease *string
	labels *[]string
	buildRequest *BuildRequest
}

// The unresolved spec (i.e. a URL) that can be passed to a fetcher and resolved to a package id. For example:, underscore (npm), https://github.com/fossas/fossa (git), nokogiri (gem), 
func (r ApiBuildRequest) PackageSpec(packageSpec string) ApiBuildRequest {
	r.packageSpec = &packageSpec
	return r
}

// The branch or revision of the component project being built.
func (r ApiBuildRequest) Revision(revision string) ApiBuildRequest {
	r.revision = &revision
	return r
}

// 
func (r ApiBuildRequest) Dependency(dependency bool) ApiBuildRequest {
	r.dependency = &dependency
	return r
}

// The project description for the archive
func (r ApiBuildRequest) Description(description string) ApiBuildRequest {
	r.description = &description
	return r
}

// The kind of component file to be built., If &#39;archive&#39;, the signed URL is for uplaoding a directory of source code., If &#39;sbom&#39;, the signed URL is for uploading an SBOM file (CycloneDX or SPDX)., 
func (r ApiBuildRequest) FileType(fileType string) ApiBuildRequest {
	r.fileType = &fileType
	return r
}

func (r ApiBuildRequest) Branch(branch string) ApiBuildRequest {
	r.branch = &branch
	return r
}

// The corresponding Jira project for this component
func (r ApiBuildRequest) JiraProjectKey(jiraProjectKey string) ApiBuildRequest {
	r.jiraProjectKey = &jiraProjectKey
	return r
}

// A link to attach to this revision
func (r ApiBuildRequest) Link(link string) ApiBuildRequest {
	r.link = &link
	return r
}

// The URL of the project being uploaded
func (r ApiBuildRequest) ProjectURL(projectURL string) ApiBuildRequest {
	r.projectURL = &projectURL
	return r
}

// The name of the policy for this build.
func (r ApiBuildRequest) Policy(policy string) ApiBuildRequest {
	r.policy = &policy
	return r
}

// The ID of the policy for this build.
func (r ApiBuildRequest) PolicyId(policyId float32) ApiBuildRequest {
	r.policyId = &policyId
	return r
}

// The name of the team connected to the project.
func (r ApiBuildRequest) Team(team string) ApiBuildRequest {
	r.team = &team
	return r
}

// The title of the component.
func (r ApiBuildRequest) Title(title string) ApiBuildRequest {
	r.title = &title
	return r
}

// The title of release group to add the project to.
func (r ApiBuildRequest) ReleaseGroup(releaseGroup string) ApiBuildRequest {
	r.releaseGroup = &releaseGroup
	return r
}

// The title of release to add the project to.
func (r ApiBuildRequest) ReleaseGroupRelease(releaseGroupRelease string) ApiBuildRequest {
	r.releaseGroupRelease = &releaseGroupRelease
	return r
}

// Set of labels to apply to a project. If the org or the project have too many labels, then the labels will be applied in order until limits are hit. 
func (r ApiBuildRequest) Labels(labels []string) ApiBuildRequest {
	r.labels = &labels
	return r
}

func (r ApiBuildRequest) BuildRequest(buildRequest BuildRequest) ApiBuildRequest {
	r.buildRequest = &buildRequest
	return r
}

func (r ApiBuildRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildExecute(r)
}

/*
Build Method for Build

Upload a component and start asynchronously building it.  Only SBOM imports are supported for non-premium accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBuildRequest
*/
func (a *ComponentsAPIService) Build(ctx context.Context) ApiBuildRequest {
	return ApiBuildRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ComponentsAPIService) BuildExecute(r ApiBuildRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentsAPIService.Build")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/components/build"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.packageSpec == nil {
		return nil, reportError("packageSpec is required and must be specified")
	}
	if r.revision == nil {
		return nil, reportError("revision is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "packageSpec", r.packageSpec, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "revision", r.revision, "form", "")
	if r.dependency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dependency", r.dependency, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.fileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileType", r.fileType, "form", "")
	}
	if r.branch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch", r.branch, "form", "")
	}
	if r.jiraProjectKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jiraProjectKey", r.jiraProjectKey, "form", "")
	}
	if r.link != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "link", r.link, "form", "")
	}
	if r.projectURL != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectURL", r.projectURL, "form", "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "form", "")
	}
	if r.policyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policyId", r.policyId, "form", "")
	}
	if r.team != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "team", r.team, "form", "")
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "form", "")
	}
	if r.releaseGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "releaseGroup", r.releaseGroup, "form", "")
	}
	if r.releaseGroupRelease != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "releaseGroupRelease", r.releaseGroupRelease, "form", "")
	}
	if r.labels != nil {
		t := *r.labels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labels", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labels", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v FossaForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FossaApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSignedUrlRequest struct {
	ctx context.Context
	ApiService *ComponentsAPIService
	packageSpec *string
	revision *string
	fileType *string
}

// the package spec
func (r ApiGetSignedUrlRequest) PackageSpec(packageSpec string) ApiGetSignedUrlRequest {
	r.packageSpec = &packageSpec
	return r
}

// The branch or revision of the component project being built.
func (r ApiGetSignedUrlRequest) Revision(revision string) ApiGetSignedUrlRequest {
	r.revision = &revision
	return r
}

// The kind of file to be uploaded to the signed URL. If &#39;archive&#39;, the signed URL is for uplaoding a directory of source code. If &#39;sbom&#39;, the signed URL is for uploading an SBOM file (CycloneDX or SPDX). 
func (r ApiGetSignedUrlRequest) FileType(fileType string) ApiGetSignedUrlRequest {
	r.fileType = &fileType
	return r
}

func (r ApiGetSignedUrlRequest) Execute() (*GetSignedUrl200Response, *http.Response, error) {
	return r.ApiService.GetSignedUrlExecute(r)
}

/*
GetSignedUrl Method for GetSignedUrl

Get a signed URL for uploading component files to FOSSA, to expire in 5 minutes' time.  Only SBOM imports are supported for non-premium accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSignedUrlRequest
*/
func (a *ComponentsAPIService) GetSignedUrl(ctx context.Context) ApiGetSignedUrlRequest {
	return ApiGetSignedUrlRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetSignedUrl200Response
func (a *ComponentsAPIService) GetSignedUrlExecute(r ApiGetSignedUrlRequest) (*GetSignedUrl200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSignedUrl200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentsAPIService.GetSignedUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/components/signed_url"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.packageSpec == nil {
		return localVarReturnValue, nil, reportError("packageSpec is required and must be specified")
	}
	if r.revision == nil {
		return localVarReturnValue, nil, reportError("revision is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "packageSpec", r.packageSpec, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "revision", r.revision, "form", "")
	if r.fileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fileType", r.fileType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v FossaApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
