/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeleteProjectsLocatorsParameter - struct for DeleteProjectsLocatorsParameter
type DeleteProjectsLocatorsParameter struct {
	ArrayOfString *[]string
	String *string
}

// []stringAsDeleteProjectsLocatorsParameter is a convenience function that returns []string wrapped in DeleteProjectsLocatorsParameter
func ArrayOfStringAsDeleteProjectsLocatorsParameter(v *[]string) DeleteProjectsLocatorsParameter {
	return DeleteProjectsLocatorsParameter{
		ArrayOfString: v,
	}
}

// stringAsDeleteProjectsLocatorsParameter is a convenience function that returns string wrapped in DeleteProjectsLocatorsParameter
func StringAsDeleteProjectsLocatorsParameter(v *string) DeleteProjectsLocatorsParameter {
	return DeleteProjectsLocatorsParameter{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeleteProjectsLocatorsParameter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeleteProjectsLocatorsParameter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeleteProjectsLocatorsParameter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeleteProjectsLocatorsParameter) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeleteProjectsLocatorsParameter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DeleteProjectsLocatorsParameter) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDeleteProjectsLocatorsParameter struct {
	value *DeleteProjectsLocatorsParameter
	isSet bool
}

func (v NullableDeleteProjectsLocatorsParameter) Get() *DeleteProjectsLocatorsParameter {
	return v.value
}

func (v *NullableDeleteProjectsLocatorsParameter) Set(val *DeleteProjectsLocatorsParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteProjectsLocatorsParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteProjectsLocatorsParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteProjectsLocatorsParameter(val *DeleteProjectsLocatorsParameter) *NullableDeleteProjectsLocatorsParameter {
	return &NullableDeleteProjectsLocatorsParameter{value: val, isSet: true}
}

func (v NullableDeleteProjectsLocatorsParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteProjectsLocatorsParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


