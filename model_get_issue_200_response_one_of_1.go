/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"time"
)

// checks if the GetIssue200ResponseOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIssue200ResponseOneOf1{}

// GetIssue200ResponseOneOf1 struct for GetIssue200ResponseOneOf1
type GetIssue200ResponseOneOf1 struct {
	Id *int32 `json:"id,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Source *GetIssue200ResponseOneOfAllOfSource1 `json:"source,omitempty"`
	Depths *GetIssue200ResponseOneOfAllOfDepths `json:"depths,omitempty"`
	ContainerLayers *GetIssue200ResponseOneOfAllOfContainerLayers `json:"containerLayers,omitempty"`
	Statuses *GetIssueStatuses200ResponseIssues `json:"statuses,omitempty"`
	Projects []GetIssue200ResponseOneOfAllOfProjectsInner `json:"projects,omitempty"`
	Type *string `json:"type,omitempty"`
	License *string `json:"license,omitempty"`
}

// NewGetIssue200ResponseOneOf1 instantiates a new GetIssue200ResponseOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIssue200ResponseOneOf1() *GetIssue200ResponseOneOf1 {
	this := GetIssue200ResponseOneOf1{}
	return &this
}

// NewGetIssue200ResponseOneOf1WithDefaults instantiates a new GetIssue200ResponseOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIssue200ResponseOneOf1WithDefaults() *GetIssue200ResponseOneOf1 {
	this := GetIssue200ResponseOneOf1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetIssue200ResponseOneOf1) SetId(v int32) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GetIssue200ResponseOneOf1) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetSource() GetIssue200ResponseOneOfAllOfSource1 {
	if o == nil || IsNil(o.Source) {
		var ret GetIssue200ResponseOneOfAllOfSource1
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetSourceOk() (*GetIssue200ResponseOneOfAllOfSource1, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given GetIssue200ResponseOneOfAllOfSource1 and assigns it to the Source field.
func (o *GetIssue200ResponseOneOf1) SetSource(v GetIssue200ResponseOneOfAllOfSource1) {
	o.Source = &v
}

// GetDepths returns the Depths field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetDepths() GetIssue200ResponseOneOfAllOfDepths {
	if o == nil || IsNil(o.Depths) {
		var ret GetIssue200ResponseOneOfAllOfDepths
		return ret
	}
	return *o.Depths
}

// GetDepthsOk returns a tuple with the Depths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetDepthsOk() (*GetIssue200ResponseOneOfAllOfDepths, bool) {
	if o == nil || IsNil(o.Depths) {
		return nil, false
	}
	return o.Depths, true
}

// HasDepths returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasDepths() bool {
	if o != nil && !IsNil(o.Depths) {
		return true
	}

	return false
}

// SetDepths gets a reference to the given GetIssue200ResponseOneOfAllOfDepths and assigns it to the Depths field.
func (o *GetIssue200ResponseOneOf1) SetDepths(v GetIssue200ResponseOneOfAllOfDepths) {
	o.Depths = &v
}

// GetContainerLayers returns the ContainerLayers field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetContainerLayers() GetIssue200ResponseOneOfAllOfContainerLayers {
	if o == nil || IsNil(o.ContainerLayers) {
		var ret GetIssue200ResponseOneOfAllOfContainerLayers
		return ret
	}
	return *o.ContainerLayers
}

// GetContainerLayersOk returns a tuple with the ContainerLayers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetContainerLayersOk() (*GetIssue200ResponseOneOfAllOfContainerLayers, bool) {
	if o == nil || IsNil(o.ContainerLayers) {
		return nil, false
	}
	return o.ContainerLayers, true
}

// HasContainerLayers returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasContainerLayers() bool {
	if o != nil && !IsNil(o.ContainerLayers) {
		return true
	}

	return false
}

// SetContainerLayers gets a reference to the given GetIssue200ResponseOneOfAllOfContainerLayers and assigns it to the ContainerLayers field.
func (o *GetIssue200ResponseOneOf1) SetContainerLayers(v GetIssue200ResponseOneOfAllOfContainerLayers) {
	o.ContainerLayers = &v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetStatuses() GetIssueStatuses200ResponseIssues {
	if o == nil || IsNil(o.Statuses) {
		var ret GetIssueStatuses200ResponseIssues
		return ret
	}
	return *o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetStatusesOk() (*GetIssueStatuses200ResponseIssues, bool) {
	if o == nil || IsNil(o.Statuses) {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasStatuses() bool {
	if o != nil && !IsNil(o.Statuses) {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given GetIssueStatuses200ResponseIssues and assigns it to the Statuses field.
func (o *GetIssue200ResponseOneOf1) SetStatuses(v GetIssueStatuses200ResponseIssues) {
	o.Statuses = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetProjects() []GetIssue200ResponseOneOfAllOfProjectsInner {
	if o == nil || IsNil(o.Projects) {
		var ret []GetIssue200ResponseOneOfAllOfProjectsInner
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetProjectsOk() ([]GetIssue200ResponseOneOfAllOfProjectsInner, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []GetIssue200ResponseOneOfAllOfProjectsInner and assigns it to the Projects field.
func (o *GetIssue200ResponseOneOf1) SetProjects(v []GetIssue200ResponseOneOfAllOfProjectsInner) {
	o.Projects = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetIssue200ResponseOneOf1) SetType(v string) {
	o.Type = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf1) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf1) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf1) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *GetIssue200ResponseOneOf1) SetLicense(v string) {
	o.License = &v
}

func (o GetIssue200ResponseOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIssue200ResponseOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Depths) {
		toSerialize["depths"] = o.Depths
	}
	if !IsNil(o.ContainerLayers) {
		toSerialize["containerLayers"] = o.ContainerLayers
	}
	if !IsNil(o.Statuses) {
		toSerialize["statuses"] = o.Statuses
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	return toSerialize, nil
}

type NullableGetIssue200ResponseOneOf1 struct {
	value *GetIssue200ResponseOneOf1
	isSet bool
}

func (v NullableGetIssue200ResponseOneOf1) Get() *GetIssue200ResponseOneOf1 {
	return v.value
}

func (v *NullableGetIssue200ResponseOneOf1) Set(val *GetIssue200ResponseOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssue200ResponseOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssue200ResponseOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssue200ResponseOneOf1(val *GetIssue200ResponseOneOf1) *NullableGetIssue200ResponseOneOf1 {
	return &NullableGetIssue200ResponseOneOf1{value: val, isSet: true}
}

func (v NullableGetIssue200ResponseOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssue200ResponseOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


