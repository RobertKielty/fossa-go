/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the UpdateIssuesRequestOneOf4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIssuesRequestOneOf4{}

// UpdateIssuesRequestOneOf4 struct for UpdateIssuesRequestOneOf4
type UpdateIssuesRequestOneOf4 struct {
	Type *string `json:"type,omitempty"`
	PackageScope *string `json:"packageScope,omitempty"`
	IgnoreScope *string `json:"ignoreScope,omitempty"`
	// The UTC date after which the exception will expire. If not provided, the exception will never expire. 
	ExpiresAfter *string `json:"expiresAfter,omitempty"`
	// This is a free-form field for users to provide additional context for the exception. This value appears in the vulnerabilities.analysis.detail field in CycloneDX SBOM reports 
	Notes *string `json:"notes,omitempty"`
	// Provided reason for ignoring or resolving a security issue. 'Fixed' and 'Under_investigation' map to VEX statuses with the same names. All other values map to the VEX status 'Not Affected'. This value appears in the vulnerabilities.analysis.justification field of CycloneDX SBOM reports. 
	Reason *string `json:"reason,omitempty"`
	// Set a license ID to create exceptions for a specific license ID. 
	LicenseId *string `json:"licenseId,omitempty"`
}

// NewUpdateIssuesRequestOneOf4 instantiates a new UpdateIssuesRequestOneOf4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIssuesRequestOneOf4() *UpdateIssuesRequestOneOf4 {
	this := UpdateIssuesRequestOneOf4{}
	return &this
}

// NewUpdateIssuesRequestOneOf4WithDefaults instantiates a new UpdateIssuesRequestOneOf4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIssuesRequestOneOf4WithDefaults() *UpdateIssuesRequestOneOf4 {
	this := UpdateIssuesRequestOneOf4{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateIssuesRequestOneOf4) SetType(v string) {
	o.Type = &v
}

// GetPackageScope returns the PackageScope field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetPackageScope() string {
	if o == nil || IsNil(o.PackageScope) {
		var ret string
		return ret
	}
	return *o.PackageScope
}

// GetPackageScopeOk returns a tuple with the PackageScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetPackageScopeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageScope) {
		return nil, false
	}
	return o.PackageScope, true
}

// HasPackageScope returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasPackageScope() bool {
	if o != nil && !IsNil(o.PackageScope) {
		return true
	}

	return false
}

// SetPackageScope gets a reference to the given string and assigns it to the PackageScope field.
func (o *UpdateIssuesRequestOneOf4) SetPackageScope(v string) {
	o.PackageScope = &v
}

// GetIgnoreScope returns the IgnoreScope field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetIgnoreScope() string {
	if o == nil || IsNil(o.IgnoreScope) {
		var ret string
		return ret
	}
	return *o.IgnoreScope
}

// GetIgnoreScopeOk returns a tuple with the IgnoreScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetIgnoreScopeOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreScope) {
		return nil, false
	}
	return o.IgnoreScope, true
}

// HasIgnoreScope returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasIgnoreScope() bool {
	if o != nil && !IsNil(o.IgnoreScope) {
		return true
	}

	return false
}

// SetIgnoreScope gets a reference to the given string and assigns it to the IgnoreScope field.
func (o *UpdateIssuesRequestOneOf4) SetIgnoreScope(v string) {
	o.IgnoreScope = &v
}

// GetExpiresAfter returns the ExpiresAfter field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetExpiresAfter() string {
	if o == nil || IsNil(o.ExpiresAfter) {
		var ret string
		return ret
	}
	return *o.ExpiresAfter
}

// GetExpiresAfterOk returns a tuple with the ExpiresAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetExpiresAfterOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAfter) {
		return nil, false
	}
	return o.ExpiresAfter, true
}

// HasExpiresAfter returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasExpiresAfter() bool {
	if o != nil && !IsNil(o.ExpiresAfter) {
		return true
	}

	return false
}

// SetExpiresAfter gets a reference to the given string and assigns it to the ExpiresAfter field.
func (o *UpdateIssuesRequestOneOf4) SetExpiresAfter(v string) {
	o.ExpiresAfter = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *UpdateIssuesRequestOneOf4) SetNotes(v string) {
	o.Notes = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *UpdateIssuesRequestOneOf4) SetReason(v string) {
	o.Reason = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf4) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf4) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf4) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *UpdateIssuesRequestOneOf4) SetLicenseId(v string) {
	o.LicenseId = &v
}

func (o UpdateIssuesRequestOneOf4) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIssuesRequestOneOf4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PackageScope) {
		toSerialize["packageScope"] = o.PackageScope
	}
	if !IsNil(o.IgnoreScope) {
		toSerialize["ignoreScope"] = o.IgnoreScope
	}
	if !IsNil(o.ExpiresAfter) {
		toSerialize["expiresAfter"] = o.ExpiresAfter
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	return toSerialize, nil
}

type NullableUpdateIssuesRequestOneOf4 struct {
	value *UpdateIssuesRequestOneOf4
	isSet bool
}

func (v NullableUpdateIssuesRequestOneOf4) Get() *UpdateIssuesRequestOneOf4 {
	return v.value
}

func (v *NullableUpdateIssuesRequestOneOf4) Set(val *UpdateIssuesRequestOneOf4) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIssuesRequestOneOf4) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIssuesRequestOneOf4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIssuesRequestOneOf4(val *UpdateIssuesRequestOneOf4) *NullableUpdateIssuesRequestOneOf4 {
	return &NullableUpdateIssuesRequestOneOf4{value: val, isSet: true}
}

func (v NullableUpdateIssuesRequestOneOf4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIssuesRequestOneOf4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


