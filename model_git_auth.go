/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GitAuth - struct for GitAuth
type GitAuth struct {
	GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf *GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf
	GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 *GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1
}

// GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOfAsGitAuth is a convenience function that returns GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf wrapped in GitAuth
func GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOfAsGitAuth(v *GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf) GitAuth {
	return GitAuth{
		GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf: v,
	}
}

// GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1AsGitAuth is a convenience function that returns GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 wrapped in GitAuth
func GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1AsGitAuth(v *GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1) GitAuth {
	return GitAuth{
		GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GitAuth) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf)
	if err == nil {
		jsonGetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf, _ := json.Marshal(dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf)
		if string(jsonGetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf) == "{}" { // empty struct
			dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf = nil
		} else {
			if err = validator.Validate(dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf); err != nil {
				dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf = nil
	}

	// try to unmarshal data into GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1)
	if err == nil {
		jsonGetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1, _ := json.Marshal(dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1)
		if string(jsonGetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1) == "{}" { // empty struct
			dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 = nil
		} else {
			if err = validator.Validate(dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1); err != nil {
				dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf = nil
		dst.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GitAuth)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GitAuth)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GitAuth) MarshalJSON() ([]byte, error) {
	if src.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf != nil {
		return json.Marshal(&src.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf)
	}

	if src.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 != nil {
		return json.Marshal(&src.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GitAuth) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf != nil {
		return obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf
	}

	if obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 != nil {
		return obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GitAuth) GetActualInstanceValue() (interface{}) {
	if obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf != nil {
		return *obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf
	}

	if obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1 != nil {
		return *obj.GetOrganizationGitSettings200ResponseAuthOptionsInnerOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableGitAuth struct {
	value *GitAuth
	isSet bool
}

func (v NullableGitAuth) Get() *GitAuth {
	return v.value
}

func (v *NullableGitAuth) Set(val *GitAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableGitAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableGitAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitAuth(val *GitAuth) *NullableGitAuth {
	return &NullableGitAuth{value: val, isSet: true}
}

func (v NullableGitAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


