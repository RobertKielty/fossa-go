/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the DeletedJira type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedJira{}

// DeletedJira struct for DeletedJira
type DeletedJira struct {
	// ID of the Jira site that was requested to be deleted
	Id *int32 `json:"id,omitempty"`
	// whether the Jira sire was successfully deleted or not
	Deleted *bool `json:"deleted,omitempty"`
}

// NewDeletedJira instantiates a new DeletedJira object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedJira() *DeletedJira {
	this := DeletedJira{}
	return &this
}

// NewDeletedJiraWithDefaults instantiates a new DeletedJira object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedJiraWithDefaults() *DeletedJira {
	this := DeletedJira{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeletedJira) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedJira) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeletedJira) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DeletedJira) SetId(v int32) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *DeletedJira) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedJira) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *DeletedJira) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *DeletedJira) SetDeleted(v bool) {
	o.Deleted = &v
}

func (o DeletedJira) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletedJira) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	return toSerialize, nil
}

type NullableDeletedJira struct {
	value *DeletedJira
	isSet bool
}

func (v NullableDeletedJira) Get() *DeletedJira {
	return v.value
}

func (v *NullableDeletedJira) Set(val *DeletedJira) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedJira) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedJira) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedJira(val *DeletedJira) *NullableDeletedJira {
	return &NullableDeletedJira{value: val, isSet: true}
}

func (v NullableDeletedJira) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedJira) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


