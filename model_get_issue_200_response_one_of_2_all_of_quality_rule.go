/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"time"
)

// checks if the GetIssue200ResponseOneOf2AllOfQualityRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIssue200ResponseOneOf2AllOfQualityRule{}

// GetIssue200ResponseOneOf2AllOfQualityRule struct for GetIssue200ResponseOneOf2AllOfQualityRule
type GetIssue200ResponseOneOf2AllOfQualityRule struct {
	RuleId *int32 `json:"ruleId,omitempty"`
	Type *string `json:"type,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	DependencyOutdatedType NullableString `json:"dependencyOutdatedType,omitempty"`
	DependencyOutdatedVersionPart NullableString `json:"dependencyOutdatedVersionPart,omitempty"`
	DependencyOutdatedVersionDiff NullableString `json:"dependencyOutdatedVersionDiff,omitempty"`
	DependencyFilterName NullableString `json:"dependencyFilterName,omitempty"`
	DependencyFilterVersionType NullableString `json:"dependencyFilterVersionType,omitempty"`
	DependencyFilterStartVersion *string `json:"dependencyFilterStartVersion,omitempty"`
	DependencyFilterEndVersion NullableString `json:"dependencyFilterEndVersion,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	PackageProjectLocator *string `json:"packageProjectLocator,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewGetIssue200ResponseOneOf2AllOfQualityRule instantiates a new GetIssue200ResponseOneOf2AllOfQualityRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIssue200ResponseOneOf2AllOfQualityRule() *GetIssue200ResponseOneOf2AllOfQualityRule {
	this := GetIssue200ResponseOneOf2AllOfQualityRule{}
	return &this
}

// NewGetIssue200ResponseOneOf2AllOfQualityRuleWithDefaults instantiates a new GetIssue200ResponseOneOf2AllOfQualityRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIssue200ResponseOneOf2AllOfQualityRuleWithDefaults() *GetIssue200ResponseOneOf2AllOfQualityRule {
	this := GetIssue200ResponseOneOf2AllOfQualityRule{}
	return &this
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetRuleId() int32 {
	if o == nil || IsNil(o.RuleId) {
		var ret int32
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetRuleIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given int32 and assigns it to the RuleId field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetRuleId(v int32) {
	o.RuleId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetType(v string) {
	o.Type = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetNotes() {
	o.Notes.Unset()
}

// GetDependencyOutdatedType returns the DependencyOutdatedType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyOutdatedType() string {
	if o == nil || IsNil(o.DependencyOutdatedType.Get()) {
		var ret string
		return ret
	}
	return *o.DependencyOutdatedType.Get()
}

// GetDependencyOutdatedTypeOk returns a tuple with the DependencyOutdatedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyOutdatedTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependencyOutdatedType.Get(), o.DependencyOutdatedType.IsSet()
}

// HasDependencyOutdatedType returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyOutdatedType() bool {
	if o != nil && o.DependencyOutdatedType.IsSet() {
		return true
	}

	return false
}

// SetDependencyOutdatedType gets a reference to the given NullableString and assigns it to the DependencyOutdatedType field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyOutdatedType(v string) {
	o.DependencyOutdatedType.Set(&v)
}
// SetDependencyOutdatedTypeNil sets the value for DependencyOutdatedType to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyOutdatedTypeNil() {
	o.DependencyOutdatedType.Set(nil)
}

// UnsetDependencyOutdatedType ensures that no value is present for DependencyOutdatedType, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetDependencyOutdatedType() {
	o.DependencyOutdatedType.Unset()
}

// GetDependencyOutdatedVersionPart returns the DependencyOutdatedVersionPart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyOutdatedVersionPart() string {
	if o == nil || IsNil(o.DependencyOutdatedVersionPart.Get()) {
		var ret string
		return ret
	}
	return *o.DependencyOutdatedVersionPart.Get()
}

// GetDependencyOutdatedVersionPartOk returns a tuple with the DependencyOutdatedVersionPart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyOutdatedVersionPartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependencyOutdatedVersionPart.Get(), o.DependencyOutdatedVersionPart.IsSet()
}

// HasDependencyOutdatedVersionPart returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyOutdatedVersionPart() bool {
	if o != nil && o.DependencyOutdatedVersionPart.IsSet() {
		return true
	}

	return false
}

// SetDependencyOutdatedVersionPart gets a reference to the given NullableString and assigns it to the DependencyOutdatedVersionPart field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyOutdatedVersionPart(v string) {
	o.DependencyOutdatedVersionPart.Set(&v)
}
// SetDependencyOutdatedVersionPartNil sets the value for DependencyOutdatedVersionPart to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyOutdatedVersionPartNil() {
	o.DependencyOutdatedVersionPart.Set(nil)
}

// UnsetDependencyOutdatedVersionPart ensures that no value is present for DependencyOutdatedVersionPart, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetDependencyOutdatedVersionPart() {
	o.DependencyOutdatedVersionPart.Unset()
}

// GetDependencyOutdatedVersionDiff returns the DependencyOutdatedVersionDiff field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyOutdatedVersionDiff() string {
	if o == nil || IsNil(o.DependencyOutdatedVersionDiff.Get()) {
		var ret string
		return ret
	}
	return *o.DependencyOutdatedVersionDiff.Get()
}

// GetDependencyOutdatedVersionDiffOk returns a tuple with the DependencyOutdatedVersionDiff field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyOutdatedVersionDiffOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependencyOutdatedVersionDiff.Get(), o.DependencyOutdatedVersionDiff.IsSet()
}

// HasDependencyOutdatedVersionDiff returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyOutdatedVersionDiff() bool {
	if o != nil && o.DependencyOutdatedVersionDiff.IsSet() {
		return true
	}

	return false
}

// SetDependencyOutdatedVersionDiff gets a reference to the given NullableString and assigns it to the DependencyOutdatedVersionDiff field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyOutdatedVersionDiff(v string) {
	o.DependencyOutdatedVersionDiff.Set(&v)
}
// SetDependencyOutdatedVersionDiffNil sets the value for DependencyOutdatedVersionDiff to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyOutdatedVersionDiffNil() {
	o.DependencyOutdatedVersionDiff.Set(nil)
}

// UnsetDependencyOutdatedVersionDiff ensures that no value is present for DependencyOutdatedVersionDiff, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetDependencyOutdatedVersionDiff() {
	o.DependencyOutdatedVersionDiff.Unset()
}

// GetDependencyFilterName returns the DependencyFilterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterName() string {
	if o == nil || IsNil(o.DependencyFilterName.Get()) {
		var ret string
		return ret
	}
	return *o.DependencyFilterName.Get()
}

// GetDependencyFilterNameOk returns a tuple with the DependencyFilterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependencyFilterName.Get(), o.DependencyFilterName.IsSet()
}

// HasDependencyFilterName returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyFilterName() bool {
	if o != nil && o.DependencyFilterName.IsSet() {
		return true
	}

	return false
}

// SetDependencyFilterName gets a reference to the given NullableString and assigns it to the DependencyFilterName field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterName(v string) {
	o.DependencyFilterName.Set(&v)
}
// SetDependencyFilterNameNil sets the value for DependencyFilterName to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterNameNil() {
	o.DependencyFilterName.Set(nil)
}

// UnsetDependencyFilterName ensures that no value is present for DependencyFilterName, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetDependencyFilterName() {
	o.DependencyFilterName.Unset()
}

// GetDependencyFilterVersionType returns the DependencyFilterVersionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterVersionType() string {
	if o == nil || IsNil(o.DependencyFilterVersionType.Get()) {
		var ret string
		return ret
	}
	return *o.DependencyFilterVersionType.Get()
}

// GetDependencyFilterVersionTypeOk returns a tuple with the DependencyFilterVersionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterVersionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependencyFilterVersionType.Get(), o.DependencyFilterVersionType.IsSet()
}

// HasDependencyFilterVersionType returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyFilterVersionType() bool {
	if o != nil && o.DependencyFilterVersionType.IsSet() {
		return true
	}

	return false
}

// SetDependencyFilterVersionType gets a reference to the given NullableString and assigns it to the DependencyFilterVersionType field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterVersionType(v string) {
	o.DependencyFilterVersionType.Set(&v)
}
// SetDependencyFilterVersionTypeNil sets the value for DependencyFilterVersionType to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterVersionTypeNil() {
	o.DependencyFilterVersionType.Set(nil)
}

// UnsetDependencyFilterVersionType ensures that no value is present for DependencyFilterVersionType, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetDependencyFilterVersionType() {
	o.DependencyFilterVersionType.Unset()
}

// GetDependencyFilterStartVersion returns the DependencyFilterStartVersion field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterStartVersion() string {
	if o == nil || IsNil(o.DependencyFilterStartVersion) {
		var ret string
		return ret
	}
	return *o.DependencyFilterStartVersion
}

// GetDependencyFilterStartVersionOk returns a tuple with the DependencyFilterStartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterStartVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DependencyFilterStartVersion) {
		return nil, false
	}
	return o.DependencyFilterStartVersion, true
}

// HasDependencyFilterStartVersion returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyFilterStartVersion() bool {
	if o != nil && !IsNil(o.DependencyFilterStartVersion) {
		return true
	}

	return false
}

// SetDependencyFilterStartVersion gets a reference to the given string and assigns it to the DependencyFilterStartVersion field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterStartVersion(v string) {
	o.DependencyFilterStartVersion = &v
}

// GetDependencyFilterEndVersion returns the DependencyFilterEndVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterEndVersion() string {
	if o == nil || IsNil(o.DependencyFilterEndVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DependencyFilterEndVersion.Get()
}

// GetDependencyFilterEndVersionOk returns a tuple with the DependencyFilterEndVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetDependencyFilterEndVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependencyFilterEndVersion.Get(), o.DependencyFilterEndVersion.IsSet()
}

// HasDependencyFilterEndVersion returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasDependencyFilterEndVersion() bool {
	if o != nil && o.DependencyFilterEndVersion.IsSet() {
		return true
	}

	return false
}

// SetDependencyFilterEndVersion gets a reference to the given NullableString and assigns it to the DependencyFilterEndVersion field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterEndVersion(v string) {
	o.DependencyFilterEndVersion.Set(&v)
}
// SetDependencyFilterEndVersionNil sets the value for DependencyFilterEndVersion to be an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetDependencyFilterEndVersionNil() {
	o.DependencyFilterEndVersion.Set(nil)
}

// UnsetDependencyFilterEndVersion ensures that no value is present for DependencyFilterEndVersion, not even an explicit nil
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) UnsetDependencyFilterEndVersion() {
	o.DependencyFilterEndVersion.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPackageProjectLocator returns the PackageProjectLocator field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetPackageProjectLocator() string {
	if o == nil || IsNil(o.PackageProjectLocator) {
		var ret string
		return ret
	}
	return *o.PackageProjectLocator
}

// GetPackageProjectLocatorOk returns a tuple with the PackageProjectLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetPackageProjectLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.PackageProjectLocator) {
		return nil, false
	}
	return o.PackageProjectLocator, true
}

// HasPackageProjectLocator returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasPackageProjectLocator() bool {
	if o != nil && !IsNil(o.PackageProjectLocator) {
		return true
	}

	return false
}

// SetPackageProjectLocator gets a reference to the given string and assigns it to the PackageProjectLocator field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetPackageProjectLocator(v string) {
	o.PackageProjectLocator = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *GetIssue200ResponseOneOf2AllOfQualityRule) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o GetIssue200ResponseOneOf2AllOfQualityRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIssue200ResponseOneOf2AllOfQualityRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleId) {
		toSerialize["ruleId"] = o.RuleId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.DependencyOutdatedType.IsSet() {
		toSerialize["dependencyOutdatedType"] = o.DependencyOutdatedType.Get()
	}
	if o.DependencyOutdatedVersionPart.IsSet() {
		toSerialize["dependencyOutdatedVersionPart"] = o.DependencyOutdatedVersionPart.Get()
	}
	if o.DependencyOutdatedVersionDiff.IsSet() {
		toSerialize["dependencyOutdatedVersionDiff"] = o.DependencyOutdatedVersionDiff.Get()
	}
	if o.DependencyFilterName.IsSet() {
		toSerialize["dependencyFilterName"] = o.DependencyFilterName.Get()
	}
	if o.DependencyFilterVersionType.IsSet() {
		toSerialize["dependencyFilterVersionType"] = o.DependencyFilterVersionType.Get()
	}
	if !IsNil(o.DependencyFilterStartVersion) {
		toSerialize["dependencyFilterStartVersion"] = o.DependencyFilterStartVersion
	}
	if o.DependencyFilterEndVersion.IsSet() {
		toSerialize["dependencyFilterEndVersion"] = o.DependencyFilterEndVersion.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.PackageProjectLocator) {
		toSerialize["packageProjectLocator"] = o.PackageProjectLocator
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableGetIssue200ResponseOneOf2AllOfQualityRule struct {
	value *GetIssue200ResponseOneOf2AllOfQualityRule
	isSet bool
}

func (v NullableGetIssue200ResponseOneOf2AllOfQualityRule) Get() *GetIssue200ResponseOneOf2AllOfQualityRule {
	return v.value
}

func (v *NullableGetIssue200ResponseOneOf2AllOfQualityRule) Set(val *GetIssue200ResponseOneOf2AllOfQualityRule) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssue200ResponseOneOf2AllOfQualityRule) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssue200ResponseOneOf2AllOfQualityRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssue200ResponseOneOf2AllOfQualityRule(val *GetIssue200ResponseOneOf2AllOfQualityRule) *NullableGetIssue200ResponseOneOf2AllOfQualityRule {
	return &NullableGetIssue200ResponseOneOf2AllOfQualityRule{value: val, isSet: true}
}

func (v NullableGetIssue200ResponseOneOf2AllOfQualityRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssue200ResponseOneOf2AllOfQualityRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


