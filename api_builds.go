/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


// BuildsAPIService BuildsAPI service
type BuildsAPIService service

type ApiGetBuildsRequest struct {
	ctx context.Context
	ApiService *BuildsAPIService
	locator *string
	projectId *string
	startDate *time.Time
	endDate *time.Time
	pageSize *int32
	page *int32
	sort *string
}

// The revision locator to filter builds to
func (r ApiGetBuildsRequest) Locator(locator string) ApiGetBuildsRequest {
	r.locator = &locator
	return r
}

// The project locator to filter builds to
func (r ApiGetBuildsRequest) ProjectId(projectId string) ApiGetBuildsRequest {
	r.projectId = &projectId
	return r
}

// The start date to filter builds to
func (r ApiGetBuildsRequest) StartDate(startDate time.Time) ApiGetBuildsRequest {
	r.startDate = &startDate
	return r
}

// The end date to filter builds to
func (r ApiGetBuildsRequest) EndDate(endDate time.Time) ApiGetBuildsRequest {
	r.endDate = &endDate
	return r
}

// The number of builds to return
func (r ApiGetBuildsRequest) PageSize(pageSize int32) ApiGetBuildsRequest {
	r.pageSize = &pageSize
	return r
}

// The page number to return
func (r ApiGetBuildsRequest) Page(page int32) ApiGetBuildsRequest {
	r.page = &page
	return r
}

// The sort order(s) to apply to the builds
func (r ApiGetBuildsRequest) Sort(sort string) ApiGetBuildsRequest {
	r.sort = &sort
	return r
}

func (r ApiGetBuildsRequest) Execute() ([]GetBuilds200ResponseInner, *http.Response, error) {
	return r.ApiService.GetBuildsExecute(r)
}

/*
GetBuilds Method for GetBuilds

Retrieves a list of builds.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBuildsRequest
*/
func (a *BuildsAPIService) GetBuilds(ctx context.Context) ApiGetBuildsRequest {
	return ApiGetBuildsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetBuilds200ResponseInner
func (a *BuildsAPIService) GetBuildsExecute(r ApiGetBuildsRequest) ([]GetBuilds200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetBuilds200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsAPIService.GetBuilds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/builds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.locator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locator", r.locator, "form", "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBuildsCountRequest struct {
	ctx context.Context
	ApiService *BuildsAPIService
	locator *string
	projectId *string
	startDate *time.Time
	endDate *time.Time
	pageSize *int32
	page *int32
	sort *string
}

// The revision locator to filter builds to
func (r ApiGetBuildsCountRequest) Locator(locator string) ApiGetBuildsCountRequest {
	r.locator = &locator
	return r
}

// The project locator to filter builds to
func (r ApiGetBuildsCountRequest) ProjectId(projectId string) ApiGetBuildsCountRequest {
	r.projectId = &projectId
	return r
}

// The start date to filter builds to
func (r ApiGetBuildsCountRequest) StartDate(startDate time.Time) ApiGetBuildsCountRequest {
	r.startDate = &startDate
	return r
}

// The end date to filter builds to
func (r ApiGetBuildsCountRequest) EndDate(endDate time.Time) ApiGetBuildsCountRequest {
	r.endDate = &endDate
	return r
}

// The number of builds to return
func (r ApiGetBuildsCountRequest) PageSize(pageSize int32) ApiGetBuildsCountRequest {
	r.pageSize = &pageSize
	return r
}

// The page number to return
func (r ApiGetBuildsCountRequest) Page(page int32) ApiGetBuildsCountRequest {
	r.page = &page
	return r
}

// The sort order(s) to apply to the builds
func (r ApiGetBuildsCountRequest) Sort(sort string) ApiGetBuildsCountRequest {
	r.sort = &sort
	return r
}

func (r ApiGetBuildsCountRequest) Execute() (float32, *http.Response, error) {
	return r.ApiService.GetBuildsCountExecute(r)
}

/*
GetBuildsCount Method for GetBuildsCount

Retrieves a count of builds.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBuildsCountRequest
*/
func (a *BuildsAPIService) GetBuildsCount(ctx context.Context) ApiGetBuildsCountRequest {
	return ApiGetBuildsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return float32
func (a *BuildsAPIService) GetBuildsCountExecute(r ApiGetBuildsCountRequest) (float32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  float32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsAPIService.GetBuildsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/counts/builds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.locator != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locator", r.locator, "form", "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "form", "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "form", "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
