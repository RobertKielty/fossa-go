/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreatePackageLabelAssignmentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePackageLabelAssignmentsRequest{}

// CreatePackageLabelAssignmentsRequest struct for CreatePackageLabelAssignmentsRequest
type CreatePackageLabelAssignmentsRequest struct {
	// The ID of the package to assign labels to.
	PackageId string `json:"packageId"`
	// The version of the package to assign labels to or blank for all versions.
	PackageVersion *string `json:"packageVersion,omitempty"`
	// The scope of the package label assignment.
	Scope *string `json:"scope,omitempty"`
	// The ID of the scope to assign labels to.
	ScopeId *string `json:"scopeId,omitempty"`
	// The IDs of the labels to assign to the package.
	LabelIds []int32 `json:"labelIds,omitempty"`
}

type _CreatePackageLabelAssignmentsRequest CreatePackageLabelAssignmentsRequest

// NewCreatePackageLabelAssignmentsRequest instantiates a new CreatePackageLabelAssignmentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePackageLabelAssignmentsRequest(packageId string) *CreatePackageLabelAssignmentsRequest {
	this := CreatePackageLabelAssignmentsRequest{}
	this.PackageId = packageId
	return &this
}

// NewCreatePackageLabelAssignmentsRequestWithDefaults instantiates a new CreatePackageLabelAssignmentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePackageLabelAssignmentsRequestWithDefaults() *CreatePackageLabelAssignmentsRequest {
	this := CreatePackageLabelAssignmentsRequest{}
	return &this
}

// GetPackageId returns the PackageId field value
func (o *CreatePackageLabelAssignmentsRequest) GetPackageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value
// and a boolean to check if the value has been set.
func (o *CreatePackageLabelAssignmentsRequest) GetPackageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageId, true
}

// SetPackageId sets field value
func (o *CreatePackageLabelAssignmentsRequest) SetPackageId(v string) {
	o.PackageId = v
}

// GetPackageVersion returns the PackageVersion field value if set, zero value otherwise.
func (o *CreatePackageLabelAssignmentsRequest) GetPackageVersion() string {
	if o == nil || IsNil(o.PackageVersion) {
		var ret string
		return ret
	}
	return *o.PackageVersion
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePackageLabelAssignmentsRequest) GetPackageVersionOk() (*string, bool) {
	if o == nil || IsNil(o.PackageVersion) {
		return nil, false
	}
	return o.PackageVersion, true
}

// HasPackageVersion returns a boolean if a field has been set.
func (o *CreatePackageLabelAssignmentsRequest) HasPackageVersion() bool {
	if o != nil && !IsNil(o.PackageVersion) {
		return true
	}

	return false
}

// SetPackageVersion gets a reference to the given string and assigns it to the PackageVersion field.
func (o *CreatePackageLabelAssignmentsRequest) SetPackageVersion(v string) {
	o.PackageVersion = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *CreatePackageLabelAssignmentsRequest) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePackageLabelAssignmentsRequest) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *CreatePackageLabelAssignmentsRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *CreatePackageLabelAssignmentsRequest) SetScope(v string) {
	o.Scope = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *CreatePackageLabelAssignmentsRequest) GetScopeId() string {
	if o == nil || IsNil(o.ScopeId) {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePackageLabelAssignmentsRequest) GetScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeId) {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *CreatePackageLabelAssignmentsRequest) HasScopeId() bool {
	if o != nil && !IsNil(o.ScopeId) {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *CreatePackageLabelAssignmentsRequest) SetScopeId(v string) {
	o.ScopeId = &v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise.
func (o *CreatePackageLabelAssignmentsRequest) GetLabelIds() []int32 {
	if o == nil || IsNil(o.LabelIds) {
		var ret []int32
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePackageLabelAssignmentsRequest) GetLabelIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *CreatePackageLabelAssignmentsRequest) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []int32 and assigns it to the LabelIds field.
func (o *CreatePackageLabelAssignmentsRequest) SetLabelIds(v []int32) {
	o.LabelIds = v
}

func (o CreatePackageLabelAssignmentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePackageLabelAssignmentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["packageId"] = o.PackageId
	if !IsNil(o.PackageVersion) {
		toSerialize["packageVersion"] = o.PackageVersion
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.ScopeId) {
		toSerialize["scopeId"] = o.ScopeId
	}
	if !IsNil(o.LabelIds) {
		toSerialize["labelIds"] = o.LabelIds
	}
	return toSerialize, nil
}

func (o *CreatePackageLabelAssignmentsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"packageId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePackageLabelAssignmentsRequest := _CreatePackageLabelAssignmentsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePackageLabelAssignmentsRequest)

	if err != nil {
		return err
	}

	*o = CreatePackageLabelAssignmentsRequest(varCreatePackageLabelAssignmentsRequest)

	return err
}

type NullableCreatePackageLabelAssignmentsRequest struct {
	value *CreatePackageLabelAssignmentsRequest
	isSet bool
}

func (v NullableCreatePackageLabelAssignmentsRequest) Get() *CreatePackageLabelAssignmentsRequest {
	return v.value
}

func (v *NullableCreatePackageLabelAssignmentsRequest) Set(val *CreatePackageLabelAssignmentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePackageLabelAssignmentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePackageLabelAssignmentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePackageLabelAssignmentsRequest(val *CreatePackageLabelAssignmentsRequest) *NullableCreatePackageLabelAssignmentsRequest {
	return &NullableCreatePackageLabelAssignmentsRequest{value: val, isSet: true}
}

func (v NullableCreatePackageLabelAssignmentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePackageLabelAssignmentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


