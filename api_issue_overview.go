/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
	"reflect"
)


// IssueOverviewAPIService IssueOverviewAPI service
type IssueOverviewAPIService service

type ApiExportIssueOverviewCsvRequest struct {
	ctx context.Context
	ApiService *IssueOverviewAPIService
	start *time.Time
	end *time.Time
	labels *[]int32
	category *string
	projectId *string
	teamId *[]GetIssueCWEsTeamIdParameterInner
}

// The start date to pull Issue Overview data for. Defaults to 30 days before the end date.
func (r ApiExportIssueOverviewCsvRequest) Start(start time.Time) ApiExportIssueOverviewCsvRequest {
	r.start = &start
	return r
}

// The start date to pull Issue Overview data for. Defaults to the current date and time.
func (r ApiExportIssueOverviewCsvRequest) End(end time.Time) ApiExportIssueOverviewCsvRequest {
	r.end = &end
	return r
}

// The project labels to filter Issue Overview data to.
func (r ApiExportIssueOverviewCsvRequest) Labels(labels []int32) ApiExportIssueOverviewCsvRequest {
	r.labels = &labels
	return r
}

// The issue category to filter Issue Overview data to. If no category is chosen, it will fetch data for all issue categories.
func (r ApiExportIssueOverviewCsvRequest) Category(category string) ApiExportIssueOverviewCsvRequest {
	r.category = &category
	return r
}

// The specific project ID to filter Issue Overview data to.
func (r ApiExportIssueOverviewCsvRequest) ProjectId(projectId string) ApiExportIssueOverviewCsvRequest {
	r.projectId = &projectId
	return r
}

// Filter by one or more team IDs. Providing \&quot;null\&quot; will return all unassigned projects.
func (r ApiExportIssueOverviewCsvRequest) TeamId(teamId []GetIssueCWEsTeamIdParameterInner) ApiExportIssueOverviewCsvRequest {
	r.teamId = &teamId
	return r
}

func (r ApiExportIssueOverviewCsvRequest) Execute() (*ExportIssueOverviewCsv200Response, *http.Response, error) {
	return r.ApiService.ExportIssueOverviewCsvExecute(r)
}

/*
ExportIssueOverviewCsv Method for ExportIssueOverviewCsv

Exports the issues from the current set of Issue Overview data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExportIssueOverviewCsvRequest
*/
func (a *IssueOverviewAPIService) ExportIssueOverviewCsv(ctx context.Context) ApiExportIssueOverviewCsvRequest {
	return ApiExportIssueOverviewCsvRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExportIssueOverviewCsv200Response
func (a *IssueOverviewAPIService) ExportIssueOverviewCsvExecute(r ApiExportIssueOverviewCsvRequest) (*ExportIssueOverviewCsv200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportIssueOverviewCsv200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueOverviewAPIService.ExportIssueOverviewCsv")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_counts/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.labels != nil {
		t := *r.labels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labels[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labels[]", t, "form", "multi")
		}
	}
	if r.category != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category", r.category, "form", "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "form", "")
	}
	if r.teamId != nil {
		t := *r.teamId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teamId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teamId", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetIssueCountsRequest struct {
	ctx context.Context
	ApiService *IssueOverviewAPIService
	start *time.Time
	end *time.Time
	labels *[]int32
	category *string
	projectId *string
	teamId *[]GetIssueCWEsTeamIdParameterInner
}

// The start date to pull Issue Overview data for. Defaults to 30 days before the end date.
func (r ApiGetIssueCountsRequest) Start(start time.Time) ApiGetIssueCountsRequest {
	r.start = &start
	return r
}

// The start date to pull Issue Overview data for. Defaults to the current date and time.
func (r ApiGetIssueCountsRequest) End(end time.Time) ApiGetIssueCountsRequest {
	r.end = &end
	return r
}

// The project labels to filter Issue Overview data to.
func (r ApiGetIssueCountsRequest) Labels(labels []int32) ApiGetIssueCountsRequest {
	r.labels = &labels
	return r
}

// The issue category to filter Issue Overview data to. If no category is chosen, it will fetch data for all issue categories.
func (r ApiGetIssueCountsRequest) Category(category string) ApiGetIssueCountsRequest {
	r.category = &category
	return r
}

// The specific project ID to filter Issue Overview data to.
func (r ApiGetIssueCountsRequest) ProjectId(projectId string) ApiGetIssueCountsRequest {
	r.projectId = &projectId
	return r
}

// Filter by one or more team IDs. Providing \&quot;null\&quot; will return all unassigned projects.
func (r ApiGetIssueCountsRequest) TeamId(teamId []GetIssueCWEsTeamIdParameterInner) ApiGetIssueCountsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiGetIssueCountsRequest) Execute() (*GetIssueCounts200Response, *http.Response, error) {
	return r.ApiService.GetIssueCountsExecute(r)
}

/*
GetIssueCounts Method for GetIssueCounts

Fetch the daily issue counts based on provided filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetIssueCountsRequest
*/
func (a *IssueOverviewAPIService) GetIssueCounts(ctx context.Context) ApiGetIssueCountsRequest {
	return ApiGetIssueCountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetIssueCounts200Response
func (a *IssueOverviewAPIService) GetIssueCountsExecute(r ApiGetIssueCountsRequest) (*GetIssueCounts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetIssueCounts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IssueOverviewAPIService.GetIssueCounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issue_counts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.labels != nil {
		t := *r.labels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "labels[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "labels[]", t, "form", "multi")
		}
	}
	if r.category != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "category", r.category, "form", "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "form", "")
	}
	if r.teamId != nil {
		t := *r.teamId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "teamId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "teamId", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
