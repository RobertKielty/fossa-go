/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the BuildRequestArchives type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildRequestArchives{}

// BuildRequestArchives File upload metadata
type BuildRequestArchives struct {
	// The unresolved spec (i.e. a URL) that can be passed to a fetcher and resolved to a package id. For example: underscore (npm) https://github.com/fossas/fossa (git) nokogiri (gem) 
	PackageSpec *string `json:"packageSpec,omitempty"`
	// The branch or revision of the component being uploaded.
	Revision *string `json:"revision,omitempty"`
	// The description of the archive.
	Description *string `json:"description,omitempty"`
	// The homepage of the archive.
	ProjectURL *string `json:"projectURL,omitempty"`
}

// NewBuildRequestArchives instantiates a new BuildRequestArchives object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildRequestArchives() *BuildRequestArchives {
	this := BuildRequestArchives{}
	return &this
}

// NewBuildRequestArchivesWithDefaults instantiates a new BuildRequestArchives object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildRequestArchivesWithDefaults() *BuildRequestArchives {
	this := BuildRequestArchives{}
	return &this
}

// GetPackageSpec returns the PackageSpec field value if set, zero value otherwise.
func (o *BuildRequestArchives) GetPackageSpec() string {
	if o == nil || IsNil(o.PackageSpec) {
		var ret string
		return ret
	}
	return *o.PackageSpec
}

// GetPackageSpecOk returns a tuple with the PackageSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildRequestArchives) GetPackageSpecOk() (*string, bool) {
	if o == nil || IsNil(o.PackageSpec) {
		return nil, false
	}
	return o.PackageSpec, true
}

// HasPackageSpec returns a boolean if a field has been set.
func (o *BuildRequestArchives) HasPackageSpec() bool {
	if o != nil && !IsNil(o.PackageSpec) {
		return true
	}

	return false
}

// SetPackageSpec gets a reference to the given string and assigns it to the PackageSpec field.
func (o *BuildRequestArchives) SetPackageSpec(v string) {
	o.PackageSpec = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *BuildRequestArchives) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildRequestArchives) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *BuildRequestArchives) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *BuildRequestArchives) SetRevision(v string) {
	o.Revision = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BuildRequestArchives) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildRequestArchives) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BuildRequestArchives) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BuildRequestArchives) SetDescription(v string) {
	o.Description = &v
}

// GetProjectURL returns the ProjectURL field value if set, zero value otherwise.
func (o *BuildRequestArchives) GetProjectURL() string {
	if o == nil || IsNil(o.ProjectURL) {
		var ret string
		return ret
	}
	return *o.ProjectURL
}

// GetProjectURLOk returns a tuple with the ProjectURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildRequestArchives) GetProjectURLOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectURL) {
		return nil, false
	}
	return o.ProjectURL, true
}

// HasProjectURL returns a boolean if a field has been set.
func (o *BuildRequestArchives) HasProjectURL() bool {
	if o != nil && !IsNil(o.ProjectURL) {
		return true
	}

	return false
}

// SetProjectURL gets a reference to the given string and assigns it to the ProjectURL field.
func (o *BuildRequestArchives) SetProjectURL(v string) {
	o.ProjectURL = &v
}

func (o BuildRequestArchives) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildRequestArchives) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageSpec) {
		toSerialize["packageSpec"] = o.PackageSpec
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProjectURL) {
		toSerialize["projectURL"] = o.ProjectURL
	}
	return toSerialize, nil
}

type NullableBuildRequestArchives struct {
	value *BuildRequestArchives
	isSet bool
}

func (v NullableBuildRequestArchives) Get() *BuildRequestArchives {
	return v.value
}

func (v *NullableBuildRequestArchives) Set(val *BuildRequestArchives) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildRequestArchives) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildRequestArchives) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildRequestArchives(val *BuildRequestArchives) *NullableBuildRequestArchives {
	return &NullableBuildRequestArchives{value: val, isSet: true}
}

func (v NullableBuildRequestArchives) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildRequestArchives) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


