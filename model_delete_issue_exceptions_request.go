/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeleteIssueExceptionsRequest - struct for DeleteIssueExceptionsRequest
type DeleteIssueExceptionsRequest struct {
	DeleteIssueExceptionsRequestOneOf *DeleteIssueExceptionsRequestOneOf
	DeleteIssueExceptionsRequestOneOf1 *DeleteIssueExceptionsRequestOneOf1
}

// DeleteIssueExceptionsRequestOneOfAsDeleteIssueExceptionsRequest is a convenience function that returns DeleteIssueExceptionsRequestOneOf wrapped in DeleteIssueExceptionsRequest
func DeleteIssueExceptionsRequestOneOfAsDeleteIssueExceptionsRequest(v *DeleteIssueExceptionsRequestOneOf) DeleteIssueExceptionsRequest {
	return DeleteIssueExceptionsRequest{
		DeleteIssueExceptionsRequestOneOf: v,
	}
}

// DeleteIssueExceptionsRequestOneOf1AsDeleteIssueExceptionsRequest is a convenience function that returns DeleteIssueExceptionsRequestOneOf1 wrapped in DeleteIssueExceptionsRequest
func DeleteIssueExceptionsRequestOneOf1AsDeleteIssueExceptionsRequest(v *DeleteIssueExceptionsRequestOneOf1) DeleteIssueExceptionsRequest {
	return DeleteIssueExceptionsRequest{
		DeleteIssueExceptionsRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeleteIssueExceptionsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeleteIssueExceptionsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.DeleteIssueExceptionsRequestOneOf)
	if err == nil {
		jsonDeleteIssueExceptionsRequestOneOf, _ := json.Marshal(dst.DeleteIssueExceptionsRequestOneOf)
		if string(jsonDeleteIssueExceptionsRequestOneOf) == "{}" { // empty struct
			dst.DeleteIssueExceptionsRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.DeleteIssueExceptionsRequestOneOf); err != nil {
				dst.DeleteIssueExceptionsRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteIssueExceptionsRequestOneOf = nil
	}

	// try to unmarshal data into DeleteIssueExceptionsRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.DeleteIssueExceptionsRequestOneOf1)
	if err == nil {
		jsonDeleteIssueExceptionsRequestOneOf1, _ := json.Marshal(dst.DeleteIssueExceptionsRequestOneOf1)
		if string(jsonDeleteIssueExceptionsRequestOneOf1) == "{}" { // empty struct
			dst.DeleteIssueExceptionsRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.DeleteIssueExceptionsRequestOneOf1); err != nil {
				dst.DeleteIssueExceptionsRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteIssueExceptionsRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeleteIssueExceptionsRequestOneOf = nil
		dst.DeleteIssueExceptionsRequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeleteIssueExceptionsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeleteIssueExceptionsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeleteIssueExceptionsRequest) MarshalJSON() ([]byte, error) {
	if src.DeleteIssueExceptionsRequestOneOf != nil {
		return json.Marshal(&src.DeleteIssueExceptionsRequestOneOf)
	}

	if src.DeleteIssueExceptionsRequestOneOf1 != nil {
		return json.Marshal(&src.DeleteIssueExceptionsRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeleteIssueExceptionsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DeleteIssueExceptionsRequestOneOf != nil {
		return obj.DeleteIssueExceptionsRequestOneOf
	}

	if obj.DeleteIssueExceptionsRequestOneOf1 != nil {
		return obj.DeleteIssueExceptionsRequestOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DeleteIssueExceptionsRequest) GetActualInstanceValue() (interface{}) {
	if obj.DeleteIssueExceptionsRequestOneOf != nil {
		return *obj.DeleteIssueExceptionsRequestOneOf
	}

	if obj.DeleteIssueExceptionsRequestOneOf1 != nil {
		return *obj.DeleteIssueExceptionsRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableDeleteIssueExceptionsRequest struct {
	value *DeleteIssueExceptionsRequest
	isSet bool
}

func (v NullableDeleteIssueExceptionsRequest) Get() *DeleteIssueExceptionsRequest {
	return v.value
}

func (v *NullableDeleteIssueExceptionsRequest) Set(val *DeleteIssueExceptionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteIssueExceptionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteIssueExceptionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteIssueExceptionsRequest(val *DeleteIssueExceptionsRequest) *NullableDeleteIssueExceptionsRequest {
	return &NullableDeleteIssueExceptionsRequest{value: val, isSet: true}
}

func (v NullableDeleteIssueExceptionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteIssueExceptionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


