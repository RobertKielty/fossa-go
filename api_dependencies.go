/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DependenciesAPIService DependenciesAPI service
type DependenciesAPIService service

type ApiGetProjectDependenciesRequest struct {
	ctx context.Context
	ApiService *DependenciesAPIService
	locator string
	locators *[]string
	title *string
	status *[]string
	depth *[]string
	layerDepth *[]string
	hasIssues *[]string
	licenses *[]string
	fetchers *[]string
	showIgnored *bool
	confidence *[]string
	page *int32
	count *int32
}

// Filter dependencies by locators (exact match)
func (r ApiGetProjectDependenciesRequest) Locators(locators []string) ApiGetProjectDependenciesRequest {
	r.locators = &locators
	return r
}

// Filter dependencies by title
func (r ApiGetProjectDependenciesRequest) Title(title string) ApiGetProjectDependenciesRequest {
	r.title = &title
	return r
}

// Filter dependencies by status
func (r ApiGetProjectDependenciesRequest) Status(status []string) ApiGetProjectDependenciesRequest {
	r.status = &status
	return r
}

// Filter dependencies by depth
func (r ApiGetProjectDependenciesRequest) Depth(depth []string) ApiGetProjectDependenciesRequest {
	r.depth = &depth
	return r
}

// Filter dependencies by depth (for container projects)
func (r ApiGetProjectDependenciesRequest) LayerDepth(layerDepth []string) ApiGetProjectDependenciesRequest {
	r.layerDepth = &layerDepth
	return r
}

// Filter dependencies by the presence of issues
func (r ApiGetProjectDependenciesRequest) HasIssues(hasIssues []string) ApiGetProjectDependenciesRequest {
	r.hasIssues = &hasIssues
	return r
}

// Filter dependencies by licenses
func (r ApiGetProjectDependenciesRequest) Licenses(licenses []string) ApiGetProjectDependenciesRequest {
	r.licenses = &licenses
	return r
}

// Filter dependencies by package manager
func (r ApiGetProjectDependenciesRequest) Fetchers(fetchers []string) ApiGetProjectDependenciesRequest {
	r.fetchers = &fetchers
	return r
}

// Includes ignored dependencies
func (r ApiGetProjectDependenciesRequest) ShowIgnored(showIgnored bool) ApiGetProjectDependenciesRequest {
	r.showIgnored = &showIgnored
	return r
}

// Filter dependencies by confidence
func (r ApiGetProjectDependenciesRequest) Confidence(confidence []string) ApiGetProjectDependenciesRequest {
	r.confidence = &confidence
	return r
}

// The specific page of data to return
func (r ApiGetProjectDependenciesRequest) Page(page int32) ApiGetProjectDependenciesRequest {
	r.page = &page
	return r
}

// The number of items to return in each page of results
func (r ApiGetProjectDependenciesRequest) Count(count int32) ApiGetProjectDependenciesRequest {
	r.count = &count
	return r
}

func (r ApiGetProjectDependenciesRequest) Execute() (*GetProjectDependencies200Response, *http.Response, error) {
	return r.ApiService.GetProjectDependenciesExecute(r)
}

/*
GetProjectDependencies Method for GetProjectDependencies

Get the dependencies for a given project revision

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param locator
 @return ApiGetProjectDependenciesRequest
*/
func (a *DependenciesAPIService) GetProjectDependencies(ctx context.Context, locator string) ApiGetProjectDependenciesRequest {
	return ApiGetProjectDependenciesRequest{
		ApiService: a,
		ctx: ctx,
		locator: locator,
	}
}

// Execute executes the request
//  @return GetProjectDependencies200Response
func (a *DependenciesAPIService) GetProjectDependenciesExecute(r ApiGetProjectDependenciesRequest) (*GetProjectDependencies200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectDependencies200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependenciesAPIService.GetProjectDependencies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/revisions/{locator}/dependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.locators != nil {
		t := *r.locators
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "locators[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "locators[]", t, "form", "multi")
		}
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "form", "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status[]", t, "form", "multi")
		}
	}
	if r.depth != nil {
		t := *r.depth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "depth[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "depth[]", t, "form", "multi")
		}
	}
	if r.layerDepth != nil {
		t := *r.layerDepth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "layerDepth[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "layerDepth[]", t, "form", "multi")
		}
	}
	if r.hasIssues != nil {
		t := *r.hasIssues
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hasIssues[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hasIssues[]", t, "form", "multi")
		}
	}
	if r.licenses != nil {
		t := *r.licenses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "licenses[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "licenses[]", t, "form", "multi")
		}
	}
	if r.fetchers != nil {
		t := *r.fetchers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchers[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchers[]", t, "form", "multi")
		}
	}
	if r.showIgnored != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showIgnored", r.showIgnored, "form", "")
	}
	if r.confidence != nil {
		t := *r.confidence
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "confidence[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "confidence[]", t, "form", "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 50
		r.count = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectDependencyPackageManagersRequest struct {
	ctx context.Context
	ApiService *DependenciesAPIService
	locator string
}

func (r ApiGetProjectDependencyPackageManagersRequest) Execute() (*GetIssuePackageManagers200Response, *http.Response, error) {
	return r.ApiService.GetProjectDependencyPackageManagersExecute(r)
}

/*
GetProjectDependencyPackageManagers Method for GetProjectDependencyPackageManagers

Get the package managers present in the dependencies of a given project revision

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param locator
 @return ApiGetProjectDependencyPackageManagersRequest
*/
func (a *DependenciesAPIService) GetProjectDependencyPackageManagers(ctx context.Context, locator string) ApiGetProjectDependencyPackageManagersRequest {
	return ApiGetProjectDependencyPackageManagersRequest{
		ApiService: a,
		ctx: ctx,
		locator: locator,
	}
}

// Execute executes the request
//  @return GetIssuePackageManagers200Response
func (a *DependenciesAPIService) GetProjectDependencyPackageManagersExecute(r ApiGetProjectDependencyPackageManagersRequest) (*GetIssuePackageManagers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetIssuePackageManagers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependenciesAPIService.GetProjectDependencyPackageManagers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/revisions/{locator}/dependencies/package-managers"
	localVarPath = strings.Replace(localVarPath, "{"+"locator"+"}", url.PathEscape(parameterValueToString(r.locator, "locator")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReleaseGroupDependenciesRequest struct {
	ctx context.Context
	ApiService *DependenciesAPIService
	projectGroupId int32
	projectGroupReleaseId int32
	locators *[]string
	title *string
	status *[]string
	depth *[]string
	layerDepth *[]string
	hasIssues *[]string
	licenses *[]string
	fetchers *[]string
	showIgnored *bool
	rootProjects *[]string
	page *int32
	count *int32
}

// Filter dependencies by locators (exact match)
func (r ApiGetReleaseGroupDependenciesRequest) Locators(locators []string) ApiGetReleaseGroupDependenciesRequest {
	r.locators = &locators
	return r
}

// Filter dependencies by title
func (r ApiGetReleaseGroupDependenciesRequest) Title(title string) ApiGetReleaseGroupDependenciesRequest {
	r.title = &title
	return r
}

// Filter dependencies by status
func (r ApiGetReleaseGroupDependenciesRequest) Status(status []string) ApiGetReleaseGroupDependenciesRequest {
	r.status = &status
	return r
}

// Filter dependencies by depth
func (r ApiGetReleaseGroupDependenciesRequest) Depth(depth []string) ApiGetReleaseGroupDependenciesRequest {
	r.depth = &depth
	return r
}

// Filter dependencies by depth (for container projects)
func (r ApiGetReleaseGroupDependenciesRequest) LayerDepth(layerDepth []string) ApiGetReleaseGroupDependenciesRequest {
	r.layerDepth = &layerDepth
	return r
}

// Filter dependencies by the presence of issues
func (r ApiGetReleaseGroupDependenciesRequest) HasIssues(hasIssues []string) ApiGetReleaseGroupDependenciesRequest {
	r.hasIssues = &hasIssues
	return r
}

// Filter dependencies by licenses
func (r ApiGetReleaseGroupDependenciesRequest) Licenses(licenses []string) ApiGetReleaseGroupDependenciesRequest {
	r.licenses = &licenses
	return r
}

// Filter dependencies by package manager
func (r ApiGetReleaseGroupDependenciesRequest) Fetchers(fetchers []string) ApiGetReleaseGroupDependenciesRequest {
	r.fetchers = &fetchers
	return r
}

// Includes ignored dependencies
func (r ApiGetReleaseGroupDependenciesRequest) ShowIgnored(showIgnored bool) ApiGetReleaseGroupDependenciesRequest {
	r.showIgnored = &showIgnored
	return r
}

// Filter release group dependencies by root projects
func (r ApiGetReleaseGroupDependenciesRequest) RootProjects(rootProjects []string) ApiGetReleaseGroupDependenciesRequest {
	r.rootProjects = &rootProjects
	return r
}

// The specific page of data to return
func (r ApiGetReleaseGroupDependenciesRequest) Page(page int32) ApiGetReleaseGroupDependenciesRequest {
	r.page = &page
	return r
}

// The number of items to return in each page of results
func (r ApiGetReleaseGroupDependenciesRequest) Count(count int32) ApiGetReleaseGroupDependenciesRequest {
	r.count = &count
	return r
}

func (r ApiGetReleaseGroupDependenciesRequest) Execute() (*GetProjectDependencies200Response, *http.Response, error) {
	return r.ApiService.GetReleaseGroupDependenciesExecute(r)
}

/*
GetReleaseGroupDependencies Method for GetReleaseGroupDependencies

Get the dependencies for a given release group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectGroupId
 @param projectGroupReleaseId The ID of the release
 @return ApiGetReleaseGroupDependenciesRequest
*/
func (a *DependenciesAPIService) GetReleaseGroupDependencies(ctx context.Context, projectGroupId int32, projectGroupReleaseId int32) ApiGetReleaseGroupDependenciesRequest {
	return ApiGetReleaseGroupDependenciesRequest{
		ApiService: a,
		ctx: ctx,
		projectGroupId: projectGroupId,
		projectGroupReleaseId: projectGroupReleaseId,
	}
}

// Execute executes the request
//  @return GetProjectDependencies200Response
func (a *DependenciesAPIService) GetReleaseGroupDependenciesExecute(r ApiGetReleaseGroupDependenciesRequest) (*GetProjectDependencies200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetProjectDependencies200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependenciesAPIService.GetReleaseGroupDependencies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"projectGroupId"+"}", url.PathEscape(parameterValueToString(r.projectGroupId, "projectGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectGroupReleaseId"+"}", url.PathEscape(parameterValueToString(r.projectGroupReleaseId, "projectGroupReleaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.locators != nil {
		t := *r.locators
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "locators[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "locators[]", t, "form", "multi")
		}
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "form", "")
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status[]", t, "form", "multi")
		}
	}
	if r.depth != nil {
		t := *r.depth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "depth[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "depth[]", t, "form", "multi")
		}
	}
	if r.layerDepth != nil {
		t := *r.layerDepth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "layerDepth[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "layerDepth[]", t, "form", "multi")
		}
	}
	if r.hasIssues != nil {
		t := *r.hasIssues
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hasIssues[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hasIssues[]", t, "form", "multi")
		}
	}
	if r.licenses != nil {
		t := *r.licenses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "licenses[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "licenses[]", t, "form", "multi")
		}
	}
	if r.fetchers != nil {
		t := *r.fetchers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchers[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchers[]", t, "form", "multi")
		}
	}
	if r.showIgnored != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showIgnored", r.showIgnored, "form", "")
	}
	if r.rootProjects != nil {
		t := *r.rootProjects
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "rootProjects[]", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "rootProjects[]", t, "form", "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 1
		r.page = &defaultValue
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "form", "")
	} else {
		var defaultValue int32 = 50
		r.count = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReleaseGroupDependencyPackageManagersRequest struct {
	ctx context.Context
	ApiService *DependenciesAPIService
	projectGroupId int32
	projectGroupReleaseId int32
}

func (r ApiGetReleaseGroupDependencyPackageManagersRequest) Execute() (*GetIssuePackageManagers200Response, *http.Response, error) {
	return r.ApiService.GetReleaseGroupDependencyPackageManagersExecute(r)
}

/*
GetReleaseGroupDependencyPackageManagers Method for GetReleaseGroupDependencyPackageManagers

Get the package managers present in the dependencies of a given release group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectGroupId
 @param projectGroupReleaseId The ID of the release
 @return ApiGetReleaseGroupDependencyPackageManagersRequest
*/
func (a *DependenciesAPIService) GetReleaseGroupDependencyPackageManagers(ctx context.Context, projectGroupId int32, projectGroupReleaseId int32) ApiGetReleaseGroupDependencyPackageManagersRequest {
	return ApiGetReleaseGroupDependencyPackageManagersRequest{
		ApiService: a,
		ctx: ctx,
		projectGroupId: projectGroupId,
		projectGroupReleaseId: projectGroupReleaseId,
	}
}

// Execute executes the request
//  @return GetIssuePackageManagers200Response
func (a *DependenciesAPIService) GetReleaseGroupDependencyPackageManagersExecute(r ApiGetReleaseGroupDependencyPackageManagersRequest) (*GetIssuePackageManagers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetIssuePackageManagers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependenciesAPIService.GetReleaseGroupDependencyPackageManagers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/dependencies/package-managers"
	localVarPath = strings.Replace(localVarPath, "{"+"projectGroupId"+"}", url.PathEscape(parameterValueToString(r.projectGroupId, "projectGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectGroupReleaseId"+"}", url.PathEscape(parameterValueToString(r.projectGroupReleaseId, "projectGroupReleaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReleaseGroupDependencyRootProjectsRequest struct {
	ctx context.Context
	ApiService *DependenciesAPIService
	projectGroupId int32
	projectGroupReleaseId int32
}

func (r ApiGetReleaseGroupDependencyRootProjectsRequest) Execute() (*GetReleaseGroupDependencyRootProjects200Response, *http.Response, error) {
	return r.ApiService.GetReleaseGroupDependencyRootProjectsExecute(r)
}

/*
GetReleaseGroupDependencyRootProjects Method for GetReleaseGroupDependencyRootProjects

Get the root projects present in the dependencies of a given release group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectGroupId
 @param projectGroupReleaseId The ID of the release
 @return ApiGetReleaseGroupDependencyRootProjectsRequest
*/
func (a *DependenciesAPIService) GetReleaseGroupDependencyRootProjects(ctx context.Context, projectGroupId int32, projectGroupReleaseId int32) ApiGetReleaseGroupDependencyRootProjectsRequest {
	return ApiGetReleaseGroupDependencyRootProjectsRequest{
		ApiService: a,
		ctx: ctx,
		projectGroupId: projectGroupId,
		projectGroupReleaseId: projectGroupReleaseId,
	}
}

// Execute executes the request
//  @return GetReleaseGroupDependencyRootProjects200Response
func (a *DependenciesAPIService) GetReleaseGroupDependencyRootProjectsExecute(r ApiGetReleaseGroupDependencyRootProjectsRequest) (*GetReleaseGroupDependencyRootProjects200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReleaseGroupDependencyRootProjects200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependenciesAPIService.GetReleaseGroupDependencyRootProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/release-groups/{projectGroupId}/releases/{projectGroupReleaseId}/root-projects"
	localVarPath = strings.Replace(localVarPath, "{"+"projectGroupId"+"}", url.PathEscape(parameterValueToString(r.projectGroupId, "projectGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectGroupReleaseId"+"}", url.PathEscape(parameterValueToString(r.projectGroupReleaseId, "projectGroupReleaseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v GetGitHubAppInstallationUrl403Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
