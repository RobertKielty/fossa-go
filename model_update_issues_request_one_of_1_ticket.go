/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateIssuesRequestOneOf1Ticket - struct for UpdateIssuesRequestOneOf1Ticket
type UpdateIssuesRequestOneOf1Ticket struct {
	UpdateIssuesRequestOneOf1TicketOneOf *UpdateIssuesRequestOneOf1TicketOneOf
	UpdateIssuesRequestOneOf1TicketOneOf1 *UpdateIssuesRequestOneOf1TicketOneOf1
}

// UpdateIssuesRequestOneOf1TicketOneOfAsUpdateIssuesRequestOneOf1Ticket is a convenience function that returns UpdateIssuesRequestOneOf1TicketOneOf wrapped in UpdateIssuesRequestOneOf1Ticket
func UpdateIssuesRequestOneOf1TicketOneOfAsUpdateIssuesRequestOneOf1Ticket(v *UpdateIssuesRequestOneOf1TicketOneOf) UpdateIssuesRequestOneOf1Ticket {
	return UpdateIssuesRequestOneOf1Ticket{
		UpdateIssuesRequestOneOf1TicketOneOf: v,
	}
}

// UpdateIssuesRequestOneOf1TicketOneOf1AsUpdateIssuesRequestOneOf1Ticket is a convenience function that returns UpdateIssuesRequestOneOf1TicketOneOf1 wrapped in UpdateIssuesRequestOneOf1Ticket
func UpdateIssuesRequestOneOf1TicketOneOf1AsUpdateIssuesRequestOneOf1Ticket(v *UpdateIssuesRequestOneOf1TicketOneOf1) UpdateIssuesRequestOneOf1Ticket {
	return UpdateIssuesRequestOneOf1Ticket{
		UpdateIssuesRequestOneOf1TicketOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateIssuesRequestOneOf1Ticket) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateIssuesRequestOneOf1TicketOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf1TicketOneOf)
	if err == nil {
		jsonUpdateIssuesRequestOneOf1TicketOneOf, _ := json.Marshal(dst.UpdateIssuesRequestOneOf1TicketOneOf)
		if string(jsonUpdateIssuesRequestOneOf1TicketOneOf) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf1TicketOneOf = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf1TicketOneOf); err != nil {
				dst.UpdateIssuesRequestOneOf1TicketOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf1TicketOneOf = nil
	}

	// try to unmarshal data into UpdateIssuesRequestOneOf1TicketOneOf1
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf1TicketOneOf1)
	if err == nil {
		jsonUpdateIssuesRequestOneOf1TicketOneOf1, _ := json.Marshal(dst.UpdateIssuesRequestOneOf1TicketOneOf1)
		if string(jsonUpdateIssuesRequestOneOf1TicketOneOf1) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf1TicketOneOf1 = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf1TicketOneOf1); err != nil {
				dst.UpdateIssuesRequestOneOf1TicketOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf1TicketOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateIssuesRequestOneOf1TicketOneOf = nil
		dst.UpdateIssuesRequestOneOf1TicketOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateIssuesRequestOneOf1Ticket)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateIssuesRequestOneOf1Ticket)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateIssuesRequestOneOf1Ticket) MarshalJSON() ([]byte, error) {
	if src.UpdateIssuesRequestOneOf1TicketOneOf != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf1TicketOneOf)
	}

	if src.UpdateIssuesRequestOneOf1TicketOneOf1 != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf1TicketOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateIssuesRequestOneOf1Ticket) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateIssuesRequestOneOf1TicketOneOf != nil {
		return obj.UpdateIssuesRequestOneOf1TicketOneOf
	}

	if obj.UpdateIssuesRequestOneOf1TicketOneOf1 != nil {
		return obj.UpdateIssuesRequestOneOf1TicketOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateIssuesRequestOneOf1Ticket) GetActualInstanceValue() (interface{}) {
	if obj.UpdateIssuesRequestOneOf1TicketOneOf != nil {
		return *obj.UpdateIssuesRequestOneOf1TicketOneOf
	}

	if obj.UpdateIssuesRequestOneOf1TicketOneOf1 != nil {
		return *obj.UpdateIssuesRequestOneOf1TicketOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableUpdateIssuesRequestOneOf1Ticket struct {
	value *UpdateIssuesRequestOneOf1Ticket
	isSet bool
}

func (v NullableUpdateIssuesRequestOneOf1Ticket) Get() *UpdateIssuesRequestOneOf1Ticket {
	return v.value
}

func (v *NullableUpdateIssuesRequestOneOf1Ticket) Set(val *UpdateIssuesRequestOneOf1Ticket) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIssuesRequestOneOf1Ticket) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIssuesRequestOneOf1Ticket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIssuesRequestOneOf1Ticket(val *UpdateIssuesRequestOneOf1Ticket) *NullableUpdateIssuesRequestOneOf1Ticket {
	return &NullableUpdateIssuesRequestOneOf1Ticket{value: val, isSet: true}
}

func (v NullableUpdateIssuesRequestOneOf1Ticket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIssuesRequestOneOf1Ticket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


