/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateIssuesRequest - struct for UpdateIssuesRequest
type UpdateIssuesRequest struct {
	UpdateIssuesRequestOneOf *UpdateIssuesRequestOneOf
	UpdateIssuesRequestOneOf1 *UpdateIssuesRequestOneOf1
	UpdateIssuesRequestOneOf2 *UpdateIssuesRequestOneOf2
	UpdateIssuesRequestOneOf3 *UpdateIssuesRequestOneOf3
	UpdateIssuesRequestOneOf4 *UpdateIssuesRequestOneOf4
}

// UpdateIssuesRequestOneOfAsUpdateIssuesRequest is a convenience function that returns UpdateIssuesRequestOneOf wrapped in UpdateIssuesRequest
func UpdateIssuesRequestOneOfAsUpdateIssuesRequest(v *UpdateIssuesRequestOneOf) UpdateIssuesRequest {
	return UpdateIssuesRequest{
		UpdateIssuesRequestOneOf: v,
	}
}

// UpdateIssuesRequestOneOf1AsUpdateIssuesRequest is a convenience function that returns UpdateIssuesRequestOneOf1 wrapped in UpdateIssuesRequest
func UpdateIssuesRequestOneOf1AsUpdateIssuesRequest(v *UpdateIssuesRequestOneOf1) UpdateIssuesRequest {
	return UpdateIssuesRequest{
		UpdateIssuesRequestOneOf1: v,
	}
}

// UpdateIssuesRequestOneOf2AsUpdateIssuesRequest is a convenience function that returns UpdateIssuesRequestOneOf2 wrapped in UpdateIssuesRequest
func UpdateIssuesRequestOneOf2AsUpdateIssuesRequest(v *UpdateIssuesRequestOneOf2) UpdateIssuesRequest {
	return UpdateIssuesRequest{
		UpdateIssuesRequestOneOf2: v,
	}
}

// UpdateIssuesRequestOneOf3AsUpdateIssuesRequest is a convenience function that returns UpdateIssuesRequestOneOf3 wrapped in UpdateIssuesRequest
func UpdateIssuesRequestOneOf3AsUpdateIssuesRequest(v *UpdateIssuesRequestOneOf3) UpdateIssuesRequest {
	return UpdateIssuesRequest{
		UpdateIssuesRequestOneOf3: v,
	}
}

// UpdateIssuesRequestOneOf4AsUpdateIssuesRequest is a convenience function that returns UpdateIssuesRequestOneOf4 wrapped in UpdateIssuesRequest
func UpdateIssuesRequestOneOf4AsUpdateIssuesRequest(v *UpdateIssuesRequestOneOf4) UpdateIssuesRequest {
	return UpdateIssuesRequest{
		UpdateIssuesRequestOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateIssuesRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateIssuesRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf)
	if err == nil {
		jsonUpdateIssuesRequestOneOf, _ := json.Marshal(dst.UpdateIssuesRequestOneOf)
		if string(jsonUpdateIssuesRequestOneOf) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf); err != nil {
				dst.UpdateIssuesRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf = nil
	}

	// try to unmarshal data into UpdateIssuesRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf1)
	if err == nil {
		jsonUpdateIssuesRequestOneOf1, _ := json.Marshal(dst.UpdateIssuesRequestOneOf1)
		if string(jsonUpdateIssuesRequestOneOf1) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf1); err != nil {
				dst.UpdateIssuesRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf1 = nil
	}

	// try to unmarshal data into UpdateIssuesRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf2)
	if err == nil {
		jsonUpdateIssuesRequestOneOf2, _ := json.Marshal(dst.UpdateIssuesRequestOneOf2)
		if string(jsonUpdateIssuesRequestOneOf2) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf2); err != nil {
				dst.UpdateIssuesRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf2 = nil
	}

	// try to unmarshal data into UpdateIssuesRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf3)
	if err == nil {
		jsonUpdateIssuesRequestOneOf3, _ := json.Marshal(dst.UpdateIssuesRequestOneOf3)
		if string(jsonUpdateIssuesRequestOneOf3) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf3); err != nil {
				dst.UpdateIssuesRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf3 = nil
	}

	// try to unmarshal data into UpdateIssuesRequestOneOf4
	err = newStrictDecoder(data).Decode(&dst.UpdateIssuesRequestOneOf4)
	if err == nil {
		jsonUpdateIssuesRequestOneOf4, _ := json.Marshal(dst.UpdateIssuesRequestOneOf4)
		if string(jsonUpdateIssuesRequestOneOf4) == "{}" { // empty struct
			dst.UpdateIssuesRequestOneOf4 = nil
		} else {
			if err = validator.Validate(dst.UpdateIssuesRequestOneOf4); err != nil {
				dst.UpdateIssuesRequestOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateIssuesRequestOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateIssuesRequestOneOf = nil
		dst.UpdateIssuesRequestOneOf1 = nil
		dst.UpdateIssuesRequestOneOf2 = nil
		dst.UpdateIssuesRequestOneOf3 = nil
		dst.UpdateIssuesRequestOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateIssuesRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateIssuesRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateIssuesRequest) MarshalJSON() ([]byte, error) {
	if src.UpdateIssuesRequestOneOf != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf)
	}

	if src.UpdateIssuesRequestOneOf1 != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf1)
	}

	if src.UpdateIssuesRequestOneOf2 != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf2)
	}

	if src.UpdateIssuesRequestOneOf3 != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf3)
	}

	if src.UpdateIssuesRequestOneOf4 != nil {
		return json.Marshal(&src.UpdateIssuesRequestOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateIssuesRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateIssuesRequestOneOf != nil {
		return obj.UpdateIssuesRequestOneOf
	}

	if obj.UpdateIssuesRequestOneOf1 != nil {
		return obj.UpdateIssuesRequestOneOf1
	}

	if obj.UpdateIssuesRequestOneOf2 != nil {
		return obj.UpdateIssuesRequestOneOf2
	}

	if obj.UpdateIssuesRequestOneOf3 != nil {
		return obj.UpdateIssuesRequestOneOf3
	}

	if obj.UpdateIssuesRequestOneOf4 != nil {
		return obj.UpdateIssuesRequestOneOf4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateIssuesRequest) GetActualInstanceValue() (interface{}) {
	if obj.UpdateIssuesRequestOneOf != nil {
		return *obj.UpdateIssuesRequestOneOf
	}

	if obj.UpdateIssuesRequestOneOf1 != nil {
		return *obj.UpdateIssuesRequestOneOf1
	}

	if obj.UpdateIssuesRequestOneOf2 != nil {
		return *obj.UpdateIssuesRequestOneOf2
	}

	if obj.UpdateIssuesRequestOneOf3 != nil {
		return *obj.UpdateIssuesRequestOneOf3
	}

	if obj.UpdateIssuesRequestOneOf4 != nil {
		return *obj.UpdateIssuesRequestOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableUpdateIssuesRequest struct {
	value *UpdateIssuesRequest
	isSet bool
}

func (v NullableUpdateIssuesRequest) Get() *UpdateIssuesRequest {
	return v.value
}

func (v *NullableUpdateIssuesRequest) Set(val *UpdateIssuesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIssuesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIssuesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIssuesRequest(val *UpdateIssuesRequest) *NullableUpdateIssuesRequest {
	return &NullableUpdateIssuesRequest{value: val, isSet: true}
}

func (v NullableUpdateIssuesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIssuesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


