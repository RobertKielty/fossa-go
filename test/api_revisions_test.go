/*
FOSSA API

Testing RevisionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_RevisionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RevisionsAPIService FixPlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.RevisionsAPI.FixPlans(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionsAPIService GetRevisionAttributionEmail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.RevisionsAPI.GetRevisionAttributionEmail(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionsAPIService GetRevisionAttributionJSON", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.RevisionsAPI.GetRevisionAttributionJSON(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionsAPIService NoticeFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.RevisionsAPI.NoticeFiles(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionsAPIService OriginalSbom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		httpRes, err := apiClient.RevisionsAPI.OriginalSbom(context.Background(), locator).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RevisionsAPIService UpdateRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.RevisionsAPI.UpdateRevision(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
