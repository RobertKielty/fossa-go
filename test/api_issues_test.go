/*
FOSSA API

Testing IssuesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_IssuesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IssuesAPIService CreateIssueDispute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var issueId int32

		resp, httpRes, err := apiClient.IssuesAPI.CreateIssueDispute(context.Background(), issueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService DeleteIssueException", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.IssuesAPI.DeleteIssueException(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService DeleteIssueExceptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.DeleteIssueExceptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService DeleteProjectGenerateAttributionSlug", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		httpRes, err := apiClient.IssuesAPI.DeleteProjectGenerateAttributionSlug(context.Background(), locator).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetGlobalIssuesCSV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetGlobalIssuesCSV(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var issueId int32

		resp, httpRes, err := apiClient.IssuesAPI.GetIssue(context.Background(), issueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssueAffectedProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var issueId int32

		resp, httpRes, err := apiClient.IssuesAPI.GetIssueAffectedProjects(context.Background(), issueId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssueCWEs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssueCWEs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssueDiffComparisonSummaries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssueDiffComparisonSummaries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssueExceptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssueExceptions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssuePackageManagers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssuePackageManagers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssueStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssueStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssuesByCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssuesByCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssuesByRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssuesByRevision(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetIssuesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetIssuesByType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetLicenseList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.GetLicenseList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetProjectCSVExportIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.IssuesAPI.GetProjectCSVExportIssues(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetProjectExportIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.IssuesAPI.GetProjectExportIssues(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService GetProjectJSONExportIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.IssuesAPI.GetProjectJSONExportIssues(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssuesAPIService UpdateIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssuesAPI.UpdateIssues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
