/*
FOSSA API

Testing OrganizationSettingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_OrganizationSettingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrganizationSettingsAPIService GetOrganizationAuthenticationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationAuthenticationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationBowerSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationBowerSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationCocoapodsSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationCocoapodsSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationContainerIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationContainerIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationCustomLicenseScanSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationCustomLicenseScanSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationGeneralSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationGeneralSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationGitSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationGitSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationGithubStatusCheckSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationGithubStatusCheckSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationLicensingIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationLicensingIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationMavenSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationMavenSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationNPMSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationNPMSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationNotificationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationNugetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationNugetSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationPipSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationPipSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationProjectPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationProjectPrivacySettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationQualityIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationQualityIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationRubyGemsSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationRubyGemsSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationSecurityIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationSecurityIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationSlackSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationSlackSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService GetOrganizationUpdateHookSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.OrganizationSettingsAPI.GetOrganizationUpdateHookSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationContainerIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationContainerIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationGithubStatusCheckSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationGithubStatusCheckSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationLicensingIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationLicensingIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationNotificationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationProjectPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationProjectPrivacySettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationQualityIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationQualityIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationSecurityIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationSecurityIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PropagateOrganizationUpdateHookSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PropagateOrganizationUpdateHookSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationBowerSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationBowerSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationCocoapodsSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationCocoapodsSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationCustomLicenseScanSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationCustomLicenseScanSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationGitSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationGitSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationMavenSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationMavenSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationNPMSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationNPMSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationNugetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationNugetSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationPipSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationPipSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService PutOrganizationRubyGemsSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.PutOrganizationRubyGemsSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationAuthenticationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationAuthenticationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationContainerIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationContainerIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationGeneralSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationGeneralSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationGithubStatusCheckSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationGithubStatusCheckSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationLicensingIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationLicensingIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationNotificationSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationProjectPrivacySettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationProjectPrivacySettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationQualityIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationQualityIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationSecurityIssueSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationSecurityIssueSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrganizationSettingsAPIService UpdateOrganizationUpdateHookSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.OrganizationSettingsAPI.UpdateOrganizationUpdateHookSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
