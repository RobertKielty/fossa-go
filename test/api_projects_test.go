/*
FOSSA API

Testing ProjectsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_ProjectsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectsAPIService DeleteProjectGenerateAttributionSlug", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		httpRes, err := apiClient.ProjectsAPI.DeleteProjectGenerateAttributionSlug(context.Background(), locator).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService DeleteProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ProjectsAPI.DeleteProjects(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService DeleteReleaseGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ProjectsAPI.DeleteReleaseGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GenerateProjectGenerateAttributionSlug", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.GenerateProjectGenerateAttributionSlug(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjectCSVExportIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjectCSVExportIssues(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjectExportIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjectExportIssues(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjectJSONExportIssues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjectJSONExportIssues(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjectLastPublished", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjectLastPublished(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjectRevisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjectRevisions(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetProjectsSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.GetProjectsSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService GetReleaseGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.GetReleaseGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ListReleaseGroupsForProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.ProjectsAPI.ListReleaseGroupsForProject(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService UpdateProjectsLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.UpdateProjectsLabels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService UpdateProjectsPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.UpdateProjectsPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService UpdateReleaseGroupsPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ProjectsAPI.UpdateReleaseGroupsPolicies(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
