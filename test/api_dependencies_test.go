/*
FOSSA API

Testing DependenciesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_DependenciesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DependenciesAPIService GetProjectDependencies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.DependenciesAPI.GetProjectDependencies(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DependenciesAPIService GetProjectDependencyPackageManagers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locator string

		resp, httpRes, err := apiClient.DependenciesAPI.GetProjectDependencyPackageManagers(context.Background(), locator).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DependenciesAPIService GetReleaseGroupDependencies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectGroupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.DependenciesAPI.GetReleaseGroupDependencies(context.Background(), projectGroupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DependenciesAPIService GetReleaseGroupDependencyPackageManagers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectGroupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.DependenciesAPI.GetReleaseGroupDependencyPackageManagers(context.Background(), projectGroupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DependenciesAPIService GetReleaseGroupDependencyRootProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectGroupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.DependenciesAPI.GetReleaseGroupDependencyRootProjects(context.Background(), projectGroupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
