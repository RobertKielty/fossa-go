/*
FOSSA API

Testing ReleaseGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_ReleaseGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReleaseGroupsAPIService CreateReleaseGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.CreateReleaseGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService CreateReleaseGroupReleases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.CreateReleaseGroupReleases(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService DeleteReleaseGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		httpRes, err := apiClient.ReleaseGroupsAPI.DeleteReleaseGroupById(context.Background(), groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService DeleteReleaseGroupReleaseById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		httpRes, err := apiClient.ReleaseGroupsAPI.DeleteReleaseGroupReleaseById(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService DeprecatedGetReleaseGroupReleases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.DeprecatedGetReleaseGroupReleases(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetAllProjectsInReleaseGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetAllProjectsInReleaseGroup(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetAllReleaseGroupTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetAllReleaseGroupTeams(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupAttributionReportStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupAttributionReportStatus(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupById(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleaseById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleaseById(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleaseLicenses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleaseLicenses(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleaseObligations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleaseObligations(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleaseRevisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleaseRevisions(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleaseScans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleaseScans(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleaseSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleaseSummary(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService GetReleaseGroupReleases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.GetReleaseGroupReleases(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService QueueReleaseGroupAttributionReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var releaseId int32
		var format string

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.QueueReleaseGroupAttributionReport(context.Background(), groupId, releaseId, format).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService UpdateReleaseGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.UpdateReleaseGroupById(context.Background(), groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReleaseGroupsAPIService UpdateReleaseGroupReleaseById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupId int32
		var projectGroupReleaseId int32

		resp, httpRes, err := apiClient.ReleaseGroupsAPI.UpdateReleaseGroupReleaseById(context.Background(), groupId, projectGroupReleaseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
