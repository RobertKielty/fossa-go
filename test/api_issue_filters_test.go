/*
FOSSA API

Testing IssueFiltersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fossa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/RobertKielty/fossa-go"
)

func Test_fossa_IssueFiltersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IssueFiltersAPIService CreateSavedFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssueFiltersAPI.CreateSavedFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueFiltersAPIService DeleteSavedFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId int32

		httpRes, err := apiClient.IssueFiltersAPI.DeleteSavedFilter(context.Background(), filterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueFiltersAPIService GetSavedFilterById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId int32

		resp, httpRes, err := apiClient.IssueFiltersAPI.GetSavedFilterById(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueFiltersAPIService ListSavedFilters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IssueFiltersAPI.ListSavedFilters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IssueFiltersAPIService UpdateSavedFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId int32

		resp, httpRes, err := apiClient.IssueFiltersAPI.UpdateSavedFilter(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
