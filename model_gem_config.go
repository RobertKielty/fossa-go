/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the GemConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GemConfig{}

// GemConfig struct for GemConfig
type GemConfig struct {
	// List of configured Rubygem servers
	Sources []GetOrganizationRubyGemsSettings200ResponseSourcesInner `json:"sources,omitempty"`
}

// NewGemConfig instantiates a new GemConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGemConfig() *GemConfig {
	this := GemConfig{}
	return &this
}

// NewGemConfigWithDefaults instantiates a new GemConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGemConfigWithDefaults() *GemConfig {
	this := GemConfig{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *GemConfig) GetSources() []GetOrganizationRubyGemsSettings200ResponseSourcesInner {
	if o == nil || IsNil(o.Sources) {
		var ret []GetOrganizationRubyGemsSettings200ResponseSourcesInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GemConfig) GetSourcesOk() ([]GetOrganizationRubyGemsSettings200ResponseSourcesInner, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *GemConfig) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []GetOrganizationRubyGemsSettings200ResponseSourcesInner and assigns it to the Sources field.
func (o *GemConfig) SetSources(v []GetOrganizationRubyGemsSettings200ResponseSourcesInner) {
	o.Sources = v
}

func (o GemConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GemConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableGemConfig struct {
	value *GemConfig
	isSet bool
}

func (v NullableGemConfig) Get() *GemConfig {
	return v.value
}

func (v *NullableGemConfig) Set(val *GemConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGemConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGemConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGemConfig(val *GemConfig) *NullableGemConfig {
	return &NullableGemConfig{value: val, isSet: true}
}

func (v NullableGemConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGemConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


