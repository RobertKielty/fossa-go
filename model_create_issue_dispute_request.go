/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the CreateIssueDisputeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIssueDisputeRequest{}

// CreateIssueDisputeRequest struct for CreateIssueDisputeRequest
type CreateIssueDisputeRequest struct {
	// The reason why this issue is being disputed.
	Reason *string `json:"reason,omitempty"`
	// Any additional information that is important for this dispute.
	Comment *string `json:"comment,omitempty"`
}

// NewCreateIssueDisputeRequest instantiates a new CreateIssueDisputeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIssueDisputeRequest() *CreateIssueDisputeRequest {
	this := CreateIssueDisputeRequest{}
	return &this
}

// NewCreateIssueDisputeRequestWithDefaults instantiates a new CreateIssueDisputeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIssueDisputeRequestWithDefaults() *CreateIssueDisputeRequest {
	this := CreateIssueDisputeRequest{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CreateIssueDisputeRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIssueDisputeRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CreateIssueDisputeRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CreateIssueDisputeRequest) SetReason(v string) {
	o.Reason = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CreateIssueDisputeRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIssueDisputeRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CreateIssueDisputeRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CreateIssueDisputeRequest) SetComment(v string) {
	o.Comment = &v
}

func (o CreateIssueDisputeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIssueDisputeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableCreateIssueDisputeRequest struct {
	value *CreateIssueDisputeRequest
	isSet bool
}

func (v NullableCreateIssueDisputeRequest) Get() *CreateIssueDisputeRequest {
	return v.value
}

func (v *NullableCreateIssueDisputeRequest) Set(val *CreateIssueDisputeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIssueDisputeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIssueDisputeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIssueDisputeRequest(val *CreateIssueDisputeRequest) *NullableCreateIssueDisputeRequest {
	return &NullableCreateIssueDisputeRequest{value: val, isSet: true}
}

func (v NullableCreateIssueDisputeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIssueDisputeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


