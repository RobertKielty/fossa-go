/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the UpdateAuthenticationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAuthenticationSettings{}

// UpdateAuthenticationSettings struct for UpdateAuthenticationSettings
type UpdateAuthenticationSettings struct {
	Subdomain *string `json:"subdomain,omitempty"`
	DisableInvite *bool `json:"disableInvite,omitempty"`
}

// NewUpdateAuthenticationSettings instantiates a new UpdateAuthenticationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAuthenticationSettings() *UpdateAuthenticationSettings {
	this := UpdateAuthenticationSettings{}
	return &this
}

// NewUpdateAuthenticationSettingsWithDefaults instantiates a new UpdateAuthenticationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAuthenticationSettingsWithDefaults() *UpdateAuthenticationSettings {
	this := UpdateAuthenticationSettings{}
	return &this
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *UpdateAuthenticationSettings) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAuthenticationSettings) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *UpdateAuthenticationSettings) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *UpdateAuthenticationSettings) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetDisableInvite returns the DisableInvite field value if set, zero value otherwise.
func (o *UpdateAuthenticationSettings) GetDisableInvite() bool {
	if o == nil || IsNil(o.DisableInvite) {
		var ret bool
		return ret
	}
	return *o.DisableInvite
}

// GetDisableInviteOk returns a tuple with the DisableInvite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAuthenticationSettings) GetDisableInviteOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableInvite) {
		return nil, false
	}
	return o.DisableInvite, true
}

// HasDisableInvite returns a boolean if a field has been set.
func (o *UpdateAuthenticationSettings) HasDisableInvite() bool {
	if o != nil && !IsNil(o.DisableInvite) {
		return true
	}

	return false
}

// SetDisableInvite gets a reference to the given bool and assigns it to the DisableInvite field.
func (o *UpdateAuthenticationSettings) SetDisableInvite(v bool) {
	o.DisableInvite = &v
}

func (o UpdateAuthenticationSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAuthenticationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.DisableInvite) {
		toSerialize["disableInvite"] = o.DisableInvite
	}
	return toSerialize, nil
}

type NullableUpdateAuthenticationSettings struct {
	value *UpdateAuthenticationSettings
	isSet bool
}

func (v NullableUpdateAuthenticationSettings) Get() *UpdateAuthenticationSettings {
	return v.value
}

func (v *NullableUpdateAuthenticationSettings) Set(val *UpdateAuthenticationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAuthenticationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAuthenticationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAuthenticationSettings(val *UpdateAuthenticationSettings) *NullableUpdateAuthenticationSettings {
	return &NullableUpdateAuthenticationSettings{value: val, isSet: true}
}

func (v NullableUpdateAuthenticationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAuthenticationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


