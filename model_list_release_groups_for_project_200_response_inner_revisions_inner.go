/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the ListReleaseGroupsForProject200ResponseInnerRevisionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListReleaseGroupsForProject200ResponseInnerRevisionsInner{}

// ListReleaseGroupsForProject200ResponseInnerRevisionsInner struct for ListReleaseGroupsForProject200ResponseInnerRevisionsInner
type ListReleaseGroupsForProject200ResponseInnerRevisionsInner struct {
	RevisionId *string `json:"revisionId,omitempty"`
	Releases []ListReleaseGroupsForProject200ResponseInnerRevisionsInnerReleasesInner `json:"releases,omitempty"`
}

// NewListReleaseGroupsForProject200ResponseInnerRevisionsInner instantiates a new ListReleaseGroupsForProject200ResponseInnerRevisionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListReleaseGroupsForProject200ResponseInnerRevisionsInner() *ListReleaseGroupsForProject200ResponseInnerRevisionsInner {
	this := ListReleaseGroupsForProject200ResponseInnerRevisionsInner{}
	return &this
}

// NewListReleaseGroupsForProject200ResponseInnerRevisionsInnerWithDefaults instantiates a new ListReleaseGroupsForProject200ResponseInnerRevisionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListReleaseGroupsForProject200ResponseInnerRevisionsInnerWithDefaults() *ListReleaseGroupsForProject200ResponseInnerRevisionsInner {
	this := ListReleaseGroupsForProject200ResponseInnerRevisionsInner{}
	return &this
}

// GetRevisionId returns the RevisionId field value if set, zero value otherwise.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) GetRevisionId() string {
	if o == nil || IsNil(o.RevisionId) {
		var ret string
		return ret
	}
	return *o.RevisionId
}

// GetRevisionIdOk returns a tuple with the RevisionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) GetRevisionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RevisionId) {
		return nil, false
	}
	return o.RevisionId, true
}

// HasRevisionId returns a boolean if a field has been set.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) HasRevisionId() bool {
	if o != nil && !IsNil(o.RevisionId) {
		return true
	}

	return false
}

// SetRevisionId gets a reference to the given string and assigns it to the RevisionId field.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) SetRevisionId(v string) {
	o.RevisionId = &v
}

// GetReleases returns the Releases field value if set, zero value otherwise.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) GetReleases() []ListReleaseGroupsForProject200ResponseInnerRevisionsInnerReleasesInner {
	if o == nil || IsNil(o.Releases) {
		var ret []ListReleaseGroupsForProject200ResponseInnerRevisionsInnerReleasesInner
		return ret
	}
	return o.Releases
}

// GetReleasesOk returns a tuple with the Releases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) GetReleasesOk() ([]ListReleaseGroupsForProject200ResponseInnerRevisionsInnerReleasesInner, bool) {
	if o == nil || IsNil(o.Releases) {
		return nil, false
	}
	return o.Releases, true
}

// HasReleases returns a boolean if a field has been set.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) HasReleases() bool {
	if o != nil && !IsNil(o.Releases) {
		return true
	}

	return false
}

// SetReleases gets a reference to the given []ListReleaseGroupsForProject200ResponseInnerRevisionsInnerReleasesInner and assigns it to the Releases field.
func (o *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) SetReleases(v []ListReleaseGroupsForProject200ResponseInnerRevisionsInnerReleasesInner) {
	o.Releases = v
}

func (o ListReleaseGroupsForProject200ResponseInnerRevisionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListReleaseGroupsForProject200ResponseInnerRevisionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RevisionId) {
		toSerialize["revisionId"] = o.RevisionId
	}
	if !IsNil(o.Releases) {
		toSerialize["releases"] = o.Releases
	}
	return toSerialize, nil
}

type NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner struct {
	value *ListReleaseGroupsForProject200ResponseInnerRevisionsInner
	isSet bool
}

func (v NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner) Get() *ListReleaseGroupsForProject200ResponseInnerRevisionsInner {
	return v.value
}

func (v *NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner) Set(val *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListReleaseGroupsForProject200ResponseInnerRevisionsInner(val *ListReleaseGroupsForProject200ResponseInnerRevisionsInner) *NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner {
	return &NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner{value: val, isSet: true}
}

func (v NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListReleaseGroupsForProject200ResponseInnerRevisionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


