/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetIssueCounts200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIssueCounts200Response{}

// GetIssueCounts200Response struct for GetIssueCounts200Response
type GetIssueCounts200Response struct {
	Counts GetIssueCounts200ResponseCounts `json:"counts"`
	TotalProjects int32 `json:"totalProjects"`
	Licensing *GetIssueCounts200ResponseLicensing `json:"licensing,omitempty"`
	Vulnerability *GetIssueCounts200ResponseVulnerability `json:"vulnerability,omitempty"`
	Quality *GetIssueCounts200ResponseQuality `json:"quality,omitempty"`
}

type _GetIssueCounts200Response GetIssueCounts200Response

// NewGetIssueCounts200Response instantiates a new GetIssueCounts200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIssueCounts200Response(counts GetIssueCounts200ResponseCounts, totalProjects int32) *GetIssueCounts200Response {
	this := GetIssueCounts200Response{}
	this.Counts = counts
	this.TotalProjects = totalProjects
	return &this
}

// NewGetIssueCounts200ResponseWithDefaults instantiates a new GetIssueCounts200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIssueCounts200ResponseWithDefaults() *GetIssueCounts200Response {
	this := GetIssueCounts200Response{}
	return &this
}

// GetCounts returns the Counts field value
func (o *GetIssueCounts200Response) GetCounts() GetIssueCounts200ResponseCounts {
	if o == nil {
		var ret GetIssueCounts200ResponseCounts
		return ret
	}

	return o.Counts
}

// GetCountsOk returns a tuple with the Counts field value
// and a boolean to check if the value has been set.
func (o *GetIssueCounts200Response) GetCountsOk() (*GetIssueCounts200ResponseCounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Counts, true
}

// SetCounts sets field value
func (o *GetIssueCounts200Response) SetCounts(v GetIssueCounts200ResponseCounts) {
	o.Counts = v
}

// GetTotalProjects returns the TotalProjects field value
func (o *GetIssueCounts200Response) GetTotalProjects() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalProjects
}

// GetTotalProjectsOk returns a tuple with the TotalProjects field value
// and a boolean to check if the value has been set.
func (o *GetIssueCounts200Response) GetTotalProjectsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalProjects, true
}

// SetTotalProjects sets field value
func (o *GetIssueCounts200Response) SetTotalProjects(v int32) {
	o.TotalProjects = v
}

// GetLicensing returns the Licensing field value if set, zero value otherwise.
func (o *GetIssueCounts200Response) GetLicensing() GetIssueCounts200ResponseLicensing {
	if o == nil || IsNil(o.Licensing) {
		var ret GetIssueCounts200ResponseLicensing
		return ret
	}
	return *o.Licensing
}

// GetLicensingOk returns a tuple with the Licensing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueCounts200Response) GetLicensingOk() (*GetIssueCounts200ResponseLicensing, bool) {
	if o == nil || IsNil(o.Licensing) {
		return nil, false
	}
	return o.Licensing, true
}

// HasLicensing returns a boolean if a field has been set.
func (o *GetIssueCounts200Response) HasLicensing() bool {
	if o != nil && !IsNil(o.Licensing) {
		return true
	}

	return false
}

// SetLicensing gets a reference to the given GetIssueCounts200ResponseLicensing and assigns it to the Licensing field.
func (o *GetIssueCounts200Response) SetLicensing(v GetIssueCounts200ResponseLicensing) {
	o.Licensing = &v
}

// GetVulnerability returns the Vulnerability field value if set, zero value otherwise.
func (o *GetIssueCounts200Response) GetVulnerability() GetIssueCounts200ResponseVulnerability {
	if o == nil || IsNil(o.Vulnerability) {
		var ret GetIssueCounts200ResponseVulnerability
		return ret
	}
	return *o.Vulnerability
}

// GetVulnerabilityOk returns a tuple with the Vulnerability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueCounts200Response) GetVulnerabilityOk() (*GetIssueCounts200ResponseVulnerability, bool) {
	if o == nil || IsNil(o.Vulnerability) {
		return nil, false
	}
	return o.Vulnerability, true
}

// HasVulnerability returns a boolean if a field has been set.
func (o *GetIssueCounts200Response) HasVulnerability() bool {
	if o != nil && !IsNil(o.Vulnerability) {
		return true
	}

	return false
}

// SetVulnerability gets a reference to the given GetIssueCounts200ResponseVulnerability and assigns it to the Vulnerability field.
func (o *GetIssueCounts200Response) SetVulnerability(v GetIssueCounts200ResponseVulnerability) {
	o.Vulnerability = &v
}

// GetQuality returns the Quality field value if set, zero value otherwise.
func (o *GetIssueCounts200Response) GetQuality() GetIssueCounts200ResponseQuality {
	if o == nil || IsNil(o.Quality) {
		var ret GetIssueCounts200ResponseQuality
		return ret
	}
	return *o.Quality
}

// GetQualityOk returns a tuple with the Quality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueCounts200Response) GetQualityOk() (*GetIssueCounts200ResponseQuality, bool) {
	if o == nil || IsNil(o.Quality) {
		return nil, false
	}
	return o.Quality, true
}

// HasQuality returns a boolean if a field has been set.
func (o *GetIssueCounts200Response) HasQuality() bool {
	if o != nil && !IsNil(o.Quality) {
		return true
	}

	return false
}

// SetQuality gets a reference to the given GetIssueCounts200ResponseQuality and assigns it to the Quality field.
func (o *GetIssueCounts200Response) SetQuality(v GetIssueCounts200ResponseQuality) {
	o.Quality = &v
}

func (o GetIssueCounts200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIssueCounts200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["counts"] = o.Counts
	toSerialize["totalProjects"] = o.TotalProjects
	if !IsNil(o.Licensing) {
		toSerialize["licensing"] = o.Licensing
	}
	if !IsNil(o.Vulnerability) {
		toSerialize["vulnerability"] = o.Vulnerability
	}
	if !IsNil(o.Quality) {
		toSerialize["quality"] = o.Quality
	}
	return toSerialize, nil
}

func (o *GetIssueCounts200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"counts",
		"totalProjects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetIssueCounts200Response := _GetIssueCounts200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetIssueCounts200Response)

	if err != nil {
		return err
	}

	*o = GetIssueCounts200Response(varGetIssueCounts200Response)

	return err
}

type NullableGetIssueCounts200Response struct {
	value *GetIssueCounts200Response
	isSet bool
}

func (v NullableGetIssueCounts200Response) Get() *GetIssueCounts200Response {
	return v.value
}

func (v *NullableGetIssueCounts200Response) Set(val *GetIssueCounts200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssueCounts200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssueCounts200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssueCounts200Response(val *GetIssueCounts200Response) *NullableGetIssueCounts200Response {
	return &NullableGetIssueCounts200Response{value: val, isSet: true}
}

func (v NullableGetIssueCounts200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssueCounts200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


