/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"time"
)

// checks if the GetAllUsers200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAllUsers200ResponseInner{}

// GetAllUsers200ResponseInner struct for GetAllUsers200ResponseInner
type GetAllUsers200ResponseInner struct {
	// The user's unique identifier
	Id *int32 `json:"id,omitempty"`
	// The user's username
	Username NullableString `json:"username,omitempty"`
	// The user's email address
	Email NullableString `json:"email,omitempty"`
	// Whether the user's email address has been verified
	EmailVerified NullableBool `json:"email_verified,omitempty"`
	// Whether the user is a demo user
	Demo *bool `json:"demo,omitempty"`
	// Whether the user is a super user
	Super *bool `json:"super,omitempty"`
	// The date the user joined the organization
	Joined NullableTime `json:"joined,omitempty"`
	// The date the user last visited the organization
	LastVisit NullableTime `json:"last_visit,omitempty"`
	// The date the user agreed to the organization's terms
	TermsAgreed NullableTime `json:"terms_agreed,omitempty"`
	// The user's full name
	FullName NullableString `json:"full_name,omitempty"`
	// The user's phone number
	Phone NullableString `json:"phone,omitempty"`
	// The user's role in the organization
	Role NullableString `json:"role,omitempty"`
	// The organization the user belongs to
	OrganizationId *int32 `json:"organizationId,omitempty"`
	// Whether the user is SSO only
	SsoOnly *bool `json:"sso_only,omitempty"`
	// Whether the user is enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Whether the user has set a password
	HasSetPassword NullableBool `json:"has_set_password,omitempty"`
	// Whether the user is an install admin
	InstallAdmin NullableBool `json:"install_admin,omitempty"`
	// The date the user was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The date the user was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	UserRole *GetAllUsers200ResponseInnerUserRole `json:"userRole,omitempty"`
	Tokens []GetAllUsers200ResponseInnerTokensInner `json:"tokens,omitempty"`
	TeamUsers []GetAllUsers200ResponseInnerTeamUsersInner `json:"teamUsers,omitempty"`
	Organization *GetAllUsers200ResponseInnerOrganization `json:"organization,omitempty"`
	Github *GetAllUsers200ResponseInnerGithub `json:"github,omitempty"`
	BitbucketCloud *GetAllUsers200ResponseInnerBitbucketCloud `json:"bitbucketCloud,omitempty"`
}

// NewGetAllUsers200ResponseInner instantiates a new GetAllUsers200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAllUsers200ResponseInner() *GetAllUsers200ResponseInner {
	this := GetAllUsers200ResponseInner{}
	return &this
}

// NewGetAllUsers200ResponseInnerWithDefaults instantiates a new GetAllUsers200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAllUsers200ResponseInnerWithDefaults() *GetAllUsers200ResponseInner {
	this := GetAllUsers200ResponseInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetAllUsers200ResponseInner) SetId(v int32) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *GetAllUsers200ResponseInner) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetUsername() {
	o.Username.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *GetAllUsers200ResponseInner) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetEmail() {
	o.Email.Unset()
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified.Get()) {
		var ret bool
		return ret
	}
	return *o.EmailVerified.Get()
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailVerified.Get(), o.EmailVerified.IsSet()
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasEmailVerified() bool {
	if o != nil && o.EmailVerified.IsSet() {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given NullableBool and assigns it to the EmailVerified field.
func (o *GetAllUsers200ResponseInner) SetEmailVerified(v bool) {
	o.EmailVerified.Set(&v)
}
// SetEmailVerifiedNil sets the value for EmailVerified to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetEmailVerifiedNil() {
	o.EmailVerified.Set(nil)
}

// UnsetEmailVerified ensures that no value is present for EmailVerified, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetEmailVerified() {
	o.EmailVerified.Unset()
}

// GetDemo returns the Demo field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetDemo() bool {
	if o == nil || IsNil(o.Demo) {
		var ret bool
		return ret
	}
	return *o.Demo
}

// GetDemoOk returns a tuple with the Demo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetDemoOk() (*bool, bool) {
	if o == nil || IsNil(o.Demo) {
		return nil, false
	}
	return o.Demo, true
}

// HasDemo returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasDemo() bool {
	if o != nil && !IsNil(o.Demo) {
		return true
	}

	return false
}

// SetDemo gets a reference to the given bool and assigns it to the Demo field.
func (o *GetAllUsers200ResponseInner) SetDemo(v bool) {
	o.Demo = &v
}

// GetSuper returns the Super field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetSuper() bool {
	if o == nil || IsNil(o.Super) {
		var ret bool
		return ret
	}
	return *o.Super
}

// GetSuperOk returns a tuple with the Super field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetSuperOk() (*bool, bool) {
	if o == nil || IsNil(o.Super) {
		return nil, false
	}
	return o.Super, true
}

// HasSuper returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasSuper() bool {
	if o != nil && !IsNil(o.Super) {
		return true
	}

	return false
}

// SetSuper gets a reference to the given bool and assigns it to the Super field.
func (o *GetAllUsers200ResponseInner) SetSuper(v bool) {
	o.Super = &v
}

// GetJoined returns the Joined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetJoined() time.Time {
	if o == nil || IsNil(o.Joined.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Joined.Get()
}

// GetJoinedOk returns a tuple with the Joined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetJoinedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Joined.Get(), o.Joined.IsSet()
}

// HasJoined returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasJoined() bool {
	if o != nil && o.Joined.IsSet() {
		return true
	}

	return false
}

// SetJoined gets a reference to the given NullableTime and assigns it to the Joined field.
func (o *GetAllUsers200ResponseInner) SetJoined(v time.Time) {
	o.Joined.Set(&v)
}
// SetJoinedNil sets the value for Joined to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetJoinedNil() {
	o.Joined.Set(nil)
}

// UnsetJoined ensures that no value is present for Joined, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetJoined() {
	o.Joined.Unset()
}

// GetLastVisit returns the LastVisit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetLastVisit() time.Time {
	if o == nil || IsNil(o.LastVisit.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastVisit.Get()
}

// GetLastVisitOk returns a tuple with the LastVisit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetLastVisitOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastVisit.Get(), o.LastVisit.IsSet()
}

// HasLastVisit returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasLastVisit() bool {
	if o != nil && o.LastVisit.IsSet() {
		return true
	}

	return false
}

// SetLastVisit gets a reference to the given NullableTime and assigns it to the LastVisit field.
func (o *GetAllUsers200ResponseInner) SetLastVisit(v time.Time) {
	o.LastVisit.Set(&v)
}
// SetLastVisitNil sets the value for LastVisit to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetLastVisitNil() {
	o.LastVisit.Set(nil)
}

// UnsetLastVisit ensures that no value is present for LastVisit, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetLastVisit() {
	o.LastVisit.Unset()
}

// GetTermsAgreed returns the TermsAgreed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetTermsAgreed() time.Time {
	if o == nil || IsNil(o.TermsAgreed.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TermsAgreed.Get()
}

// GetTermsAgreedOk returns a tuple with the TermsAgreed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetTermsAgreedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TermsAgreed.Get(), o.TermsAgreed.IsSet()
}

// HasTermsAgreed returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasTermsAgreed() bool {
	if o != nil && o.TermsAgreed.IsSet() {
		return true
	}

	return false
}

// SetTermsAgreed gets a reference to the given NullableTime and assigns it to the TermsAgreed field.
func (o *GetAllUsers200ResponseInner) SetTermsAgreed(v time.Time) {
	o.TermsAgreed.Set(&v)
}
// SetTermsAgreedNil sets the value for TermsAgreed to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetTermsAgreedNil() {
	o.TermsAgreed.Set(nil)
}

// UnsetTermsAgreed ensures that no value is present for TermsAgreed, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetTermsAgreed() {
	o.TermsAgreed.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetFullName() string {
	if o == nil || IsNil(o.FullName.Get()) {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *GetAllUsers200ResponseInner) SetFullName(v string) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetFullName() {
	o.FullName.Unset()
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetPhone() string {
	if o == nil || IsNil(o.Phone.Get()) {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasPhone() bool {
	if o != nil && o.Phone.IsSet() {
		return true
	}

	return false
}

// SetPhone gets a reference to the given NullableString and assigns it to the Phone field.
func (o *GetAllUsers200ResponseInner) SetPhone(v string) {
	o.Phone.Set(&v)
}
// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetPhone() {
	o.Phone.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *GetAllUsers200ResponseInner) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetRole() {
	o.Role.Unset()
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetOrganizationId() int32 {
	if o == nil || IsNil(o.OrganizationId) {
		var ret int32
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetOrganizationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given int32 and assigns it to the OrganizationId field.
func (o *GetAllUsers200ResponseInner) SetOrganizationId(v int32) {
	o.OrganizationId = &v
}

// GetSsoOnly returns the SsoOnly field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetSsoOnly() bool {
	if o == nil || IsNil(o.SsoOnly) {
		var ret bool
		return ret
	}
	return *o.SsoOnly
}

// GetSsoOnlyOk returns a tuple with the SsoOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetSsoOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SsoOnly) {
		return nil, false
	}
	return o.SsoOnly, true
}

// HasSsoOnly returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasSsoOnly() bool {
	if o != nil && !IsNil(o.SsoOnly) {
		return true
	}

	return false
}

// SetSsoOnly gets a reference to the given bool and assigns it to the SsoOnly field.
func (o *GetAllUsers200ResponseInner) SetSsoOnly(v bool) {
	o.SsoOnly = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *GetAllUsers200ResponseInner) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHasSetPassword returns the HasSetPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetHasSetPassword() bool {
	if o == nil || IsNil(o.HasSetPassword.Get()) {
		var ret bool
		return ret
	}
	return *o.HasSetPassword.Get()
}

// GetHasSetPasswordOk returns a tuple with the HasSetPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetHasSetPasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasSetPassword.Get(), o.HasSetPassword.IsSet()
}

// HasHasSetPassword returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasHasSetPassword() bool {
	if o != nil && o.HasSetPassword.IsSet() {
		return true
	}

	return false
}

// SetHasSetPassword gets a reference to the given NullableBool and assigns it to the HasSetPassword field.
func (o *GetAllUsers200ResponseInner) SetHasSetPassword(v bool) {
	o.HasSetPassword.Set(&v)
}
// SetHasSetPasswordNil sets the value for HasSetPassword to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetHasSetPasswordNil() {
	o.HasSetPassword.Set(nil)
}

// UnsetHasSetPassword ensures that no value is present for HasSetPassword, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetHasSetPassword() {
	o.HasSetPassword.Unset()
}

// GetInstallAdmin returns the InstallAdmin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetAllUsers200ResponseInner) GetInstallAdmin() bool {
	if o == nil || IsNil(o.InstallAdmin.Get()) {
		var ret bool
		return ret
	}
	return *o.InstallAdmin.Get()
}

// GetInstallAdminOk returns a tuple with the InstallAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetAllUsers200ResponseInner) GetInstallAdminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallAdmin.Get(), o.InstallAdmin.IsSet()
}

// HasInstallAdmin returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasInstallAdmin() bool {
	if o != nil && o.InstallAdmin.IsSet() {
		return true
	}

	return false
}

// SetInstallAdmin gets a reference to the given NullableBool and assigns it to the InstallAdmin field.
func (o *GetAllUsers200ResponseInner) SetInstallAdmin(v bool) {
	o.InstallAdmin.Set(&v)
}
// SetInstallAdminNil sets the value for InstallAdmin to be an explicit nil
func (o *GetAllUsers200ResponseInner) SetInstallAdminNil() {
	o.InstallAdmin.Set(nil)
}

// UnsetInstallAdmin ensures that no value is present for InstallAdmin, not even an explicit nil
func (o *GetAllUsers200ResponseInner) UnsetInstallAdmin() {
	o.InstallAdmin.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GetAllUsers200ResponseInner) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *GetAllUsers200ResponseInner) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetUserRole() GetAllUsers200ResponseInnerUserRole {
	if o == nil || IsNil(o.UserRole) {
		var ret GetAllUsers200ResponseInnerUserRole
		return ret
	}
	return *o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetUserRoleOk() (*GetAllUsers200ResponseInnerUserRole, bool) {
	if o == nil || IsNil(o.UserRole) {
		return nil, false
	}
	return o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasUserRole() bool {
	if o != nil && !IsNil(o.UserRole) {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given GetAllUsers200ResponseInnerUserRole and assigns it to the UserRole field.
func (o *GetAllUsers200ResponseInner) SetUserRole(v GetAllUsers200ResponseInnerUserRole) {
	o.UserRole = &v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetTokens() []GetAllUsers200ResponseInnerTokensInner {
	if o == nil || IsNil(o.Tokens) {
		var ret []GetAllUsers200ResponseInnerTokensInner
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetTokensOk() ([]GetAllUsers200ResponseInnerTokensInner, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []GetAllUsers200ResponseInnerTokensInner and assigns it to the Tokens field.
func (o *GetAllUsers200ResponseInner) SetTokens(v []GetAllUsers200ResponseInnerTokensInner) {
	o.Tokens = v
}

// GetTeamUsers returns the TeamUsers field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetTeamUsers() []GetAllUsers200ResponseInnerTeamUsersInner {
	if o == nil || IsNil(o.TeamUsers) {
		var ret []GetAllUsers200ResponseInnerTeamUsersInner
		return ret
	}
	return o.TeamUsers
}

// GetTeamUsersOk returns a tuple with the TeamUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetTeamUsersOk() ([]GetAllUsers200ResponseInnerTeamUsersInner, bool) {
	if o == nil || IsNil(o.TeamUsers) {
		return nil, false
	}
	return o.TeamUsers, true
}

// HasTeamUsers returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasTeamUsers() bool {
	if o != nil && !IsNil(o.TeamUsers) {
		return true
	}

	return false
}

// SetTeamUsers gets a reference to the given []GetAllUsers200ResponseInnerTeamUsersInner and assigns it to the TeamUsers field.
func (o *GetAllUsers200ResponseInner) SetTeamUsers(v []GetAllUsers200ResponseInnerTeamUsersInner) {
	o.TeamUsers = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetOrganization() GetAllUsers200ResponseInnerOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret GetAllUsers200ResponseInnerOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetOrganizationOk() (*GetAllUsers200ResponseInnerOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given GetAllUsers200ResponseInnerOrganization and assigns it to the Organization field.
func (o *GetAllUsers200ResponseInner) SetOrganization(v GetAllUsers200ResponseInnerOrganization) {
	o.Organization = &v
}

// GetGithub returns the Github field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetGithub() GetAllUsers200ResponseInnerGithub {
	if o == nil || IsNil(o.Github) {
		var ret GetAllUsers200ResponseInnerGithub
		return ret
	}
	return *o.Github
}

// GetGithubOk returns a tuple with the Github field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetGithubOk() (*GetAllUsers200ResponseInnerGithub, bool) {
	if o == nil || IsNil(o.Github) {
		return nil, false
	}
	return o.Github, true
}

// HasGithub returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasGithub() bool {
	if o != nil && !IsNil(o.Github) {
		return true
	}

	return false
}

// SetGithub gets a reference to the given GetAllUsers200ResponseInnerGithub and assigns it to the Github field.
func (o *GetAllUsers200ResponseInner) SetGithub(v GetAllUsers200ResponseInnerGithub) {
	o.Github = &v
}

// GetBitbucketCloud returns the BitbucketCloud field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInner) GetBitbucketCloud() GetAllUsers200ResponseInnerBitbucketCloud {
	if o == nil || IsNil(o.BitbucketCloud) {
		var ret GetAllUsers200ResponseInnerBitbucketCloud
		return ret
	}
	return *o.BitbucketCloud
}

// GetBitbucketCloudOk returns a tuple with the BitbucketCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInner) GetBitbucketCloudOk() (*GetAllUsers200ResponseInnerBitbucketCloud, bool) {
	if o == nil || IsNil(o.BitbucketCloud) {
		return nil, false
	}
	return o.BitbucketCloud, true
}

// HasBitbucketCloud returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInner) HasBitbucketCloud() bool {
	if o != nil && !IsNil(o.BitbucketCloud) {
		return true
	}

	return false
}

// SetBitbucketCloud gets a reference to the given GetAllUsers200ResponseInnerBitbucketCloud and assigns it to the BitbucketCloud field.
func (o *GetAllUsers200ResponseInner) SetBitbucketCloud(v GetAllUsers200ResponseInnerBitbucketCloud) {
	o.BitbucketCloud = &v
}

func (o GetAllUsers200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAllUsers200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.EmailVerified.IsSet() {
		toSerialize["email_verified"] = o.EmailVerified.Get()
	}
	if !IsNil(o.Demo) {
		toSerialize["demo"] = o.Demo
	}
	if !IsNil(o.Super) {
		toSerialize["super"] = o.Super
	}
	if o.Joined.IsSet() {
		toSerialize["joined"] = o.Joined.Get()
	}
	if o.LastVisit.IsSet() {
		toSerialize["last_visit"] = o.LastVisit.Get()
	}
	if o.TermsAgreed.IsSet() {
		toSerialize["terms_agreed"] = o.TermsAgreed.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["full_name"] = o.FullName.Get()
	}
	if o.Phone.IsSet() {
		toSerialize["phone"] = o.Phone.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.SsoOnly) {
		toSerialize["sso_only"] = o.SsoOnly
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.HasSetPassword.IsSet() {
		toSerialize["has_set_password"] = o.HasSetPassword.Get()
	}
	if o.InstallAdmin.IsSet() {
		toSerialize["install_admin"] = o.InstallAdmin.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UserRole) {
		toSerialize["userRole"] = o.UserRole
	}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	if !IsNil(o.TeamUsers) {
		toSerialize["teamUsers"] = o.TeamUsers
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Github) {
		toSerialize["github"] = o.Github
	}
	if !IsNil(o.BitbucketCloud) {
		toSerialize["bitbucketCloud"] = o.BitbucketCloud
	}
	return toSerialize, nil
}

type NullableGetAllUsers200ResponseInner struct {
	value *GetAllUsers200ResponseInner
	isSet bool
}

func (v NullableGetAllUsers200ResponseInner) Get() *GetAllUsers200ResponseInner {
	return v.value
}

func (v *NullableGetAllUsers200ResponseInner) Set(val *GetAllUsers200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllUsers200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllUsers200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllUsers200ResponseInner(val *GetAllUsers200ResponseInner) *NullableGetAllUsers200ResponseInner {
	return &NullableGetAllUsers200ResponseInner{value: val, isSet: true}
}

func (v NullableGetAllUsers200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllUsers200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


