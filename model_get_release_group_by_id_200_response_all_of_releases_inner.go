/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"time"
)

// checks if the GetReleaseGroupById200ResponseAllOfReleasesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetReleaseGroupById200ResponseAllOfReleasesInner{}

// GetReleaseGroupById200ResponseAllOfReleasesInner struct for GetReleaseGroupById200ResponseAllOfReleasesInner
type GetReleaseGroupById200ResponseAllOfReleasesInner struct {
	// Release ID
	Id *int32 `json:"id,omitempty"`
	// Release title/version
	Title *string `json:"title,omitempty"`
	// The release group which this belongs to
	ProjectGroupId *int32 `json:"projectGroupId,omitempty"`
	// The count of dependencies in this release
	DependencyCount *int32 `json:"dependency_count,omitempty"`
	// The count of licenses in this release
	LicenseCount *int32 `json:"license_count,omitempty"`
	// The number of licensing issues in this release
	UnresolvedLicensingIssueCount *int32 `json:"unresolved_licensing_issue_count,omitempty"`
	// The number of security issues in this release
	UnresolvedSecurityIssueCount *int32 `json:"unresolved_security_issue_count,omitempty"`
	// The number of quality issues in this release
	UnresolvedQualityIssueCount *int32 `json:"unresolved_quality_issue_count,omitempty"`
	// If this release has been published on an SBOM portal
	PublishedOnPortal *string `json:"publishedOnPortal,omitempty"`
	// When the release was published to the portal
	PublishedAt *time.Time `json:"publishedAt,omitempty"`
	// Path to the SBOM report for this release
	ReportPath *string `json:"reportPath,omitempty"`
	// List of published license IDs
	PublishedLicenses []string `json:"publishedLicenses,omitempty"`
}

// NewGetReleaseGroupById200ResponseAllOfReleasesInner instantiates a new GetReleaseGroupById200ResponseAllOfReleasesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetReleaseGroupById200ResponseAllOfReleasesInner() *GetReleaseGroupById200ResponseAllOfReleasesInner {
	this := GetReleaseGroupById200ResponseAllOfReleasesInner{}
	return &this
}

// NewGetReleaseGroupById200ResponseAllOfReleasesInnerWithDefaults instantiates a new GetReleaseGroupById200ResponseAllOfReleasesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetReleaseGroupById200ResponseAllOfReleasesInnerWithDefaults() *GetReleaseGroupById200ResponseAllOfReleasesInner {
	this := GetReleaseGroupById200ResponseAllOfReleasesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetTitle(v string) {
	o.Title = &v
}

// GetProjectGroupId returns the ProjectGroupId field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetProjectGroupId() int32 {
	if o == nil || IsNil(o.ProjectGroupId) {
		var ret int32
		return ret
	}
	return *o.ProjectGroupId
}

// GetProjectGroupIdOk returns a tuple with the ProjectGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetProjectGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectGroupId) {
		return nil, false
	}
	return o.ProjectGroupId, true
}

// HasProjectGroupId returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasProjectGroupId() bool {
	if o != nil && !IsNil(o.ProjectGroupId) {
		return true
	}

	return false
}

// SetProjectGroupId gets a reference to the given int32 and assigns it to the ProjectGroupId field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetProjectGroupId(v int32) {
	o.ProjectGroupId = &v
}

// GetDependencyCount returns the DependencyCount field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetDependencyCount() int32 {
	if o == nil || IsNil(o.DependencyCount) {
		var ret int32
		return ret
	}
	return *o.DependencyCount
}

// GetDependencyCountOk returns a tuple with the DependencyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetDependencyCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DependencyCount) {
		return nil, false
	}
	return o.DependencyCount, true
}

// HasDependencyCount returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasDependencyCount() bool {
	if o != nil && !IsNil(o.DependencyCount) {
		return true
	}

	return false
}

// SetDependencyCount gets a reference to the given int32 and assigns it to the DependencyCount field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetDependencyCount(v int32) {
	o.DependencyCount = &v
}

// GetLicenseCount returns the LicenseCount field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetLicenseCount() int32 {
	if o == nil || IsNil(o.LicenseCount) {
		var ret int32
		return ret
	}
	return *o.LicenseCount
}

// GetLicenseCountOk returns a tuple with the LicenseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetLicenseCountOk() (*int32, bool) {
	if o == nil || IsNil(o.LicenseCount) {
		return nil, false
	}
	return o.LicenseCount, true
}

// HasLicenseCount returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasLicenseCount() bool {
	if o != nil && !IsNil(o.LicenseCount) {
		return true
	}

	return false
}

// SetLicenseCount gets a reference to the given int32 and assigns it to the LicenseCount field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetLicenseCount(v int32) {
	o.LicenseCount = &v
}

// GetUnresolvedLicensingIssueCount returns the UnresolvedLicensingIssueCount field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetUnresolvedLicensingIssueCount() int32 {
	if o == nil || IsNil(o.UnresolvedLicensingIssueCount) {
		var ret int32
		return ret
	}
	return *o.UnresolvedLicensingIssueCount
}

// GetUnresolvedLicensingIssueCountOk returns a tuple with the UnresolvedLicensingIssueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetUnresolvedLicensingIssueCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnresolvedLicensingIssueCount) {
		return nil, false
	}
	return o.UnresolvedLicensingIssueCount, true
}

// HasUnresolvedLicensingIssueCount returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasUnresolvedLicensingIssueCount() bool {
	if o != nil && !IsNil(o.UnresolvedLicensingIssueCount) {
		return true
	}

	return false
}

// SetUnresolvedLicensingIssueCount gets a reference to the given int32 and assigns it to the UnresolvedLicensingIssueCount field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetUnresolvedLicensingIssueCount(v int32) {
	o.UnresolvedLicensingIssueCount = &v
}

// GetUnresolvedSecurityIssueCount returns the UnresolvedSecurityIssueCount field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetUnresolvedSecurityIssueCount() int32 {
	if o == nil || IsNil(o.UnresolvedSecurityIssueCount) {
		var ret int32
		return ret
	}
	return *o.UnresolvedSecurityIssueCount
}

// GetUnresolvedSecurityIssueCountOk returns a tuple with the UnresolvedSecurityIssueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetUnresolvedSecurityIssueCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnresolvedSecurityIssueCount) {
		return nil, false
	}
	return o.UnresolvedSecurityIssueCount, true
}

// HasUnresolvedSecurityIssueCount returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasUnresolvedSecurityIssueCount() bool {
	if o != nil && !IsNil(o.UnresolvedSecurityIssueCount) {
		return true
	}

	return false
}

// SetUnresolvedSecurityIssueCount gets a reference to the given int32 and assigns it to the UnresolvedSecurityIssueCount field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetUnresolvedSecurityIssueCount(v int32) {
	o.UnresolvedSecurityIssueCount = &v
}

// GetUnresolvedQualityIssueCount returns the UnresolvedQualityIssueCount field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetUnresolvedQualityIssueCount() int32 {
	if o == nil || IsNil(o.UnresolvedQualityIssueCount) {
		var ret int32
		return ret
	}
	return *o.UnresolvedQualityIssueCount
}

// GetUnresolvedQualityIssueCountOk returns a tuple with the UnresolvedQualityIssueCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetUnresolvedQualityIssueCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UnresolvedQualityIssueCount) {
		return nil, false
	}
	return o.UnresolvedQualityIssueCount, true
}

// HasUnresolvedQualityIssueCount returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasUnresolvedQualityIssueCount() bool {
	if o != nil && !IsNil(o.UnresolvedQualityIssueCount) {
		return true
	}

	return false
}

// SetUnresolvedQualityIssueCount gets a reference to the given int32 and assigns it to the UnresolvedQualityIssueCount field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetUnresolvedQualityIssueCount(v int32) {
	o.UnresolvedQualityIssueCount = &v
}

// GetPublishedOnPortal returns the PublishedOnPortal field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetPublishedOnPortal() string {
	if o == nil || IsNil(o.PublishedOnPortal) {
		var ret string
		return ret
	}
	return *o.PublishedOnPortal
}

// GetPublishedOnPortalOk returns a tuple with the PublishedOnPortal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetPublishedOnPortalOk() (*string, bool) {
	if o == nil || IsNil(o.PublishedOnPortal) {
		return nil, false
	}
	return o.PublishedOnPortal, true
}

// HasPublishedOnPortal returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasPublishedOnPortal() bool {
	if o != nil && !IsNil(o.PublishedOnPortal) {
		return true
	}

	return false
}

// SetPublishedOnPortal gets a reference to the given string and assigns it to the PublishedOnPortal field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetPublishedOnPortal(v string) {
	o.PublishedOnPortal = &v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetPublishedAt() time.Time {
	if o == nil || IsNil(o.PublishedAt) {
		var ret time.Time
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PublishedAt) {
		return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasPublishedAt() bool {
	if o != nil && !IsNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given time.Time and assigns it to the PublishedAt field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetPublishedAt(v time.Time) {
	o.PublishedAt = &v
}

// GetReportPath returns the ReportPath field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetReportPath() string {
	if o == nil || IsNil(o.ReportPath) {
		var ret string
		return ret
	}
	return *o.ReportPath
}

// GetReportPathOk returns a tuple with the ReportPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetReportPathOk() (*string, bool) {
	if o == nil || IsNil(o.ReportPath) {
		return nil, false
	}
	return o.ReportPath, true
}

// HasReportPath returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasReportPath() bool {
	if o != nil && !IsNil(o.ReportPath) {
		return true
	}

	return false
}

// SetReportPath gets a reference to the given string and assigns it to the ReportPath field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetReportPath(v string) {
	o.ReportPath = &v
}

// GetPublishedLicenses returns the PublishedLicenses field value if set, zero value otherwise.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetPublishedLicenses() []string {
	if o == nil || IsNil(o.PublishedLicenses) {
		var ret []string
		return ret
	}
	return o.PublishedLicenses
}

// GetPublishedLicensesOk returns a tuple with the PublishedLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) GetPublishedLicensesOk() ([]string, bool) {
	if o == nil || IsNil(o.PublishedLicenses) {
		return nil, false
	}
	return o.PublishedLicenses, true
}

// HasPublishedLicenses returns a boolean if a field has been set.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) HasPublishedLicenses() bool {
	if o != nil && !IsNil(o.PublishedLicenses) {
		return true
	}

	return false
}

// SetPublishedLicenses gets a reference to the given []string and assigns it to the PublishedLicenses field.
func (o *GetReleaseGroupById200ResponseAllOfReleasesInner) SetPublishedLicenses(v []string) {
	o.PublishedLicenses = v
}

func (o GetReleaseGroupById200ResponseAllOfReleasesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetReleaseGroupById200ResponseAllOfReleasesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ProjectGroupId) {
		toSerialize["projectGroupId"] = o.ProjectGroupId
	}
	if !IsNil(o.DependencyCount) {
		toSerialize["dependency_count"] = o.DependencyCount
	}
	if !IsNil(o.LicenseCount) {
		toSerialize["license_count"] = o.LicenseCount
	}
	if !IsNil(o.UnresolvedLicensingIssueCount) {
		toSerialize["unresolved_licensing_issue_count"] = o.UnresolvedLicensingIssueCount
	}
	if !IsNil(o.UnresolvedSecurityIssueCount) {
		toSerialize["unresolved_security_issue_count"] = o.UnresolvedSecurityIssueCount
	}
	if !IsNil(o.UnresolvedQualityIssueCount) {
		toSerialize["unresolved_quality_issue_count"] = o.UnresolvedQualityIssueCount
	}
	if !IsNil(o.PublishedOnPortal) {
		toSerialize["publishedOnPortal"] = o.PublishedOnPortal
	}
	if !IsNil(o.PublishedAt) {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	if !IsNil(o.ReportPath) {
		toSerialize["reportPath"] = o.ReportPath
	}
	if !IsNil(o.PublishedLicenses) {
		toSerialize["publishedLicenses"] = o.PublishedLicenses
	}
	return toSerialize, nil
}

type NullableGetReleaseGroupById200ResponseAllOfReleasesInner struct {
	value *GetReleaseGroupById200ResponseAllOfReleasesInner
	isSet bool
}

func (v NullableGetReleaseGroupById200ResponseAllOfReleasesInner) Get() *GetReleaseGroupById200ResponseAllOfReleasesInner {
	return v.value
}

func (v *NullableGetReleaseGroupById200ResponseAllOfReleasesInner) Set(val *GetReleaseGroupById200ResponseAllOfReleasesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetReleaseGroupById200ResponseAllOfReleasesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetReleaseGroupById200ResponseAllOfReleasesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetReleaseGroupById200ResponseAllOfReleasesInner(val *GetReleaseGroupById200ResponseAllOfReleasesInner) *NullableGetReleaseGroupById200ResponseAllOfReleasesInner {
	return &NullableGetReleaseGroupById200ResponseAllOfReleasesInner{value: val, isSet: true}
}

func (v NullableGetReleaseGroupById200ResponseAllOfReleasesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetReleaseGroupById200ResponseAllOfReleasesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


