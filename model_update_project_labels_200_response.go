/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the UpdateProjectLabels200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectLabels200Response{}

// UpdateProjectLabels200Response struct for UpdateProjectLabels200Response
type UpdateProjectLabels200Response struct {
	// Text ID that uniquely identifies a project
	Locator *string `json:"locator,omitempty"`
	// Name of the project
	Title *string `json:"title,omitempty"`
	Labels []GetOrganizationLabels200ResponseLabelsInner `json:"labels,omitempty"`
}

// NewUpdateProjectLabels200Response instantiates a new UpdateProjectLabels200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectLabels200Response() *UpdateProjectLabels200Response {
	this := UpdateProjectLabels200Response{}
	return &this
}

// NewUpdateProjectLabels200ResponseWithDefaults instantiates a new UpdateProjectLabels200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectLabels200ResponseWithDefaults() *UpdateProjectLabels200Response {
	this := UpdateProjectLabels200Response{}
	return &this
}

// GetLocator returns the Locator field value if set, zero value otherwise.
func (o *UpdateProjectLabels200Response) GetLocator() string {
	if o == nil || IsNil(o.Locator) {
		var ret string
		return ret
	}
	return *o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectLabels200Response) GetLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.Locator) {
		return nil, false
	}
	return o.Locator, true
}

// HasLocator returns a boolean if a field has been set.
func (o *UpdateProjectLabels200Response) HasLocator() bool {
	if o != nil && !IsNil(o.Locator) {
		return true
	}

	return false
}

// SetLocator gets a reference to the given string and assigns it to the Locator field.
func (o *UpdateProjectLabels200Response) SetLocator(v string) {
	o.Locator = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UpdateProjectLabels200Response) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectLabels200Response) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UpdateProjectLabels200Response) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UpdateProjectLabels200Response) SetTitle(v string) {
	o.Title = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateProjectLabels200Response) GetLabels() []GetOrganizationLabels200ResponseLabelsInner {
	if o == nil || IsNil(o.Labels) {
		var ret []GetOrganizationLabels200ResponseLabelsInner
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectLabels200Response) GetLabelsOk() ([]GetOrganizationLabels200ResponseLabelsInner, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *UpdateProjectLabels200Response) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []GetOrganizationLabels200ResponseLabelsInner and assigns it to the Labels field.
func (o *UpdateProjectLabels200Response) SetLabels(v []GetOrganizationLabels200ResponseLabelsInner) {
	o.Labels = v
}

func (o UpdateProjectLabels200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectLabels200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locator) {
		toSerialize["locator"] = o.Locator
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableUpdateProjectLabels200Response struct {
	value *UpdateProjectLabels200Response
	isSet bool
}

func (v NullableUpdateProjectLabels200Response) Get() *UpdateProjectLabels200Response {
	return v.value
}

func (v *NullableUpdateProjectLabels200Response) Set(val *UpdateProjectLabels200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectLabels200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectLabels200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectLabels200Response(val *UpdateProjectLabels200Response) *NullableUpdateProjectLabels200Response {
	return &NullableUpdateProjectLabels200Response{value: val, isSet: true}
}

func (v NullableUpdateProjectLabels200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectLabels200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


