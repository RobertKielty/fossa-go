/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the SourcedLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourcedLicense{}

// SourcedLicense struct for SourcedLicense
type SourcedLicense struct {
	Depth *int32 `json:"depth,omitempty"`
	LicenseId *string `json:"licenseId,omitempty"`
	Name *string `json:"name,omitempty"`
	Matches []string `json:"matches,omitempty"`
	Sources []string `json:"sources,omitempty"`
}

// NewSourcedLicense instantiates a new SourcedLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcedLicense() *SourcedLicense {
	this := SourcedLicense{}
	return &this
}

// NewSourcedLicenseWithDefaults instantiates a new SourcedLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcedLicenseWithDefaults() *SourcedLicense {
	this := SourcedLicense{}
	return &this
}

// GetDepth returns the Depth field value if set, zero value otherwise.
func (o *SourcedLicense) GetDepth() int32 {
	if o == nil || IsNil(o.Depth) {
		var ret int32
		return ret
	}
	return *o.Depth
}

// GetDepthOk returns a tuple with the Depth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcedLicense) GetDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.Depth) {
		return nil, false
	}
	return o.Depth, true
}

// HasDepth returns a boolean if a field has been set.
func (o *SourcedLicense) HasDepth() bool {
	if o != nil && !IsNil(o.Depth) {
		return true
	}

	return false
}

// SetDepth gets a reference to the given int32 and assigns it to the Depth field.
func (o *SourcedLicense) SetDepth(v int32) {
	o.Depth = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *SourcedLicense) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcedLicense) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *SourcedLicense) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *SourcedLicense) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SourcedLicense) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcedLicense) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SourcedLicense) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SourcedLicense) SetName(v string) {
	o.Name = &v
}

// GetMatches returns the Matches field value if set, zero value otherwise.
func (o *SourcedLicense) GetMatches() []string {
	if o == nil || IsNil(o.Matches) {
		var ret []string
		return ret
	}
	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcedLicense) GetMatchesOk() ([]string, bool) {
	if o == nil || IsNil(o.Matches) {
		return nil, false
	}
	return o.Matches, true
}

// HasMatches returns a boolean if a field has been set.
func (o *SourcedLicense) HasMatches() bool {
	if o != nil && !IsNil(o.Matches) {
		return true
	}

	return false
}

// SetMatches gets a reference to the given []string and assigns it to the Matches field.
func (o *SourcedLicense) SetMatches(v []string) {
	o.Matches = v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *SourcedLicense) GetSources() []string {
	if o == nil || IsNil(o.Sources) {
		var ret []string
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourcedLicense) GetSourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *SourcedLicense) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []string and assigns it to the Sources field.
func (o *SourcedLicense) SetSources(v []string) {
	o.Sources = v
}

func (o SourcedLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourcedLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Depth) {
		toSerialize["depth"] = o.Depth
	}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Matches) {
		toSerialize["matches"] = o.Matches
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableSourcedLicense struct {
	value *SourcedLicense
	isSet bool
}

func (v NullableSourcedLicense) Get() *SourcedLicense {
	return v.value
}

func (v *NullableSourcedLicense) Set(val *SourcedLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcedLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcedLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcedLicense(val *SourcedLicense) *NullableSourcedLicense {
	return &NullableSourcedLicense{value: val, isSet: true}
}

func (v NullableSourcedLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcedLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


