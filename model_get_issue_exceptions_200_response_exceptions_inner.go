/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the GetIssueExceptions200ResponseExceptionsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetIssueExceptions200ResponseExceptionsInner{}

// GetIssueExceptions200ResponseExceptionsInner struct for GetIssueExceptions200ResponseExceptionsInner
type GetIssueExceptions200ResponseExceptionsInner struct {
	Id *int32 `json:"id,omitempty"`
	IgnoreScope *string `json:"ignoreScope,omitempty"`
	PackageScope *string `json:"packageScope,omitempty"`
	IssueCategory *string `json:"issueCategory,omitempty"`
	ExceptionUserProjectId *string `json:"exceptionUserProjectId,omitempty"`
	ExceptionUserReleaseGroupId *int32 `json:"exceptionUserReleaseGroupId,omitempty"`
	ExceptionUserPolicyId *int32 `json:"exceptionUserPolicyId,omitempty"`
	ProjectTitle *string `json:"projectTitle,omitempty"`
	DependencyProjectLocator *string `json:"dependencyProjectLocator,omitempty"`
	DependencyRevisionLocator *string `json:"dependencyRevisionLocator,omitempty"`
	DependencyTitle *string `json:"dependencyTitle,omitempty"`
	Condition map[string]interface{} `json:"condition,omitempty"`
	ExceptionTitle *string `json:"exceptionTitle,omitempty"`
	Note *string `json:"note,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	Reason *string `json:"reason,omitempty"`
	PolicyTitle *string `json:"policyTitle,omitempty"`
}

// NewGetIssueExceptions200ResponseExceptionsInner instantiates a new GetIssueExceptions200ResponseExceptionsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetIssueExceptions200ResponseExceptionsInner() *GetIssueExceptions200ResponseExceptionsInner {
	this := GetIssueExceptions200ResponseExceptionsInner{}
	return &this
}

// NewGetIssueExceptions200ResponseExceptionsInnerWithDefaults instantiates a new GetIssueExceptions200ResponseExceptionsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetIssueExceptions200ResponseExceptionsInnerWithDefaults() *GetIssueExceptions200ResponseExceptionsInner {
	this := GetIssueExceptions200ResponseExceptionsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetId(v int32) {
	o.Id = &v
}

// GetIgnoreScope returns the IgnoreScope field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetIgnoreScope() string {
	if o == nil || IsNil(o.IgnoreScope) {
		var ret string
		return ret
	}
	return *o.IgnoreScope
}

// GetIgnoreScopeOk returns a tuple with the IgnoreScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetIgnoreScopeOk() (*string, bool) {
	if o == nil || IsNil(o.IgnoreScope) {
		return nil, false
	}
	return o.IgnoreScope, true
}

// HasIgnoreScope returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasIgnoreScope() bool {
	if o != nil && !IsNil(o.IgnoreScope) {
		return true
	}

	return false
}

// SetIgnoreScope gets a reference to the given string and assigns it to the IgnoreScope field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetIgnoreScope(v string) {
	o.IgnoreScope = &v
}

// GetPackageScope returns the PackageScope field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetPackageScope() string {
	if o == nil || IsNil(o.PackageScope) {
		var ret string
		return ret
	}
	return *o.PackageScope
}

// GetPackageScopeOk returns a tuple with the PackageScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetPackageScopeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageScope) {
		return nil, false
	}
	return o.PackageScope, true
}

// HasPackageScope returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasPackageScope() bool {
	if o != nil && !IsNil(o.PackageScope) {
		return true
	}

	return false
}

// SetPackageScope gets a reference to the given string and assigns it to the PackageScope field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetPackageScope(v string) {
	o.PackageScope = &v
}

// GetIssueCategory returns the IssueCategory field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetIssueCategory() string {
	if o == nil || IsNil(o.IssueCategory) {
		var ret string
		return ret
	}
	return *o.IssueCategory
}

// GetIssueCategoryOk returns a tuple with the IssueCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetIssueCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.IssueCategory) {
		return nil, false
	}
	return o.IssueCategory, true
}

// HasIssueCategory returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasIssueCategory() bool {
	if o != nil && !IsNil(o.IssueCategory) {
		return true
	}

	return false
}

// SetIssueCategory gets a reference to the given string and assigns it to the IssueCategory field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetIssueCategory(v string) {
	o.IssueCategory = &v
}

// GetExceptionUserProjectId returns the ExceptionUserProjectId field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionUserProjectId() string {
	if o == nil || IsNil(o.ExceptionUserProjectId) {
		var ret string
		return ret
	}
	return *o.ExceptionUserProjectId
}

// GetExceptionUserProjectIdOk returns a tuple with the ExceptionUserProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionUserProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExceptionUserProjectId) {
		return nil, false
	}
	return o.ExceptionUserProjectId, true
}

// HasExceptionUserProjectId returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasExceptionUserProjectId() bool {
	if o != nil && !IsNil(o.ExceptionUserProjectId) {
		return true
	}

	return false
}

// SetExceptionUserProjectId gets a reference to the given string and assigns it to the ExceptionUserProjectId field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetExceptionUserProjectId(v string) {
	o.ExceptionUserProjectId = &v
}

// GetExceptionUserReleaseGroupId returns the ExceptionUserReleaseGroupId field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionUserReleaseGroupId() int32 {
	if o == nil || IsNil(o.ExceptionUserReleaseGroupId) {
		var ret int32
		return ret
	}
	return *o.ExceptionUserReleaseGroupId
}

// GetExceptionUserReleaseGroupIdOk returns a tuple with the ExceptionUserReleaseGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionUserReleaseGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExceptionUserReleaseGroupId) {
		return nil, false
	}
	return o.ExceptionUserReleaseGroupId, true
}

// HasExceptionUserReleaseGroupId returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasExceptionUserReleaseGroupId() bool {
	if o != nil && !IsNil(o.ExceptionUserReleaseGroupId) {
		return true
	}

	return false
}

// SetExceptionUserReleaseGroupId gets a reference to the given int32 and assigns it to the ExceptionUserReleaseGroupId field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetExceptionUserReleaseGroupId(v int32) {
	o.ExceptionUserReleaseGroupId = &v
}

// GetExceptionUserPolicyId returns the ExceptionUserPolicyId field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionUserPolicyId() int32 {
	if o == nil || IsNil(o.ExceptionUserPolicyId) {
		var ret int32
		return ret
	}
	return *o.ExceptionUserPolicyId
}

// GetExceptionUserPolicyIdOk returns a tuple with the ExceptionUserPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionUserPolicyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExceptionUserPolicyId) {
		return nil, false
	}
	return o.ExceptionUserPolicyId, true
}

// HasExceptionUserPolicyId returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasExceptionUserPolicyId() bool {
	if o != nil && !IsNil(o.ExceptionUserPolicyId) {
		return true
	}

	return false
}

// SetExceptionUserPolicyId gets a reference to the given int32 and assigns it to the ExceptionUserPolicyId field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetExceptionUserPolicyId(v int32) {
	o.ExceptionUserPolicyId = &v
}

// GetProjectTitle returns the ProjectTitle field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetProjectTitle() string {
	if o == nil || IsNil(o.ProjectTitle) {
		var ret string
		return ret
	}
	return *o.ProjectTitle
}

// GetProjectTitleOk returns a tuple with the ProjectTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetProjectTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectTitle) {
		return nil, false
	}
	return o.ProjectTitle, true
}

// HasProjectTitle returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasProjectTitle() bool {
	if o != nil && !IsNil(o.ProjectTitle) {
		return true
	}

	return false
}

// SetProjectTitle gets a reference to the given string and assigns it to the ProjectTitle field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetProjectTitle(v string) {
	o.ProjectTitle = &v
}

// GetDependencyProjectLocator returns the DependencyProjectLocator field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetDependencyProjectLocator() string {
	if o == nil || IsNil(o.DependencyProjectLocator) {
		var ret string
		return ret
	}
	return *o.DependencyProjectLocator
}

// GetDependencyProjectLocatorOk returns a tuple with the DependencyProjectLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetDependencyProjectLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.DependencyProjectLocator) {
		return nil, false
	}
	return o.DependencyProjectLocator, true
}

// HasDependencyProjectLocator returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasDependencyProjectLocator() bool {
	if o != nil && !IsNil(o.DependencyProjectLocator) {
		return true
	}

	return false
}

// SetDependencyProjectLocator gets a reference to the given string and assigns it to the DependencyProjectLocator field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetDependencyProjectLocator(v string) {
	o.DependencyProjectLocator = &v
}

// GetDependencyRevisionLocator returns the DependencyRevisionLocator field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetDependencyRevisionLocator() string {
	if o == nil || IsNil(o.DependencyRevisionLocator) {
		var ret string
		return ret
	}
	return *o.DependencyRevisionLocator
}

// GetDependencyRevisionLocatorOk returns a tuple with the DependencyRevisionLocator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetDependencyRevisionLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.DependencyRevisionLocator) {
		return nil, false
	}
	return o.DependencyRevisionLocator, true
}

// HasDependencyRevisionLocator returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasDependencyRevisionLocator() bool {
	if o != nil && !IsNil(o.DependencyRevisionLocator) {
		return true
	}

	return false
}

// SetDependencyRevisionLocator gets a reference to the given string and assigns it to the DependencyRevisionLocator field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetDependencyRevisionLocator(v string) {
	o.DependencyRevisionLocator = &v
}

// GetDependencyTitle returns the DependencyTitle field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetDependencyTitle() string {
	if o == nil || IsNil(o.DependencyTitle) {
		var ret string
		return ret
	}
	return *o.DependencyTitle
}

// GetDependencyTitleOk returns a tuple with the DependencyTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetDependencyTitleOk() (*string, bool) {
	if o == nil || IsNil(o.DependencyTitle) {
		return nil, false
	}
	return o.DependencyTitle, true
}

// HasDependencyTitle returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasDependencyTitle() bool {
	if o != nil && !IsNil(o.DependencyTitle) {
		return true
	}

	return false
}

// SetDependencyTitle gets a reference to the given string and assigns it to the DependencyTitle field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetDependencyTitle(v string) {
	o.DependencyTitle = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetCondition() map[string]interface{} {
	if o == nil || IsNil(o.Condition) {
		var ret map[string]interface{}
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetConditionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Condition) {
		return map[string]interface{}{}, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given map[string]interface{} and assigns it to the Condition field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetCondition(v map[string]interface{}) {
	o.Condition = v
}

// GetExceptionTitle returns the ExceptionTitle field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionTitle() string {
	if o == nil || IsNil(o.ExceptionTitle) {
		var ret string
		return ret
	}
	return *o.ExceptionTitle
}

// GetExceptionTitleOk returns a tuple with the ExceptionTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetExceptionTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ExceptionTitle) {
		return nil, false
	}
	return o.ExceptionTitle, true
}

// HasExceptionTitle returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasExceptionTitle() bool {
	if o != nil && !IsNil(o.ExceptionTitle) {
		return true
	}

	return false
}

// SetExceptionTitle gets a reference to the given string and assigns it to the ExceptionTitle field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetExceptionTitle(v string) {
	o.ExceptionTitle = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetNote(v string) {
	o.Note = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetReason(v string) {
	o.Reason = &v
}

// GetPolicyTitle returns the PolicyTitle field value if set, zero value otherwise.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetPolicyTitle() string {
	if o == nil || IsNil(o.PolicyTitle) {
		var ret string
		return ret
	}
	return *o.PolicyTitle
}

// GetPolicyTitleOk returns a tuple with the PolicyTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) GetPolicyTitleOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyTitle) {
		return nil, false
	}
	return o.PolicyTitle, true
}

// HasPolicyTitle returns a boolean if a field has been set.
func (o *GetIssueExceptions200ResponseExceptionsInner) HasPolicyTitle() bool {
	if o != nil && !IsNil(o.PolicyTitle) {
		return true
	}

	return false
}

// SetPolicyTitle gets a reference to the given string and assigns it to the PolicyTitle field.
func (o *GetIssueExceptions200ResponseExceptionsInner) SetPolicyTitle(v string) {
	o.PolicyTitle = &v
}

func (o GetIssueExceptions200ResponseExceptionsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetIssueExceptions200ResponseExceptionsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IgnoreScope) {
		toSerialize["ignoreScope"] = o.IgnoreScope
	}
	if !IsNil(o.PackageScope) {
		toSerialize["packageScope"] = o.PackageScope
	}
	if !IsNil(o.IssueCategory) {
		toSerialize["issueCategory"] = o.IssueCategory
	}
	if !IsNil(o.ExceptionUserProjectId) {
		toSerialize["exceptionUserProjectId"] = o.ExceptionUserProjectId
	}
	if !IsNil(o.ExceptionUserReleaseGroupId) {
		toSerialize["exceptionUserReleaseGroupId"] = o.ExceptionUserReleaseGroupId
	}
	if !IsNil(o.ExceptionUserPolicyId) {
		toSerialize["exceptionUserPolicyId"] = o.ExceptionUserPolicyId
	}
	if !IsNil(o.ProjectTitle) {
		toSerialize["projectTitle"] = o.ProjectTitle
	}
	if !IsNil(o.DependencyProjectLocator) {
		toSerialize["dependencyProjectLocator"] = o.DependencyProjectLocator
	}
	if !IsNil(o.DependencyRevisionLocator) {
		toSerialize["dependencyRevisionLocator"] = o.DependencyRevisionLocator
	}
	if !IsNil(o.DependencyTitle) {
		toSerialize["dependencyTitle"] = o.DependencyTitle
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.ExceptionTitle) {
		toSerialize["exceptionTitle"] = o.ExceptionTitle
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.PolicyTitle) {
		toSerialize["policyTitle"] = o.PolicyTitle
	}
	return toSerialize, nil
}

type NullableGetIssueExceptions200ResponseExceptionsInner struct {
	value *GetIssueExceptions200ResponseExceptionsInner
	isSet bool
}

func (v NullableGetIssueExceptions200ResponseExceptionsInner) Get() *GetIssueExceptions200ResponseExceptionsInner {
	return v.value
}

func (v *NullableGetIssueExceptions200ResponseExceptionsInner) Set(val *GetIssueExceptions200ResponseExceptionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssueExceptions200ResponseExceptionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssueExceptions200ResponseExceptionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssueExceptions200ResponseExceptionsInner(val *GetIssueExceptions200ResponseExceptionsInner) *NullableGetIssueExceptions200ResponseExceptionsInner {
	return &NullableGetIssueExceptions200ResponseExceptionsInner{value: val, isSet: true}
}

func (v NullableGetIssueExceptions200ResponseExceptionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssueExceptions200ResponseExceptionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


