/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the GetAllUsers200ResponseInnerBitbucketCloud type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAllUsers200ResponseInnerBitbucketCloud{}

// GetAllUsers200ResponseInnerBitbucketCloud struct for GetAllUsers200ResponseInnerBitbucketCloud
type GetAllUsers200ResponseInnerBitbucketCloud struct {
	// The user's Bitbucket Cloud username
	Name *string `json:"name,omitempty"`
	// The user's Bitbucket Cloud email address
	Email *string `json:"email,omitempty"`
	// The user's Bitbucket Cloud avatar URL
	AvatarUrl *string `json:"avatar_url,omitempty"`
}

// NewGetAllUsers200ResponseInnerBitbucketCloud instantiates a new GetAllUsers200ResponseInnerBitbucketCloud object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAllUsers200ResponseInnerBitbucketCloud() *GetAllUsers200ResponseInnerBitbucketCloud {
	this := GetAllUsers200ResponseInnerBitbucketCloud{}
	return &this
}

// NewGetAllUsers200ResponseInnerBitbucketCloudWithDefaults instantiates a new GetAllUsers200ResponseInnerBitbucketCloud object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAllUsers200ResponseInnerBitbucketCloudWithDefaults() *GetAllUsers200ResponseInnerBitbucketCloud {
	this := GetAllUsers200ResponseInnerBitbucketCloud{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) SetEmail(v string) {
	o.Email = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *GetAllUsers200ResponseInnerBitbucketCloud) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

func (o GetAllUsers200ResponseInnerBitbucketCloud) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAllUsers200ResponseInnerBitbucketCloud) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	return toSerialize, nil
}

type NullableGetAllUsers200ResponseInnerBitbucketCloud struct {
	value *GetAllUsers200ResponseInnerBitbucketCloud
	isSet bool
}

func (v NullableGetAllUsers200ResponseInnerBitbucketCloud) Get() *GetAllUsers200ResponseInnerBitbucketCloud {
	return v.value
}

func (v *NullableGetAllUsers200ResponseInnerBitbucketCloud) Set(val *GetAllUsers200ResponseInnerBitbucketCloud) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllUsers200ResponseInnerBitbucketCloud) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllUsers200ResponseInnerBitbucketCloud) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllUsers200ResponseInnerBitbucketCloud(val *GetAllUsers200ResponseInnerBitbucketCloud) *NullableGetAllUsers200ResponseInnerBitbucketCloud {
	return &NullableGetAllUsers200ResponseInnerBitbucketCloud{value: val, isSet: true}
}

func (v NullableGetAllUsers200ResponseInnerBitbucketCloud) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllUsers200ResponseInnerBitbucketCloud) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


