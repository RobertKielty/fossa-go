/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetIssues200ResponseIssues - struct for GetIssues200ResponseIssues
type GetIssues200ResponseIssues struct {
	ArrayOfGetIssues200ResponseIssuesOneOfInner *[]GetIssues200ResponseIssuesOneOfInner
	ArrayOfGetIssues200ResponseIssuesOneOfInner1 *[]GetIssues200ResponseIssuesOneOfInner1
	ArrayOfGetIssues200ResponseIssuesOneOfInner2 *[]GetIssues200ResponseIssuesOneOfInner2
}

// []GetIssues200ResponseIssuesOneOfInnerAsGetIssues200ResponseIssues is a convenience function that returns []GetIssues200ResponseIssuesOneOfInner wrapped in GetIssues200ResponseIssues
func ArrayOfGetIssues200ResponseIssuesOneOfInnerAsGetIssues200ResponseIssues(v *[]GetIssues200ResponseIssuesOneOfInner) GetIssues200ResponseIssues {
	return GetIssues200ResponseIssues{
		ArrayOfGetIssues200ResponseIssuesOneOfInner: v,
	}
}

// []GetIssues200ResponseIssuesOneOfInner1AsGetIssues200ResponseIssues is a convenience function that returns []GetIssues200ResponseIssuesOneOfInner1 wrapped in GetIssues200ResponseIssues
func ArrayOfGetIssues200ResponseIssuesOneOfInner1AsGetIssues200ResponseIssues(v *[]GetIssues200ResponseIssuesOneOfInner1) GetIssues200ResponseIssues {
	return GetIssues200ResponseIssues{
		ArrayOfGetIssues200ResponseIssuesOneOfInner1: v,
	}
}

// []GetIssues200ResponseIssuesOneOfInner2AsGetIssues200ResponseIssues is a convenience function that returns []GetIssues200ResponseIssuesOneOfInner2 wrapped in GetIssues200ResponseIssues
func ArrayOfGetIssues200ResponseIssuesOneOfInner2AsGetIssues200ResponseIssues(v *[]GetIssues200ResponseIssuesOneOfInner2) GetIssues200ResponseIssues {
	return GetIssues200ResponseIssues{
		ArrayOfGetIssues200ResponseIssuesOneOfInner2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetIssues200ResponseIssues) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfGetIssues200ResponseIssuesOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetIssues200ResponseIssuesOneOfInner)
	if err == nil {
		jsonArrayOfGetIssues200ResponseIssuesOneOfInner, _ := json.Marshal(dst.ArrayOfGetIssues200ResponseIssuesOneOfInner)
		if string(jsonArrayOfGetIssues200ResponseIssuesOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetIssues200ResponseIssuesOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetIssues200ResponseIssuesOneOfInner); err != nil {
				dst.ArrayOfGetIssues200ResponseIssuesOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetIssues200ResponseIssuesOneOfInner = nil
	}

	// try to unmarshal data into ArrayOfGetIssues200ResponseIssuesOneOfInner1
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1)
	if err == nil {
		jsonArrayOfGetIssues200ResponseIssuesOneOfInner1, _ := json.Marshal(dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1)
		if string(jsonArrayOfGetIssues200ResponseIssuesOneOfInner1) == "{}" { // empty struct
			dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1); err != nil {
				dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1 = nil
	}

	// try to unmarshal data into ArrayOfGetIssues200ResponseIssuesOneOfInner2
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2)
	if err == nil {
		jsonArrayOfGetIssues200ResponseIssuesOneOfInner2, _ := json.Marshal(dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2)
		if string(jsonArrayOfGetIssues200ResponseIssuesOneOfInner2) == "{}" { // empty struct
			dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2 = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2); err != nil {
				dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfGetIssues200ResponseIssuesOneOfInner = nil
		dst.ArrayOfGetIssues200ResponseIssuesOneOfInner1 = nil
		dst.ArrayOfGetIssues200ResponseIssuesOneOfInner2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetIssues200ResponseIssues)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetIssues200ResponseIssues)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetIssues200ResponseIssues) MarshalJSON() ([]byte, error) {
	if src.ArrayOfGetIssues200ResponseIssuesOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetIssues200ResponseIssuesOneOfInner)
	}

	if src.ArrayOfGetIssues200ResponseIssuesOneOfInner1 != nil {
		return json.Marshal(&src.ArrayOfGetIssues200ResponseIssuesOneOfInner1)
	}

	if src.ArrayOfGetIssues200ResponseIssuesOneOfInner2 != nil {
		return json.Marshal(&src.ArrayOfGetIssues200ResponseIssuesOneOfInner2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetIssues200ResponseIssues) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfGetIssues200ResponseIssuesOneOfInner != nil {
		return obj.ArrayOfGetIssues200ResponseIssuesOneOfInner
	}

	if obj.ArrayOfGetIssues200ResponseIssuesOneOfInner1 != nil {
		return obj.ArrayOfGetIssues200ResponseIssuesOneOfInner1
	}

	if obj.ArrayOfGetIssues200ResponseIssuesOneOfInner2 != nil {
		return obj.ArrayOfGetIssues200ResponseIssuesOneOfInner2
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetIssues200ResponseIssues) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfGetIssues200ResponseIssuesOneOfInner != nil {
		return *obj.ArrayOfGetIssues200ResponseIssuesOneOfInner
	}

	if obj.ArrayOfGetIssues200ResponseIssuesOneOfInner1 != nil {
		return *obj.ArrayOfGetIssues200ResponseIssuesOneOfInner1
	}

	if obj.ArrayOfGetIssues200ResponseIssuesOneOfInner2 != nil {
		return *obj.ArrayOfGetIssues200ResponseIssuesOneOfInner2
	}

	// all schemas are nil
	return nil
}

type NullableGetIssues200ResponseIssues struct {
	value *GetIssues200ResponseIssues
	isSet bool
}

func (v NullableGetIssues200ResponseIssues) Get() *GetIssues200ResponseIssues {
	return v.value
}

func (v *NullableGetIssues200ResponseIssues) Set(val *GetIssues200ResponseIssues) {
	v.value = val
	v.isSet = true
}

func (v NullableGetIssues200ResponseIssues) IsSet() bool {
	return v.isSet
}

func (v *NullableGetIssues200ResponseIssues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetIssues200ResponseIssues(val *GetIssues200ResponseIssues) *NullableGetIssues200ResponseIssues {
	return &NullableGetIssues200ResponseIssues{value: val, isSet: true}
}

func (v NullableGetIssues200ResponseIssues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetIssues200ResponseIssues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


