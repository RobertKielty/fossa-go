/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
	"fmt"
)

// SafeVersionDistance the model 'SafeVersionDistance'
type SafeVersionDistance string

// List of SafeVersionDistance
const (
	MAJOR SafeVersionDistance = "MAJOR"
	MINOR SafeVersionDistance = "MINOR"
	PATCH SafeVersionDistance = "PATCH"
)

// All allowed values of SafeVersionDistance enum
var AllowedSafeVersionDistanceEnumValues = []SafeVersionDistance{
	"MAJOR",
	"MINOR",
	"PATCH",
}

func (v *SafeVersionDistance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SafeVersionDistance(value)
	for _, existing := range AllowedSafeVersionDistanceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SafeVersionDistance", value)
}

// NewSafeVersionDistanceFromValue returns a pointer to a valid SafeVersionDistance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSafeVersionDistanceFromValue(v string) (*SafeVersionDistance, error) {
	ev := SafeVersionDistance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SafeVersionDistance: valid values are %v", v, AllowedSafeVersionDistanceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SafeVersionDistance) IsValid() bool {
	for _, existing := range AllowedSafeVersionDistanceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SafeVersionDistance value
func (v SafeVersionDistance) Ptr() *SafeVersionDistance {
	return &v
}

type NullableSafeVersionDistance struct {
	value *SafeVersionDistance
	isSet bool
}

func (v NullableSafeVersionDistance) Get() *SafeVersionDistance {
	return v.value
}

func (v *NullableSafeVersionDistance) Set(val *SafeVersionDistance) {
	v.value = val
	v.isSet = true
}

func (v NullableSafeVersionDistance) IsSet() bool {
	return v.isSet
}

func (v *NullableSafeVersionDistance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafeVersionDistance(val *SafeVersionDistance) *NullableSafeVersionDistance {
	return &NullableSafeVersionDistance{value: val, isSet: true}
}

func (v NullableSafeVersionDistance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafeVersionDistance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

