/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the UpdateIssuesRequestOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIssuesRequestOneOf{}

// UpdateIssuesRequestOneOf struct for UpdateIssuesRequestOneOf
type UpdateIssuesRequestOneOf struct {
	Type *string `json:"type,omitempty"`
	Notes *string `json:"notes,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewUpdateIssuesRequestOneOf instantiates a new UpdateIssuesRequestOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIssuesRequestOneOf() *UpdateIssuesRequestOneOf {
	this := UpdateIssuesRequestOneOf{}
	return &this
}

// NewUpdateIssuesRequestOneOfWithDefaults instantiates a new UpdateIssuesRequestOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIssuesRequestOneOfWithDefaults() *UpdateIssuesRequestOneOf {
	this := UpdateIssuesRequestOneOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateIssuesRequestOneOf) SetType(v string) {
	o.Type = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *UpdateIssuesRequestOneOf) SetNotes(v string) {
	o.Notes = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UpdateIssuesRequestOneOf) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIssuesRequestOneOf) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UpdateIssuesRequestOneOf) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *UpdateIssuesRequestOneOf) SetReason(v string) {
	o.Reason = &v
}

func (o UpdateIssuesRequestOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIssuesRequestOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableUpdateIssuesRequestOneOf struct {
	value *UpdateIssuesRequestOneOf
	isSet bool
}

func (v NullableUpdateIssuesRequestOneOf) Get() *UpdateIssuesRequestOneOf {
	return v.value
}

func (v *NullableUpdateIssuesRequestOneOf) Set(val *UpdateIssuesRequestOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIssuesRequestOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIssuesRequestOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIssuesRequestOneOf(val *UpdateIssuesRequestOneOf) *NullableUpdateIssuesRequestOneOf {
	return &NullableUpdateIssuesRequestOneOf{value: val, isSet: true}
}

func (v NullableUpdateIssuesRequestOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIssuesRequestOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


