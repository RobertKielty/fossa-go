/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the CocoapodsSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CocoapodsSource{}

// CocoapodsSource struct for CocoapodsSource
type CocoapodsSource struct {
	// ID of the Cocoapods source in the FOSSA DB
	Id *float32 `json:"id,omitempty"`
	// Organization ID that owns this source
	OrganizationId *float32 `json:"organizationId,omitempty"`
	// URL of the Cocoapods spec repo
	Url *string `json:"url,omitempty"`
}

// NewCocoapodsSource instantiates a new CocoapodsSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCocoapodsSource() *CocoapodsSource {
	this := CocoapodsSource{}
	return &this
}

// NewCocoapodsSourceWithDefaults instantiates a new CocoapodsSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCocoapodsSourceWithDefaults() *CocoapodsSource {
	this := CocoapodsSource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CocoapodsSource) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CocoapodsSource) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CocoapodsSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *CocoapodsSource) SetId(v float32) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *CocoapodsSource) GetOrganizationId() float32 {
	if o == nil || IsNil(o.OrganizationId) {
		var ret float32
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CocoapodsSource) GetOrganizationIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *CocoapodsSource) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given float32 and assigns it to the OrganizationId field.
func (o *CocoapodsSource) SetOrganizationId(v float32) {
	o.OrganizationId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CocoapodsSource) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CocoapodsSource) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CocoapodsSource) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CocoapodsSource) SetUrl(v string) {
	o.Url = &v
}

func (o CocoapodsSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CocoapodsSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableCocoapodsSource struct {
	value *CocoapodsSource
	isSet bool
}

func (v NullableCocoapodsSource) Get() *CocoapodsSource {
	return v.value
}

func (v *NullableCocoapodsSource) Set(val *CocoapodsSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCocoapodsSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCocoapodsSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCocoapodsSource(val *CocoapodsSource) *NullableCocoapodsSource {
	return &NullableCocoapodsSource{value: val, isSet: true}
}

func (v NullableCocoapodsSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCocoapodsSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


