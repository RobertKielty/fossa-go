/*
FOSSA API

OpenAPI Specification for public FOSSA APIs

API version: 4.28.61
Contact: support@fossa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fossa

import (
	"encoding/json"
)

// checks if the LicensingIssueSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicensingIssueSettings{}

// LicensingIssueSettings struct for LicensingIssueSettings
type LicensingIssueSettings struct {
	DefaultPolicyId *int32 `json:"defaultPolicyId,omitempty"`
	ProjectDefaultLicensingIssueScanningEnabled *bool `json:"projectDefaultLicensingIssueScanningEnabled,omitempty"`
	ProjectDefaultLicensingStatusCheckEnabled *bool `json:"projectDefaultLicensingStatusCheckEnabled,omitempty"`
	ProjectDefaultStatusCheckFilterLicensing *int32 `json:"projectDefaultStatusCheckFilterLicensing,omitempty"`
}

// NewLicensingIssueSettings instantiates a new LicensingIssueSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicensingIssueSettings() *LicensingIssueSettings {
	this := LicensingIssueSettings{}
	return &this
}

// NewLicensingIssueSettingsWithDefaults instantiates a new LicensingIssueSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicensingIssueSettingsWithDefaults() *LicensingIssueSettings {
	this := LicensingIssueSettings{}
	return &this
}

// GetDefaultPolicyId returns the DefaultPolicyId field value if set, zero value otherwise.
func (o *LicensingIssueSettings) GetDefaultPolicyId() int32 {
	if o == nil || IsNil(o.DefaultPolicyId) {
		var ret int32
		return ret
	}
	return *o.DefaultPolicyId
}

// GetDefaultPolicyIdOk returns a tuple with the DefaultPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensingIssueSettings) GetDefaultPolicyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultPolicyId) {
		return nil, false
	}
	return o.DefaultPolicyId, true
}

// HasDefaultPolicyId returns a boolean if a field has been set.
func (o *LicensingIssueSettings) HasDefaultPolicyId() bool {
	if o != nil && !IsNil(o.DefaultPolicyId) {
		return true
	}

	return false
}

// SetDefaultPolicyId gets a reference to the given int32 and assigns it to the DefaultPolicyId field.
func (o *LicensingIssueSettings) SetDefaultPolicyId(v int32) {
	o.DefaultPolicyId = &v
}

// GetProjectDefaultLicensingIssueScanningEnabled returns the ProjectDefaultLicensingIssueScanningEnabled field value if set, zero value otherwise.
func (o *LicensingIssueSettings) GetProjectDefaultLicensingIssueScanningEnabled() bool {
	if o == nil || IsNil(o.ProjectDefaultLicensingIssueScanningEnabled) {
		var ret bool
		return ret
	}
	return *o.ProjectDefaultLicensingIssueScanningEnabled
}

// GetProjectDefaultLicensingIssueScanningEnabledOk returns a tuple with the ProjectDefaultLicensingIssueScanningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensingIssueSettings) GetProjectDefaultLicensingIssueScanningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ProjectDefaultLicensingIssueScanningEnabled) {
		return nil, false
	}
	return o.ProjectDefaultLicensingIssueScanningEnabled, true
}

// HasProjectDefaultLicensingIssueScanningEnabled returns a boolean if a field has been set.
func (o *LicensingIssueSettings) HasProjectDefaultLicensingIssueScanningEnabled() bool {
	if o != nil && !IsNil(o.ProjectDefaultLicensingIssueScanningEnabled) {
		return true
	}

	return false
}

// SetProjectDefaultLicensingIssueScanningEnabled gets a reference to the given bool and assigns it to the ProjectDefaultLicensingIssueScanningEnabled field.
func (o *LicensingIssueSettings) SetProjectDefaultLicensingIssueScanningEnabled(v bool) {
	o.ProjectDefaultLicensingIssueScanningEnabled = &v
}

// GetProjectDefaultLicensingStatusCheckEnabled returns the ProjectDefaultLicensingStatusCheckEnabled field value if set, zero value otherwise.
func (o *LicensingIssueSettings) GetProjectDefaultLicensingStatusCheckEnabled() bool {
	if o == nil || IsNil(o.ProjectDefaultLicensingStatusCheckEnabled) {
		var ret bool
		return ret
	}
	return *o.ProjectDefaultLicensingStatusCheckEnabled
}

// GetProjectDefaultLicensingStatusCheckEnabledOk returns a tuple with the ProjectDefaultLicensingStatusCheckEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensingIssueSettings) GetProjectDefaultLicensingStatusCheckEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ProjectDefaultLicensingStatusCheckEnabled) {
		return nil, false
	}
	return o.ProjectDefaultLicensingStatusCheckEnabled, true
}

// HasProjectDefaultLicensingStatusCheckEnabled returns a boolean if a field has been set.
func (o *LicensingIssueSettings) HasProjectDefaultLicensingStatusCheckEnabled() bool {
	if o != nil && !IsNil(o.ProjectDefaultLicensingStatusCheckEnabled) {
		return true
	}

	return false
}

// SetProjectDefaultLicensingStatusCheckEnabled gets a reference to the given bool and assigns it to the ProjectDefaultLicensingStatusCheckEnabled field.
func (o *LicensingIssueSettings) SetProjectDefaultLicensingStatusCheckEnabled(v bool) {
	o.ProjectDefaultLicensingStatusCheckEnabled = &v
}

// GetProjectDefaultStatusCheckFilterLicensing returns the ProjectDefaultStatusCheckFilterLicensing field value if set, zero value otherwise.
func (o *LicensingIssueSettings) GetProjectDefaultStatusCheckFilterLicensing() int32 {
	if o == nil || IsNil(o.ProjectDefaultStatusCheckFilterLicensing) {
		var ret int32
		return ret
	}
	return *o.ProjectDefaultStatusCheckFilterLicensing
}

// GetProjectDefaultStatusCheckFilterLicensingOk returns a tuple with the ProjectDefaultStatusCheckFilterLicensing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensingIssueSettings) GetProjectDefaultStatusCheckFilterLicensingOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectDefaultStatusCheckFilterLicensing) {
		return nil, false
	}
	return o.ProjectDefaultStatusCheckFilterLicensing, true
}

// HasProjectDefaultStatusCheckFilterLicensing returns a boolean if a field has been set.
func (o *LicensingIssueSettings) HasProjectDefaultStatusCheckFilterLicensing() bool {
	if o != nil && !IsNil(o.ProjectDefaultStatusCheckFilterLicensing) {
		return true
	}

	return false
}

// SetProjectDefaultStatusCheckFilterLicensing gets a reference to the given int32 and assigns it to the ProjectDefaultStatusCheckFilterLicensing field.
func (o *LicensingIssueSettings) SetProjectDefaultStatusCheckFilterLicensing(v int32) {
	o.ProjectDefaultStatusCheckFilterLicensing = &v
}

func (o LicensingIssueSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicensingIssueSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultPolicyId) {
		toSerialize["defaultPolicyId"] = o.DefaultPolicyId
	}
	if !IsNil(o.ProjectDefaultLicensingIssueScanningEnabled) {
		toSerialize["projectDefaultLicensingIssueScanningEnabled"] = o.ProjectDefaultLicensingIssueScanningEnabled
	}
	if !IsNil(o.ProjectDefaultLicensingStatusCheckEnabled) {
		toSerialize["projectDefaultLicensingStatusCheckEnabled"] = o.ProjectDefaultLicensingStatusCheckEnabled
	}
	if !IsNil(o.ProjectDefaultStatusCheckFilterLicensing) {
		toSerialize["projectDefaultStatusCheckFilterLicensing"] = o.ProjectDefaultStatusCheckFilterLicensing
	}
	return toSerialize, nil
}

type NullableLicensingIssueSettings struct {
	value *LicensingIssueSettings
	isSet bool
}

func (v NullableLicensingIssueSettings) Get() *LicensingIssueSettings {
	return v.value
}

func (v *NullableLicensingIssueSettings) Set(val *LicensingIssueSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensingIssueSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensingIssueSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensingIssueSettings(val *LicensingIssueSettings) *NullableLicensingIssueSettings {
	return &NullableLicensingIssueSettings{value: val, isSet: true}
}

func (v NullableLicensingIssueSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensingIssueSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


